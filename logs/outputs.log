=== Project run started at: 2025-05-07 10:48:00 ===

### [Step 1/17] Running: scripts_fv/packages.R ###


> # =====================================
> # Install missing R packages safely
> # =====================================
> 
> # ----- 1. Normal CRAN packages -----
> 
> packages <- c(
+   "dplyr", "igraph", "ade4", "tidyr", "adegenet", "readr", "tidyverse", "reldist", "ape",
+   "ggdendro", "ggpubr", "phylogram", "phytools", "dendextend", "geosphere", "vegan", "e1071",
+   "Hmisc", "REAT", "ggplot2", "gridExtra", "stringr", "conflicted", "graph4lg", "TreeDist",
+   "corrplot", "geiger", "car", "caper", "nlme", "Publish", "geomorph",
+   "cowplot", "GGally", "png", "grid", "factoextra", "cluster", "NbClust", "fpc", "PlotTools",
+   "wesanderson", "magick", "picante", "Biodem", "SDPDmod", "surface"
+ )

> # Excluded manually:
> # - "surface" → Special/archived install.
> # - "BiocManager" → Installer utility.
> 
> # Log files
> log_skipped <- "skipped_packages.log"

> log_installed <- "installed_packages.log"

> log_failed <- "failed_packages.log"

> log_errors <- "error_messages.log"

> # Safely clear old logs
> safe_remove <- function(file) if (file.exists(file)) file.remove(file)

> invisible(lapply(c(log_skipped, log_installed, log_failed, log_errors), safe_remove))

> # Installed packages snapshot
> installed <- rownames(installed.packages())

> # Helper function to install missing packages only
> install_if_needed <- function(pkg) {
+   if (pkg %in% installed) {
+     write(pkg, file = log_skipped, append = TRUE)
+   } else {
+     message("Installing: ", pkg)
+     tryCatch({
+       install.packages(pkg) # Force binary where available
+       installed <<- rownames(installed.packages()) # Refresh full list
+       if (pkg %in% installed) {
+         write(pkg, file = log_installed, append = TRUE)
+       } else {
+         write(pkg, file = log_failed, append = TRUE)
+       }
+     }, error = function(e) {
+       write(pkg, file = log_failed, append = TRUE)
+       write(paste(pkg, ":", e$message), file = log_errors, append = TRUE)
+     })
+   }
+ }

> # Install missing CRAN packages
> invisible(lapply(packages, install_if_needed))

> # Test if packages load
> invisible(lapply(packages, function(pkg) {
+   message("Trying to load: ", pkg)
+   tryCatch({
+     library(pkg, character.only = TRUE)
+   }, error = function(e) {
+     message("❌ Failed to load ", pkg, ": ", e$message)
+   })
+ }))
Trying to load: dplyr

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Trying to load: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:dplyr’:

    as_data_frame, groups, union

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

Trying to load: ade4
Trying to load: tidyr

Attaching package: ‘tidyr’

The following object is masked from ‘package:igraph’:

    crossing

Trying to load: adegenet

   /// adegenet 2.1.11 is loaded ////////////

   > overview: '?adegenet'
   > tutorials/doc/questions: 'adegenetWeb()' 
   > bug reports/feature requests: adegenetIssues()


Trying to load: readr
Trying to load: tidyverse
── Attaching core tidyverse packages ────────────────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ purrr     1.0.4
✔ ggplot2   3.5.2     ✔ stringr   1.5.1
✔ lubridate 1.9.4     ✔ tibble    3.2.1
── Conflicts ──────────────────────────────────────────────────── tidyverse_conflicts() ──
✖ lubridate::%--%()       masks igraph::%--%()
✖ tibble::as_data_frame() masks igraph::as_data_frame(), dplyr::as_data_frame()
✖ purrr::compose()        masks igraph::compose()
✖ tidyr::crossing()       masks igraph::crossing()
✖ dplyr::filter()         masks stats::filter()
✖ dplyr::lag()            masks stats::lag()
✖ purrr::simplify()       masks igraph::simplify()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
Trying to load: reldist
reldist: Relative Distribution Methods
Version 1.7-2 created on 2023-02-16.
copyright (c) 2003, Mark S. Handcock, University of California-Los Angeles
 For citation information, type citation("reldist").
 Type help(package="reldist") to get started.

Trying to load: ape

Attaching package: ‘ape’

The following objects are masked from ‘package:igraph’:

    degree, edges, mst, ring

The following object is masked from ‘package:dplyr’:

    where

Trying to load: ggdendro
Trying to load: ggpubr

Attaching package: ‘ggpubr’

The following object is masked from ‘package:ape’:

    rotate

Trying to load: phylogram
Trying to load: phytools
Loading required package: maps

Attaching package: ‘maps’

The following object is masked from ‘package:purrr’:

    map

Trying to load: dendextend
Registered S3 methods overwritten by 'dendextend':
  method              from     
  as.dendrogram.phylo phylogram
  rev.hclust          vegan    

---------------------
Welcome to dendextend version 1.19.0
Type citation('dendextend') for how to cite the package.

Type browseVignettes(package = 'dendextend') for the package vignette.
The github page is: https://github.com/talgalili/dendextend/

Suggestions and bug-reports can be submitted at: https://github.com/talgalili/dendextend/issues
You may ask questions at stackoverflow, use the r and dendextend tags: 
	 https://stackoverflow.com/questions/tagged/dendextend

	To suppress this message use:  suppressPackageStartupMessages(library(dendextend))
---------------------


Attaching package: ‘dendextend’

The following object is masked from ‘package:phytools’:

    untangle

The following object is masked from ‘package:phylogram’:

    prune

The following object is masked from ‘package:ggpubr’:

    rotate

The following object is masked from ‘package:ggdendro’:

    theme_dendro

The following objects are masked from ‘package:ape’:

    ladderize, rotate

The following object is masked from ‘package:stats’:

    cutree

Trying to load: geosphere
Trying to load: vegan
Loading required package: permute

Attaching package: ‘permute’

The following object is masked from ‘package:dendextend’:

    shuffle

The following object is masked from ‘package:igraph’:

    permute

Loading required package: lattice
This is vegan 2.6-10

Attaching package: ‘vegan’

The following object is masked from ‘package:phytools’:

    scores

The following object is masked from ‘package:igraph’:

    diversity

Trying to load: e1071
Trying to load: Hmisc

Attaching package: ‘Hmisc’

The following object is masked from ‘package:e1071’:

    impute

The following object is masked from ‘package:ggdendro’:

    label

The following object is masked from ‘package:ape’:

    zoom

The following objects are masked from ‘package:reldist’:

    wtd.mean, wtd.quantile, wtd.var

The following objects are masked from ‘package:dplyr’:

    src, summarize

The following objects are masked from ‘package:base’:

    format.pval, units

Trying to load: REAT

Attaching package: ‘REAT’

The following object is masked from ‘package:reldist’:

    gini

The following object is masked from ‘package:readr’:

    spec

Trying to load: ggplot2
Trying to load: gridExtra

Attaching package: ‘gridExtra’

The following object is masked from ‘package:dplyr’:

    combine

Trying to load: stringr
Trying to load: conflicted
Trying to load: graph4lg
Welcome to 'graph4lg' package. Let's do landscape genetics analysis with graphs
Trying to load: TreeDist
Registered S3 method overwritten by 'TreeTools':
  method   from    
  [.phyDat phangorn
Trying to load: corrplot
corrplot 0.95 loaded
Trying to load: geiger
Trying to load: car
Loading required package: carData
Trying to load: caper
Loading required package: MASS

Attaching package: ‘MASS’

The following object is masked from ‘package:dplyr’:

    select

Loading required package: mvtnorm
Trying to load: nlme
Trying to load: Publish
Loading required package: prodlim

Attaching package: ‘prodlim’

The following object is masked from ‘package:phytools’:

    getStates

The following object is masked from ‘package:igraph’:

    neighborhood

Trying to load: geomorph
Loading required package: RRPP
Loading required package: rgl
Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

Trying to load: cowplot
Trying to load: GGally
Registered S3 method overwritten by 'GGally':
  method from   
  +.gg   ggplot2
Trying to load: png
Trying to load: grid
Trying to load: factoextra
Welcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa
Trying to load: cluster
Trying to load: NbClust
Trying to load: fpc
Trying to load: PlotTools
Trying to load: wesanderson
Trying to load: magick
Linking to ImageMagick 7.1.1.47
Enabled features: cairo, fontconfig, freetype, fftw, heic, lcms, raw, rsvg, webp, x11
Disabled features: ghostscript, pango
Using 7 threads
Trying to load: picante
Trying to load: Biodem
Trying to load: SDPDmod
Registered S3 method overwritten by 'spdep':
  method   from
  plot.mst ape 
Trying to load: surface
Loading required package: ouch

Attaching package: ‘ouch’

The following object is masked from ‘package:REAT’:

    hansen


> # ---- Install treeio separately (requires BiocManager) ----
> 
> # Refresh installed packages snapshot
> installed <- rownames(installed.packages())

> if (!"treeio" %in% installed) {
+   message("Installing treeio via BiocManager...")
+   if (!"BiocManager" %in% installed) {
+     install.packages("BiocManager")
+   }
+   BiocManager::install("treeio")
+ }

> message("Trying to load: treeio")
Trying to load: treeio

> tryCatch({
+   library(treeio)
+ }, error = function(e) {
+   message("❌ Failed to load treeio: ", e$message)
+ })
treeio v1.32.0 Learn more at https://yulab-smu.top/contribution-tree-data/

Please cite:

LG Wang, TTY Lam, S Xu, Z Dai, L Zhou, T Feng, P Guo, CW Dunn, BR Jones, T
Bradley, H Zhu, Y Guan, Y Jiang, G Yu. treeio: an R package for phylogenetic
tree input and output with richly annotated and associated data. Molecular
Biology and Evolution. 2020, 37(2):599-603. doi: 10.1093/molbev/msz240

### [Step 2/17] Running: scripts_fv/1.1.SurAdmin_de_datos.R ###


> ######################Limpieza de la base de datos########################
> ##########################################################################
> 
> #Instalación de paquetes
> library(dplyr)

> library(ade4)

> library(tidyr)

> #Abrir y explorar bases de datos
> primera<- read.csv("scripts_fv/Datos/all_tabulated.csv", sep=",", header=TRUE, fill = T)

> segunda<- read.csv("scripts_fv/Datos/Muestras Fondecyt 11160402 Alelos - RACK 1.csv", sep =",", header = TRUE, fill = TRUE)

> # Renombrar la primera columna y crear variable de alelos
> primera <- primera %>%
+   rename(Sample.Name = X) %>% 
+   mutate(Alleles = rep(1:2, length.out = nrow(primera)))

> # Eliminar columna X.1 y reemplazar -9 y datos vacíos por NA
> primera <- primera %>%
+   dplyr::select(-X.1) %>%
+   mutate(across(c(D3S1358, TH01, D21S11, D18S51, Penta.E, D5S818, D13S317, D7S820, D16S539, CSF1PO, Penta.D, vWA, D8S1179, TPOX, FGA), ~ na_if(., -9)))

> segunda <- segunda %>%
+   mutate(across(c(Allele.1, Allele.2), ~ na_if(., "")))

> ################Unificar las bases de datos######################
> #Transformar columnas en filas
> 
> X <- segunda %>%
+   pivot_wider(names_from = Marker, values_from = c(Allele.1, Allele.2))

> x1 <- X[1:17] %>% mutate(Alleles = 1)

> x2 <- X[18:33]

> x3 <- X[1]

> x4 <- cbind(x2, x3) %>% mutate(Alleles = 2)

> # Renombrar columnas de alelos de manera eficiente
> new_names <- c("D3S1358", "TH01", "D21S11", "D18S51", "Penta.E", "D5S818", "D13S317", "D7S820", 
+                "D16S539", "CSF1PO", "Penta.D", "AMEL", "vWA", "D8S1179", "TPOX", "FGA")

> colnames(x1)[2:17] <- new_names

> colnames(x4)[1:16] <- new_names

> # Unir las bases de datos x1 y x4
> union_df <- bind_rows(x1, x4)

> colnames(union_df)
 [1] "Sample.Name" "D3S1358"     "TH01"        "D21S11"      "D18S51"      "Penta.E"    
 [7] "D5S818"      "D13S317"     "D7S820"      "D16S539"     "CSF1PO"      "Penta.D"    
[13] "AMEL"        "vWA"         "D8S1179"     "TPOX"        "FGA"         "Alleles"    

> # Valores raros (OL)
> # Cambiar "OL" a NA en todas las columnas de marcadores
> union_df <- union_df %>%
+   mutate(across(c("D3S1358", "TH01", "D21S11", "D18S51", "Penta.E", 
+                   "D5S818", "D13S317", "D7S820", "D16S539", "CSF1PO", 
+                   "Penta.D", "vWA", "D8S1179", "TPOX", "FGA"), ~ ifelse(. == "OL", NA, .)))

> # Cambiar tipos de datos a factor y numérico donde corresponda
> union_df <- union_df %>%
+   mutate(across(c("D3S1358", "TH01", "D21S11", "D18S51", "Penta.E", 
+                   "D5S818", "D13S317", "D7S820", "D16S539", "CSF1PO", 
+                   "Penta.D", "vWA", "D8S1179", "TPOX", "FGA"), ~ as.numeric(as.character(.))))

> #TODO: REVISAR. Me salen 2 warnings al correr la línea 50:
> ## RESOLUCION: Para evitar esto, mejor generar los NA que corresponan antes. CORREGIDO
> 
> # Fusionar ambas bases de datos
> mi.final <- merge(union_df, primera, all = TRUE)

> # Eliminar columna AMEL
> mi.final <- mi.final %>%
+   dplyr::select(-AMEL)

> #Borrar otras bases 
> primera <- NULL

> segunda <- NULL 

> X <- NULL 

> x1 <- NULL 

> x2 <- NULL

> x3 <- NULL

> x4 <- NULL

> union_df <- NULL

> rm(primera, segunda, union_df, X, x1, x2, x3, x4)

> # Convertir columnas a clase numérica, excepto "Sample.Name" y "Alleles"
> mi.final[ , 2:16] <- lapply(mi.final[ , 2:16], function(x) as.numeric(as.character(x)))

> # Agregar variable 'community' basado en los patrones de 'Sample.Name'
> mi.final <- mi.final %>%
+   mutate(community = case_when(
+     grepl("^DV", Sample.Name) ~ "EL_Divisadero",
+     grepl("^BZ", Sample.Name) ~ "BARRAZA",
+     grepl("^EA", Sample.Name) ~ "EL_ALTAR",
+     grepl("^MQ", Sample.Name) ~ "MANQUEHUA",
+     grepl("^PQ", Sample.Name) ~ "PUNITAQUI",
+     grepl("^RP", Sample.Name) ~ "RINCONADA_DE_PUNITAQUI",
+     grepl("^CA", Sample.Name) ~ "CANELILLA_OVALLE",
+     grepl("^CB", Sample.Name) ~ "CANELA_BAJA",
+     grepl("^(CL|CR)", Sample.Name) ~ "LA_CALERA",
+     grepl("^ES", Sample.Name) ~ "EL_ESPINAL",
+     grepl("^GG", Sample.Name) ~ "GUALLIGUAICA",
+     grepl("^HT", Sample.Name) ~ "HUENTELAUQUEN",
+     grepl("^LG", Sample.Name) ~ "CASTILLO_MAL_PASO",
+     grepl("^MP", Sample.Name) ~ "MONTE_PATRIA",
+     grepl("^VP", Sample.Name) ~ "LA_POLVADA",
+     TRUE ~ "OTHER"
+   ))

> # Filtrar los casos donde 'community' no es 'OTHER' ni NA
> mi.final <- mi.final %>%
+   dplyr::filter(!community %in% c('OTHER', NA))

> # Renombrar 'Sample.Name' a 'Ind' y 'community' a 'Pop'
> mi.final <- mi.final %>%
+   rename(Ind = Sample.Name, Pop = community)

> mi.final<-data.frame(mi.final)

> # Verificar el resultado final
> View(mi.final)

> # Transformación de datos
> mi.final_wide <- mi.final %>%
+   mutate(row_num = Alleles) %>%
+   pivot_wider(
+     names_from = row_num,
+     values_from = -c(Ind, Pop),
+     names_sep = "_"
+   )

> colnames(mi.final_wide)
 [1] "Ind"       "Pop"       "D3S1358_1" "D3S1358_2" "TH01_1"    "TH01_2"    "D21S11_1" 
 [8] "D21S11_2"  "D18S51_1"  "D18S51_2"  "Penta.E_1" "Penta.E_2" "D5S818_1"  "D5S818_2" 
[15] "D13S317_1" "D13S317_2" "D7S820_1"  "D7S820_2"  "D16S539_1" "D16S539_2" "CSF1PO_1" 
[22] "CSF1PO_2"  "Penta.D_1" "Penta.D_2" "vWA_1"     "vWA_2"     "D8S1179_1" "D8S1179_2"
[29] "TPOX_1"    "TPOX_2"    "FGA_1"     "FGA_2"     "Alleles_1" "Alleles_2" "row_num_1"
[36] "row_num_2"

> #Quitar las últimas 4 columnas
> STRv2 <-data.frame(mi.final_wide%>% dplyr::select(-tail(names(.), 4)))

> colnames(STRv2)
 [1] "Ind"       "Pop"       "D3S1358_1" "D3S1358_2" "TH01_1"    "TH01_2"    "D21S11_1" 
 [8] "D21S11_2"  "D18S51_1"  "D18S51_2"  "Penta.E_1" "Penta.E_2" "D5S818_1"  "D5S818_2" 
[15] "D13S317_1" "D13S317_2" "D7S820_1"  "D7S820_2"  "D16S539_1" "D16S539_2" "CSF1PO_1" 
[22] "CSF1PO_2"  "Penta.D_1" "Penta.D_2" "vWA_1"     "vWA_2"     "D8S1179_1" "D8S1179_2"
[29] "TPOX_1"    "TPOX_2"    "FGA_1"     "FGA_2"    

> STRv2
      Ind              Pop D3S1358_1 D3S1358_2 TH01_1 TH01_2 D21S11_1 D21S11_2 D18S51_1
1   BZ001          BARRAZA        15        16    9.3    9.3     32.2     33.2       14
2   BZ002          BARRAZA        15        17    6.0    8.0     29.0     29.0       14
3   BZ004          BARRAZA        15        16    7.0    9.0     29.0     30.0       12
4   BZ005          BARRAZA        15        16    7.0    7.0     28.0     29.0       13
5   BZ006          BARRAZA        16        17    6.0    7.0     29.0     33.2       15
6   BZ008          BARRAZA        15        16    6.0    7.0     28.0     31.2       14
7   BZ011          BARRAZA        15        18    7.0    8.0     29.0     30.0       13
8   BZ013          BARRAZA        15        18    8.0    9.0     29.0     32.2       18
9   BZ015          BARRAZA        15        15    8.0    9.3     29.0     31.0       12
10  BZ016          BARRAZA        17        18    7.0    7.0     28.0     29.0       13
11  BZ017          BARRAZA        15        18    6.0    7.0     29.0     33.2       13
12 BZ018b          BARRAZA        15        15    7.0    9.3     30.0     30.0       14
13  BZ020          BARRAZA        15        18    7.0    8.0     30.0     32.2       12
14  BZ021          BARRAZA        15        17    7.0    9.3     29.0     30.0       13
15  BZ023          BARRAZA        NA        NA     NA     NA       NA       NA       NA
16  BZ024          BARRAZA        15        16    9.3    9.3     27.0     32.2       14
17  BZ025          BARRAZA        15        16    6.0    7.0     29.0     30.0       15
18  BZ026          BARRAZA        14        15    9.3    9.3     30.0     31.0       12
19  BZ027          BARRAZA        15        18    7.0    9.3     30.0     31.0       13
20  BZ028          BARRAZA        14        18    6.0    7.0     30.0     30.0       14
21  BZ030          BARRAZA        14        16    6.0    9.3     30.0     32.2       14
22  BZ032          BARRAZA        14        15    7.0    7.0     29.0     32.2       12
23  BZ033          BARRAZA        15        17    6.0    9.3     28.0     32.2       11
24  BZ034          BARRAZA        15        16    7.0    9.3     29.0     32.2       15
25  BZ035          BARRAZA        15        16    6.0    7.0     31.0     31.2       18
26  BZ036          BARRAZA        16        18    7.0    9.3     29.0     32.2       13
27  BZ037          BARRAZA        15        18    6.0    9.3     30.0     30.0       14
28  BZ040          BARRAZA        16        16    6.0    9.3     30.0     30.0       14
29  BZ041          BARRAZA        15        17    6.0    9.3     28.0     30.0       10
30  CA002 CANELILLA_OVALLE        16        18    6.0    9.3     31.2     31.2       13
31  CA005 CANELILLA_OVALLE        15        15    7.0    9.0     30.0     32.2       13
   D18S51_2 Penta.E_1 Penta.E_2 D5S818_1 D5S818_2 D13S317_1 D13S317_2 D7S820_1 D7S820_2
1        15         7        20        9        9        10        13        8       11
2        14        10        14       11       11        13        14       11       11
3        21        17        19        9       11        11        13       10       12
4        16        17        18       11       11         8        13       11       14
5        19        11        12       10       11         9        12       11       12
6        15        13        17       11       11        12        13       10       12
7        15        11        20       12       13         9        12       10       11
8        18        12        22       12       12        11        11       10       12
9        14         8        11       11       13         8        14       12       13
10       15        11        12       11       12         9        12       11       12
11       14        17        17       12       12         9        12       10       12
12       16         7        19        7       10        10        12       11       12
13       22        12        12       10       11         9        11       11       12
14       17        14        15        9       11        11        11        7       11
15       NA        NA        NA       NA       NA        NA        NA       NA       NA
16       16        13        18       11       12         9        12       10       10
17       15        11        19       11       11        12        13        9       10
18       14        11        13       11       11        11        14       10       12
19       15        18        21       11       13        10        13       11       11
20       19         7        15        7       11         8        13       11       11
21       15        12        12        7       10        12        14        8        9
22       15        13        18       11       12        11        14        9       11
23       14         7        13        9       11         9        12        9       10
24       17         7        12       12       12        10        14        9       11
25       18        15        17        9       11        11        13       11       12
26       17         7        17       11       11        12        13       11       12
27       18        11        16        9       13         9        11       10       10
28       20        15        18       11       12         9        12        8       10
29       13        11        16       12       12        11        13       11       11
30       17        13        15       11       12        13        14       10       11
31       15        12        14       11       12        10        12       11       11
   D16S539_1 D16S539_2 CSF1PO_1 CSF1PO_2 Penta.D_1 Penta.D_2 vWA_1 vWA_2 D8S1179_1
1          9        12       10       11        12        13    16    19        11
2         10        12       11       12        12        13    17    18        12
3          9        12       12       12        13        14    16    16        12
4         10        11       12       12         7         9    17    17        13
5          9        12       12       12        10        12    18    19        10
6         10        12       12       13        10        13    17    17        10
7         10        10       10       11        10        13    15    15        10
8          9         9       12       12        10        10    16    17        13
9         10        10       12       12        10        11    16    19        11
10         9        10       11       11         9        10    15    18        13
11        10        12       11       12        11        13    15    15        13
12         9        13       11       11        10        12    16    17        13
13         9        11       10       12         7         9    16    17        10
14         9         9       10       11        10        12    15    19        12
15        NA        NA       NA       NA        NA        NA    NA    NA        NA
16        12        13       11       12        10        11    16    19        12
17        10        12       11       12         9        13    17    17        11
18        10        11       10       12        10        15    16    19        15
19        10        11       10       11         9        12    16    19        13
20        12        13       12       12        10        13    15    17        12
21        11        12       10       12        12        13    16    17        14
22        10        12       10       12         9        10    17    17        12
23         9        12       11       12         9        10    16    19        12
24        10        13       10       12         9        11    16    17        13
25         9        11       12       12         9         9    18    19        13
26        12        12       11       11        13        13    17    17        12
27        10        11       10       11         9        10    15    18        13
28         9        10       10       11        10        12    17    17        12
29         9         9       10       11        12        13    16    16        14
30        12        12       11       12        10        11    14    16        13
31        12        13       11       11        10        11    17    19        11
   D8S1179_2 TPOX_1 TPOX_2 FGA_1 FGA_2
1         11     11     12    22  24.0
2         13      8     11    22  22.0
3         15      8     12    26  26.0
4         13      8     11    19  24.0
5         14      8      8    24  24.0
6         15      8     11    21  23.0
7         15     11     12    20  26.0
8         13      8     11    21  27.0
9         13      8      8    21  22.0
10        15     11     12    23  26.0
11        14      8     12    20  23.0
12        13      8     11    24  24.0
13        15      8      8    18  25.0
14        12      9     11    21  26.0
15        NA     NA     NA    NA    NA
16        13      8      8    24  25.0
17        13     11     12    20  21.0
18        15      8     11    22  26.0
19        14     10     11    21  24.0
20        13      8      8    20  24.0
21        15      8      9    20  23.0
22        15      8      8    20  25.0
23        13      8     11    25  26.0
24        13     11     11    21  26.0
25        13      9     11    21  27.0
26        14      8     11    24  24.0
27        13      8     11    21  25.0
28        14      8      9    24  25.0
29        16      8     12    23  23.2
30        13      8     11    26  27.0
31        12      8      8    22  29.0
 [ reached 'max' / getOption("max.print") -- omitted 439 rows ]

> #Guardar en STRv.2
> names(STRv2) <- gsub("_1|_2", "", names(STRv2))

> write.csv(STRv2, "scripts_fv/Datos/STRV2.csv", row.names = FALSE)

### [Step 3/17] Running: scripts_fv/1.2.Formatos_FV.R ###


> ##########################################################################################################################################################
> #########Project 111160402: Cultural phylogenetics and coevolution of wealth inheritance and land tenure norms in agropastoralist communities.############
> ##########################################################################################################################################################
> 
> 
> #### OBJETIVO 3 ####
> ### To build a phylogenetic tree showing relationships between communities based on the distributions of genetic microsatellite markers within and between communities.###
> 
> ## Cargar paquetes y librerias
> library(adegenet)

> library(readr)

> library(tidyverse)

> ## Cargar bases de datos ##
> STR <- read.csv("scripts_fv/Datos/STR.csv", sep = ",")

> STR <- STR[STR$ind != "BZ023", ]

> STR$pop <- gsub(" ", "_", STR$pop)

> colnames(STR) <- gsub("\\.1$", " ", colnames(STR))

> write.table(STR, file = "scripts_fv/Datos/STR1.txt", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)

> STR [, 3:ncol(STR)] <- lapply(STR[, 3:ncol(STR)], function(x) sprintf("%02d", x))

> locis <- colnames(STR[,3:32])

> locis_unicos <- unique(trimws(locis))

> pop<-STR$pop

> STR_alelos_slash  <- read_delim("scripts_fv/Datos/STR_ceros.csv",";", escape_double = FALSE, trim_ws = TRUE)
indexing STR_ceros.csv [==============================================] 1.95GB/s, eta:  0s                                                                                          Rows: 478 Columns: 31
── Column specification ──────────────────────────────────────────────────────────────────
Delimiter: ";"
chr (31): ID, D3S1358.1, D3S1358.2, TH01.1, TH01.2, D21S11.1, D21S11.2, D18S51.1, D18S...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.

> STR_alelos_slash <- STR_alelos_slash[STR_alelos_slash$ID != "BZ023", ]

> STR_alelos_slash <- STR_alelos_slash %>% 
+   unite( D3S1358, D3S1358.1, D3S1358.2, sep = "/", remove = TRUE) %>% 
+   unite(TH01, TH01.1, TH01.2, sep = "/", remove = TRUE) %>% 
+   unite(D21S11, D21S11.1, D21S11.2, sep = "/", remove = TRUE) %>% 
+   unite(D18S51, D18S51.1, D18S51.2, sep = "/", remove = TRUE) %>% 
+   unite(Penta_E, Penta_E.1, Penta_E.2, sep = "/", remove = TRUE) %>%
+   unite(D5S818, D5S818.1, D5S818.2, sep = "/", remove = TRUE) %>% 
+   unite(D13S317, D13S317.1, D13S317.2, sep = "/", remove = TRUE) %>% 
+   unite(D7S820, D7S820.1, D7S820.2, sep = "/", remove = TRUE) %>% 
+   unite(D16S539, D16S539.1, D16S539.2, sep = "/", remove = TRUE) %>% 
+   unite(CSF1PO, CSF1PO.1, CSF1PO.2, sep = "/", remove = TRUE) %>% 
+   unite(Penta_D, Penta_D.1, Penta_D.2, sep = "/", remove = TRUE) %>% 
+   unite(vWA, vWA.1, vWA.2, sep = "/", remove = TRUE) %>% 
+   unite(D8S1179, D8S1179.1, D8S1179.2, sep = "/", remove = TRUE) %>% 
+   unite(TPOX, TPOX.1, TPOX.2, sep = "/", remove = TRUE) %>% 
+   unite(FGA, FGA.1, FGA.2, sep = "/", remove = TRUE)

> STR_alelos_slash <- STR_alelos_slash[ !(STR_alelos_slash$ID %in% c("AS", "DS", "JG", "MR", "NM", "VG", "WW182", "pos_ctrl")), ] # Quitar controles

> STR_alelos_slash<-as.data.frame(STR_alelos_slash)

> row.names(STR_alelos_slash) <- STR_alelos_slash$ID 

> STR_alelos_slash[1] <- NULL

> STR_genind <-df2genind(STR_alelos_slash,sep = "/",ncode = 3,ind.names = row.names(STR_alelos_slash),loc.names = colnames(STR_alelos_slash),pop = pop,ploidy = 2,NA.char = "000")

> #TODO: REVISAR. La última línea me arroja un Warning:
> #Warning message:
> #  In df2genind(STR_alelos_slash, sep = "/", ncode = 3, ind.names = row.names(STR_alelos_slash),  :
> #                 Individuals with no scored loci have been removed
> # RESOLUCION: BZ023 tiene solo ceros. Fue removido con anterioridad.
> 

### [Step 4/17] Running: scripts_fv/OBJETIVO_1.1.Surnames.R ###


> ##########################################################################################################################################################
> #########Project 111160402: Cultural phylogenetics and coevolution of wealth inheritance and land tenure norms in agropastoralist communities.############
> ##########################################################################################################################################################
> 
> #### OBJETIVO 1 ####
> ###  To build a phylogenetic tree showing relationships between communities based on the distributions of surnames within and between communities. ###
> 
> ## Cargar DATOS ##
> comuneros <- read.csv("scripts_fv/Datos/commoners.csv", fileEncoding = "UTF-8-BOM")

> comuneros$community <- gsub(" ", "_", comuneros$community)

> comuneros$community[grepl("LA_RINCONADA_DE_PUNITAQUI" , comuneros$community)] <- "RINCONADA_DE_PUNITAQUI"

> ## Cargar paquetes y librerias ##
> library(Biodem)

> library(reldist)

> library(dplyr)

> library(ape)

> library(ggdendro)

> library(ggpubr)

> library(phylogram)

> library(phytools)

> ##Metodo por cluster jerarquico de una matriz pairwise. Hedrick's standarized kinship coef.##
> 
> ##1. TODAS LAS COMUNIDADES
> surname_distance_matrix <- function(comuneros,
+                                     group_by_col="community") {
+   # cross tabulate
+   surnames_freq <- table(comuneros$surname_father,
+                          comuneros[[group_by_col]])
+   # generates Hedrick (1971) kinship matrix
+   # there are other methods (i.e. lasker, uri)
+   hedkin <- hedrick(surnames_freq)
+   # hedrick returns values of similarity
+   # transform them into values of dissimilarity (distance)
+   as.dist(1-hedkin)
+   #as.dist(1-hedkin) #IMPORTANT: This is likely wrong. We figured out a better way.
+   #as.dist(Biodem::Fst(hedkin, sum(colSums(surnames_freq) )))
+ }

> #TODO: REVISAR. Arriba hay una nota (muuuy antigua) que sugiere que el método es incorrecto.
> # Deberíamos revisarlo
> # RESOLUCION: NO CAMBIARLO AHORA, SI NO HASTA ARREGLAR TODOS LOS OTROS SCRIPTS
> #=======
> 
> 
> ## REVISIÓN: Me di cuenta que (1-hedkin)  no parece tener sentido, al menos teórico. ¿Qué se intenta hacer con este paso? ¿Para qué se está invirtiendo la escala?
> # Alternativas: 
> # (1)Usar simplemente as.dist(hedkin). ¿Por qué no se optó por esto?
> # (2)Usar sqrt(1 - hedkin).
> # (3)Si lo que se busca es normalizar hedkin_normalizado <- hedkin / max(hedkin) y luego distancia <- as.dist(hedkin_normalizado)
> # (4) Si se quiere si o si invertir la escala: distancia <- as.dist(sqrt(1 - (hedkin / max(hedkin))) 
> #(5) as.dist(Biodem::Fst(hedkin, sum(colSums(surnames_freq) )))
> surname_matrix <- surname_distance_matrix(comuneros)

> hclust_default_method <- "average"

> surname_clustering <- function(comuneros,
+                                hclust_method=hclust_default_method,
+                                group_by_col="community") {
+   comuneros %>%
+     surname_distance_matrix(group_by_col) %>%
+     # hierarchical clustering of the distance matrix
+     hclust(method=hclust_method)
+ }

> hc_total <- surname_clustering(comuneros)

> plot(hc_total)

> y_total <- ape::as.phylo(hc_total) #Phylo format

> #Personalizar ?rboles
> 
> plot(hc_total) #Dendrograma

> ddata <- dendro_data(hc_total, type = "rectangle")

> p <- ggplot(segment(ddata)) + 
+   geom_segment(aes(x = x, y = y, xend = xend, yend = yend)) + 
+   coord_flip() +
+   scale_y_reverse(expand = c(0.2, 0))+
+   ggdendro::theme_dendro()

> p

> ##2. COOMUNIDADES MUESTREADAS
> # Seleccionar los datos que se necesitan
> STR <- read.csv("scripts_fv/Datos/STR.csv", sep = ",")

> STR$pop <- gsub(" ", "_", STR$pop)

> selected_communities <- unique(STR$pop)

> STR2 <- STR

> STR2$pop[STR2$pop %in% c("GUALLIGUAICA", "LA_POLVADA")] <- "PUCLARO"

> selected_communities2<- unique(STR2$pop)

> comuneros2 <- comuneros

> comuneros2$community[comuneros2$community %in% c("GUALLIGUAICA", "LA_POLVADA")] <- "PUCLARO"

> # Funcion de creacion de matriz y arbol (SIN PUCLARO)
> surnames <- comuneros %>% dplyr::filter(community %in% selected_communities)

> surnames$community <- factor(surnames$community, levels = selected_communities)

> surname_distance_muestra <- function(surnames,
+                                     group_by_col="community") {
+   # cross tabulate
+   surnames_freq <- table(surnames$surname_father,
+                          surnames[[group_by_col]])
+   # generates Hedrick (1971) kinship matrix
+   # there are other methods (i.e. lasker, uri)
+   hedkin <- hedrick(surnames_freq)
+   # hedrick returns values of similarity
+   # transform them into values of dissimilarity (distance)
+   as.dist(1-hedkin) #IMPORTANT: This is likely wrong. We figured out a better way.
+   #as.dist(Biodem::Fst(hedkin, sum(colSums(surnames_freq) )))
+ }

> #=======
> #TODO: REVISAR. Es la misma nota que hay arriba respecto al método de conversión de matriz de similitud a matriz de distnacia.
> # Deberíamos revisarlo
> #=======
> 
> surname_matrix_muestra <- surname_distance_muestra(surnames)

> hc <-hclust(surname_matrix_muestra,method = "average")

> hd <- as.dendrogram(hc)

> hy <- ape::as.phylo(hc) #Phylo format

> is.rooted(hy)
[1] TRUE

> plotTree(hy)

> #### Guardar dendrogramas
> write.dendrogram(as.dendrogram(hc_total), file = "Figures/Apellidos.phy", edges = FALSE) #Guardar dendrograma archivo phy

> write.nexus(y_total, file = "Figures/Apellidos.nex", translate = TRUE) #Guardar archivo nexus desde phy

> write.dendrogram(hd,file = "Figures/Apellidos_muestra.phy", edges = FALSE) #Guardar dendrograma archivo phy

> write.nexus(hy, file = "Figures/Apellidos_muestra.nex", translate = TRUE) #Guardar archivo nexus desde phy

### [Step 5/17] Running: scripts_fv/OBJETIVO_1.2.Manteltest.R ###


> ##########################################################################################################################################################
> #########Project 111160402: Cultural phylogenetics and coevolution of wealth inheritance and land tenure norms in agropastoralist communities.############
> ##########################################################################################################################################################
> 
> #### OBJETIVO 1 ####
> ###  To build a phylogenetic tree showing relationships between communities based on the distributions of surnames within and between communities. ###
> 
> ## Cargar paquetes y librerias ##
> library(dendextend)

> library(dplyr)

> library(geosphere)

> library(vegan)

> ### Cargar DATOS geogr?ficos ###
> 
> #coordenadas <- read.csv("scripts_fv/Datos/coordenadas.csv", header = T)
> #coordenadas$community <- gsub(" ", "_", coordenadas$community)
> #coordenadas$community[grepl("LA_RINCONADA_DE_PUNITAQUI" , coordenadas$community)] <- "RINCONADA_DE_PUNITAQUI"
> 
> #=======
> #TODO: REVISAR. Las lineas 15,16 y 17 arrojan error por un problema de codificación de caracteres.
> # Arreglé manualmente, pero seguro que se va a revertir cuando se abra desde el equipo con el problema.
> # Vamos a tener que resolverlo, o seguirá pasando.
> # RESOLUCIÓN: SOLUCIONADO AL DECLARAR CODIFICACIÓN DE CARACTÉRES EXPLÍCITA UTF-8
> #=======
> 
> ##--##
> 
> coordenadas <- read.csv("scripts_fv/Datos/coordenadas.csv", header = T, fileEncoding = "UTF-8-BOM")

> coordenadas$community <- gsub(" ", "_", coordenadas$community)

> coordenadas$community[grepl("LA_RINCONADA_DE_PUNITAQUI" , coordenadas$community)] <- "RINCONADA_DE_PUNITAQUI"

> #=======
> #TODO: REVISAR. Las lineas 15,16 y 17 arrojan error por un problema de codificación de caracteres.
> # Arreglé manualmente, pero seguro que se va a revertir cuando se abra desde el equipo con el problema.
> # Vamos a tener que resolverlo, o seguirá pasando.
> # RESOLUCIÓN: SOLUCIONADO AL DECLARAR CODIFICACIÓN DE CARACTÉRES EXPLÍCITA UTF-8
> #=======
> ## REVISION: Encontré el error! Era un problema de marca de orden de bytes (BOM) en sistemas Windows. Lo agregué a la lectura del archivo csv, no debería seguir ocurriendo.
> 
> ##Test de Mantel##
> #1. Todas las comunidades # #Revisar la matriz de distancia de apellidos
> rownames(coordenadas) <- coordenadas$community

> colnames(coordenadas)<- c("community","lon","lat","org_name")

> my_points_t <- dplyr::select(coordenadas, lon, lat)

> rownames(my_points_t) <- coordenadas$community

> common_communities <- unique(comuneros$community)

> geo_total <- distm (my_points_t, fun = distGeo )

> rownames(geo_total) <- as.factor(rownames(my_points_t))

> colnames(geo_total) <- as.factor(rownames(my_points_t))

> geo_total <- as.matrix(geo_total)

> geo_total
                                    AGUA_FRIA_ALTA AGUA_FRIA_BAJA    ALCONES
AGUA_FRIA_ALTA                               0.000       5188.525  79922.346
AGUA_FRIA_BAJA                            5188.525          0.000  84860.225
ALCONES                                  79922.346      84860.225      0.000
ALGARROBAL_Y_DESPENSA                   185712.203     190685.130 128967.829
ALGARROBO_DE_HORNILLOS                   40012.263      44776.428  40394.081
                                    ALGARROBAL_Y_DESPENSA ALGARROBO_DE_HORNILLOS
AGUA_FRIA_ALTA                                 185712.203              40012.263
AGUA_FRIA_BAJA                                 190685.130              44776.428
ALCONES                                        128967.829              40394.081
ALGARROBAL_Y_DESPENSA                               0.000             158020.568
ALGARROBO_DE_HORNILLOS                         158020.568                  0.000
                                    ALHUEMILLA_LAS_PALMAS ALVAREZ_DE_VALLE_HERMOSO
AGUA_FRIA_ALTA                                  33607.705                43570.431
AGUA_FRIA_BAJA                                  38132.663                47269.521
ALCONES                                         47766.302                73329.329
ALGARROBAL_Y_DESPENSA                          165218.346               149605.787
ALGARROBO_DE_HORNILLOS                           7680.518                48997.170
                                    ANGOSTURA_DE_GALVEZ   ATELCURA  ATUHUAICO
AGUA_FRIA_ALTA                                18203.731  10559.413  84831.981
AGUA_FRIA_BAJA                                19424.227   7566.171  89624.316
ALCONES                                       74332.500  89688.045  58740.210
ALGARROBAL_Y_DESPENSA                        190035.916 191364.663 101847.565
ALGARROBO_DE_HORNILLOS                        34527.771  50186.369  65204.054
                                    BAÑADOS_DE_HUANTA    BARRAZA BLAS_Y_BULRREME
AGUA_FRIA_ALTA                             206978.965  89989.456      115521.055
AGUA_FRIA_BAJA                             211862.290  95043.125      120610.389
ALCONES                                    152681.047  12478.819       61049.478
ALGARROBAL_Y_DESPENSA                       23901.770 117120.071       71501.562
ALGARROBO_DE_HORNILLOS                     180773.140  51355.634       86540.383
                                    BUENOS_AIRES_DE_PUNILLA CABRA_CORRAL CALDERA_Y_DAMAS
AGUA_FRIA_ALTA                                   105355.621     9927.426      131485.185
AGUA_FRIA_BAJA                                   110364.073     5312.459      136667.203
ALCONES                                           25865.581    89848.879       64059.502
ALGARROBAL_Y_DESPENSA                            111862.920   193825.574       66071.671
ALGARROBO_DE_HORNILLOS                            66178.838    49902.986       97838.046
                                    CANELA_ALTA CANELA_BAJA CANELILLA_CANELA
AGUA_FRIA_ALTA                         22194.05    24671.97         8338.079
AGUA_FRIA_BAJA                         27248.77    29607.51        13504.556
ALCONES                                62467.14    55259.50        72462.999
ALGARROBAL_Y_DESPENSA                 163538.94   166539.07       177508.636
ALGARROBO_DE_HORNILLOS                 26794.72    15585.59        33189.406
                                    CANELILLA_OVALLE    CARCAMO CARQUINDAÑO
AGUA_FRIA_ALTA                            105764.616  74777.521    5012.783
AGUA_FRIA_BAJA                            110915.200  79216.089    9093.980
ALCONES                                    48169.760  66333.117   75894.622
ALGARROBAL_Y_DESPENSA                      83386.157 115342.628  184115.995
ALGARROBO_DE_HORNILLOS                     74825.548  62695.189   35717.052
                                    CARRIZAL_Y_LAGUNA_DE_SERON CARRIZO,_MENDOZA_Y_ROMERO
AGUA_FRIA_ALTA                                      144473.804                123032.050
AGUA_FRIA_BAJA                                      149511.526                128086.918
ALCONES                                              88266.624                 69286.820
ALGARROBAL_Y_DESPENSA                                41959.536                 63355.892
ALGARROBO_DE_HORNILLOS                              116061.837                 94796.883
                                    CASTILLO_MAL_PASO CERRO_BLANCO CERRO_BLANCO_Y_GIGANTE
AGUA_FRIA_ALTA                              64671.054    68186.357             146349.430
AGUA_FRIA_BAJA                              69483.701    73324.285             151238.059
ALCONES                                     52872.753    17547.026              97269.717
ALGARROBAL_Y_DESPENSA                      121580.700   127299.489              40367.508
ALGARROBO_DE_HORNILLOS                      47857.149    31895.757             121207.087
                                    CERRO_GIGANTE CHACARILLAS  CHALINGA CHANCHOQUI
AGUA_FRIA_ALTA                         149283.081   73409.777  49925.10 179941.349
AGUA_FRIA_BAJA                         154160.667   78248.055  48282.55 184831.055
ALCONES                                100271.435   53216.840 118248.89 127203.384
ALGARROBAL_Y_DESPENSA                   37799.382  112780.191 196052.81  11209.317
ALGARROBO_DE_HORNILLOS                 124275.683   54385.618  83490.98 154022.397
                                    CHAPE_Y_CHACAY    CHELLES CHILECITO_Y_CHUAPA
AGUA_FRIA_ALTA                           131536.02  75333.098          98288.090
AGUA_FRIA_BAJA                           136367.26  80086.780         103001.136
ALCONES                                   87402.21  56868.309          68603.619
ALGARROBAL_Y_DESPENSA                     55860.81 111487.226          89710.790
ALGARROBO_DE_HORNILLOS                   108003.55  57743.062          78848.942
                                    COIPO_Y_CUYUNCAVI  COLLIGUAY CORDILLERA_DE_CARRIZAL
AGUA_FRIA_ALTA                              97182.785  95867.603              98246.401
AGUA_FRIA_BAJA                             101766.183 100254.331             101419.713
ALCONES                                     72509.099  77762.944             105675.967
ALGARROBAL_Y_DESPENSA                       92775.235  97479.217             121964.023
ALGARROBO_DE_HORNILLOS                      80067.576  81916.306              98242.770
                                    CUARTO_CAJON CUESTA_EL_MANZANO     CUZCUZ
AGUA_FRIA_ALTA                         66824.625         151040.01  20161.916
AGUA_FRIA_BAJA                         71880.776         156224.53  17295.817
ALCONES                                14557.980          81370.89  97663.359
ALGARROBAL_Y_DESPENSA                 132348.781          54695.43 194515.907
ALGARROBO_DE_HORNILLOS                 28681.630         116831.78  58873.226
                                    DAIN_Y_CORTADERA   DE_ARAYA  DE_ORREGO
AGUA_FRIA_ALTA                            135434.649  81370.350  36461.727
AGUA_FRIA_BAJA                            140469.254  85564.472  40654.142
ALCONES                                    80696.739  75198.628  67322.892
ALGARROBAL_Y_DESPENSA                      50769.659 112999.346 152412.336
ALGARROBO_DE_HORNILLOS                    107344.154  71792.287  40184.235
                                    DIAZ_Y_OCARANZA   DOS_RIOS EL_ALMENDRO   EL_ALTAR
AGUA_FRIA_ALTA                            46156.344  99048.200    5561.075  79686.743
AGUA_FRIA_BAJA                            50662.374 103848.870   10644.753  84808.550
ALCONES                                   61223.486  65603.609   74366.587  38526.135
ALGARROBAL_Y_DESPENSA                    141492.688  87840.002  181064.380 107153.768
ALGARROBO_DE_HORNILLOS                    40843.986  77903.031   34526.048  51770.878
                                      EL_ATAJO  EL_CHACAY   EL_CHIÑE  EL_CUYANO
AGUA_FRIA_ALTA                      156113.434 206329.395   6390.026  83054.464
AGUA_FRIA_BAJA                      160995.714 211517.917  10644.409  87363.235
ALCONES                             106029.797 132897.562  77444.543  73133.709
ALGARROBAL_Y_DESPENSA                31182.010  60982.039 180195.737 109793.719
ALGARROBO_DE_HORNILLOS              130835.877 170799.436  38451.402  71666.513
                                    EL_DIVISADERO EL_DURAZNO EL_ESPINAL
AGUA_FRIA_ALTA                          75170.398  87855.374  85139.459
AGUA_FRIA_BAJA                          80279.495  92959.302  90263.186
ALCONES                                 38870.652  13867.710  14100.375
ALGARROBAL_Y_DESPENSA                  111331.961 115119.948 115534.436
ALGARROBO_DE_HORNILLOS                  48295.775  50008.811  47770.134
                                    EL_ESPINAL_DE_SAN_PEDRO  EL_ESPINO   EL_OLIVO
AGUA_FRIA_ALTA                                   128464.916  35891.322 110923.667
AGUA_FRIA_BAJA                                   133491.953  39295.847 116093.364
ALCONES                                           75370.403  75893.938  49235.121
ALGARROBAL_Y_DESPENSA                             57549.637 157765.573  80403.892
ALGARROBO_DE_HORNILLOS                           100786.390  47263.783  78734.099
                                     EL_PANGUE   EL_PEÑON EL_PERAL_OJO_DE_AGUA EL_POTRERO
AGUA_FRIA_ALTA                        6359.730  89449.031           107242.823   7759.082
AGUA_FRIA_BAJA                        4490.379  94058.440           112108.126   8446.795
ALCONES                              83024.162  67462.751            27585.796  84042.195
ALGARROBAL_Y_DESPENSA               191374.180  99540.692           120139.110 185129.315
ALGARROBO_DE_HORNILLOS               42696.408  72655.817            67382.575  45018.937
                                    EL_POTRERO_DE_HUATULAME EL_ROMERAL    EL_TOME
AGUA_FRIA_ALTA                                    81960.990 122102.635  85390.432
AGUA_FRIA_BAJA                                    86728.868 127008.612  90320.898
ALCONES                                           58543.685  76689.182  52879.125
ALGARROBAL_Y_DESPENSA                            104880.577  63971.549 100406.740
ALGARROBO_DE_HORNILLOS                            63163.414  97463.602  62699.552
                                    VALLECITO_Y_RIO_SECO ESTERO_DERECHO
AGUA_FRIA_ALTA                                 215087.01      161322.84
AGUA_FRIA_BAJA                                 219580.26      165953.79
ALCONES                                        173200.99      119959.61
ALGARROBAL_Y_DESPENSA                           55535.96       39777.18
ALGARROBO_DE_HORNILLOS                         194981.59      140266.72
                                    FERNANDEZ_ANGEL_Y_OTROS FERNANDEZ_Y_VELIZ
AGUA_FRIA_ALTA                                     62670.49         56797.206
AGUA_FRIA_BAJA                                     66198.67         60803.480
ALCONES                                            80323.02         70781.439
ALGARROBAL_Y_DESPENSA                             136715.52        135962.889
ALGARROBO_DE_HORNILLOS                             64152.68         54474.673
                                    FERNANDO_ALVAREZ FLORES_Y_SAAVEDRA FUNDIDA_NORTE
AGUA_FRIA_ALTA                             70150.347          53881.14    135979.313
AGUA_FRIA_BAJA                             75177.915          57531.91    140980.505
ALCONES                                    10857.051          75763.77     83038.775
ALGARROBAL_Y_DESPENSA                     131238.189         141887.85     49821.350
ALGARROBO_DE_HORNILLOS                     31505.296          56301.41    108702.506
                                    FUNDIDA_SUR GUALLIGUAICA HIGUERITAS_UNIDAS  HUAMPULLA
AGUA_FRIA_ALTA                       133701.403   175096.155        122372.591 120814.055
AGUA_FRIA_BAJA                       138692.571   180184.901        127559.105 125899.616
ALCONES                               81678.937   113022.388         54681.586  65416.292
ALGARROBAL_Y_DESPENSA                 52041.245    19984.878         74807.418  66266.612
ALGARROBO_DE_HORNILLOS               106733.541   144741.040         88339.633  91755.483
                                         HUANA HUAPILLAS_MOLLAQUITAS HUENTELAUQUEN
AGUA_FRIA_ALTA                       94734.137            153483.541     16867.043
AGUA_FRIA_BAJA                       99685.026            158400.993     15051.585
ALCONES                              56217.575            102187.644     84653.218
ALGARROBAL_Y_DESPENSA                91011.740             32821.052    198154.639
ALGARROBO_DE_HORNILLOS               70698.331            127570.414     44556.401
                                    HUINCHIGUALLEGO INGA_PICHASCA JARA_O_LAJA
AGUA_FRIA_ALTA                            11725.818    125878.254   79729.335
AGUA_FRIA_BAJA                             8563.772    130846.685   84714.537
ALCONES                                   86386.903     76536.381   48068.717
ALGARROBAL_Y_DESPENSA                    196423.285     59838.725  105983.718
ALGARROBO_DE_HORNILLOS                    45995.596     99712.336   56296.321
                                    JARILLA_Y_AZOGUE JIMENEZ_Y_TAPIA  LA_CALERA
AGUA_FRIA_ALTA                            136610.235       50166.458  78323.742
AGUA_FRIA_BAJA                            141771.129       55023.770  83450.668
ALCONES                                    71936.731       52587.448  12954.039
ALGARROBAL_Y_DESPENSA                      57492.772      135786.450 120248.761
ALGARROBO_DE_HORNILLOS                    104269.308       36706.045  41228.892
                                    LA_CAPILLA  LA_CEBADA LA_CISTERNA   LA_COIPA
AGUA_FRIA_ALTA                        8838.086  60093.844   85745.295 111423.344
AGUA_FRIA_BAJA                        5176.718  64730.447   89899.943 116556.809
ALCONES                              88555.823  22798.462   78287.215  54148.261
ALGARROBAL_Y_DESPENSA               191709.714 148982.717  110059.867  77120.867
ALGARROBO_DE_HORNILLOS               48800.986  20244.234   76120.240  81021.018
                                    LA_COLORADA_DE_AGUILERA_Y_SARMIENTO LA_HERRADURA
AGUA_FRIA_ALTA                                                46894.035   164596.005
AGUA_FRIA_BAJA                                                50839.764   169753.329
ALCONES                                                       70338.015    88035.224
ALGARROBAL_Y_DESPENSA                                        144895.219    73366.494
ALGARROBO_DE_HORNILLOS                                        48480.317   127251.618
                                     LA_HOYADA   LA_LEONA  LA_ORTIGA   LA_PLATA
AGUA_FRIA_ALTA                      155860.472   7457.784 105819.318 191026.813
AGUA_FRIA_BAJA                      160702.289   3382.361 110136.119 195996.423
ALCONES                             107482.410  87356.032  85934.282 134086.134
ALGARROBAL_Y_DESPENSA                32829.349 191480.066  90752.886   5330.049
ALGARROBO_DE_HORNILLOS              131360.126  47467.885  92014.102 163328.999
                                    LA_POLVADA LA_SAUCERA LA_TRANQUITA LA_VERDIONA
AGUA_FRIA_ALTA                      173085.484  69353.283    93260.242  117666.058
AGUA_FRIA_BAJA                      178192.479  73917.171    97319.931  122854.583
ALCONES                             109968.792  61304.463    84689.670   48910.751
ALGARROBAL_Y_DESPENSA                23877.356 118997.018   105968.303   80574.459
ALGARROBO_DE_HORNILLOS              142215.032  56232.634    84008.579   83048.499
                                    LAGUNA_VERDE LAGUNILLAS_GALLEGUILLOS_DEL_VALLE
AGUA_FRIA_ALTA                         75303.252                        108250.173
AGUA_FRIA_BAJA                         79982.012                        113433.434
ALCONES                                59423.559                         44283.831
ALGARROBAL_Y_DESPENSA                 112186.472                         84980.425
ALGARROBO_DE_HORNILLOS                 59133.593                         75024.358
                                    LAS_BARRANCAS LAS_BATEAS LAS_CARDAS  LAS_DAMAS
AGUA_FRIA_ALTA                          10113.437  73427.876  75371.667  73347.653
AGUA_FRIA_BAJA                           4925.206  78053.512  80335.915  78435.962
ALCONES                                 89594.409  60561.389  48074.841  11184.602
ALGARROBAL_Y_DESPENSA                  195394.874 114508.458 110349.217 126175.393
ALGARROBO_DE_HORNILLOS                  49403.018  58513.981  53067.617  35551.088
                                    LAS_MINILLAS LAS_PAREDES LAS_ROJAS_DE_CUTUN
AGUA_FRIA_ALTA                        123131.809    9547.929          176152.05
AGUA_FRIA_BAJA                        128140.318    4791.297          181324.34
ALCONES                                72188.505   87941.834          107268.61
ALGARROBAL_Y_DESPENSA                  62682.149  195259.692           39614.16
ALGARROBO_DE_HORNILLOS                 96112.786   47631.716          142635.62
                                     LAS_TAZAS LAS_TRANCAS_DE_PUCLARO LITIPAMPA  LO_MUÑOZ
AGUA_FRIA_ALTA                        4568.853             178774.022  50915.01  66554.88
AGUA_FRIA_BAJA                        7378.803             183879.119  56061.95  61467.53
ALCONES                              80870.453             115434.964  40853.71 146161.33
ALGARROBAL_Y_DESPENSA               183837.695              21387.639 135693.05 246592.48
ALGARROBO_DE_HORNILLOS               41556.172             147887.393  27431.87 105835.10
                                    LOS_MAITENES_DE_SERON LORENZO_ARAYA
AGUA_FRIA_ALTA                                 143126.454     67786.893
AGUA_FRIA_BAJA                                 148016.587     72796.885
ALCONES                                         94455.184     12660.905
ALGARROBAL_Y_DESPENSA                           43471.163    133543.656
ALGARROBO_DE_HORNILLOS                         118048.947     28985.414
                                    LORENZO_PERALTA_DE_PUNILLA LOS_ALGODONES LOS_ANGELES
AGUA_FRIA_ALTA                                      105613.131    170346.984  100950.718
AGUA_FRIA_BAJA                                      110552.983    175464.759  105580.664
ALCONES                                              25692.951    106661.968   73179.907
ALGARROBAL_Y_DESPENSA                               116292.292     27074.196   88513.682
ALGARROBO_DE_HORNILLOS                               66017.177    139169.960   82742.677
                                    LOS_CERRILLOS LOS_CHOROS LOS_CLONQUIS
AGUA_FRIA_ALTA                           68666.34  247012.33   101646.367
AGUA_FRIA_BAJA                           63487.74  252182.68   106048.033
ALCONES                                 145910.72  170368.66    80830.276
ALGARROBAL_Y_DESPENSA                   253011.15  101128.63    92287.800
ALGARROBO_DE_HORNILLOS                  105641.24  209836.23    86960.358
                                    LOS_HOYOS_Y_EL_EMPEDRADO LOS_LAVADEROS LOS_MAITENES
AGUA_FRIA_ALTA                                     91472.745    153070.725   131221.954
AGUA_FRIA_BAJA                                     94754.060    157849.882   136292.589
ALCONES                                            99322.012    107509.462    74914.072
ALGARROBAL_Y_DESPENSA                             122876.807     37805.361    55750.064
ALGARROBO_DE_HORNILLOS                             91074.087    129781.340   102274.557
                                    LOS_MORALES  LOS_MOZOS  LOS_POZOS LOS_TAPIAS
AGUA_FRIA_ALTA                        71819.123  74482.352  72893.710  78999.724
AGUA_FRIA_BAJA                        76751.743  78737.411  77936.275  83822.111
ALCONES                               48936.443  70833.726   9108.115  55377.309
ALGARROBAL_Y_DESPENSA                113957.403 117964.269 128722.842 107351.647
ALGARROBO_DE_HORNILLOS                50868.495  65118.155  34380.729  59485.712
                                     LOS_TOMES LOS_TRIGOS  EL_MACANO MAJADA_BLANCA
AGUA_FRIA_ALTA                       12941.381  69338.478  77623.440    160906.716
AGUA_FRIA_BAJA                       14173.338  74437.701  81595.974    166079.960
ALCONES                              76201.100  14302.670  78435.530     85555.395
ALGARROBAL_Y_DESPENSA               189267.337 128540.526 119451.156     68451.593
ALGARROBO_DE_HORNILLOS               35913.188  31915.028  71424.181    124156.509
                                    MANQUEHUA MAQUI_LOS_PALQUIS    MIALQUI MINCHA_NORTE
AGUA_FRIA_ALTA                       64691.68         94489.524  94622.008    11053.113
AGUA_FRIA_BAJA                       69774.22         97965.889  99384.368     7003.832
ALCONES                              40774.82         97691.967  64649.517    87738.895
ALGARROBAL_Y_DESPENSA               121360.65        117249.545  92597.940   196518.471
ALGARROBO_DE_HORNILLOS               40517.00         91795.080  74585.664    47354.269
                                    MINCHA_SUR MONTE_PATRIA     MOVILO OLLA_DE_CALDERA
AGUA_FRIA_ALTA                       13774.797    104740.34  55698.808       212711.21
AGUA_FRIA_BAJA                        9053.720    109717.36  60114.199       217861.00
ALCONES                              91172.235     60717.52  62828.531       144753.15
ALGARROBAL_Y_DESPENSA               199472.183     80971.87 133154.983        43136.11
ALGARROBO_DE_HORNILLOS               50787.552     79380.40  48263.935       179967.91
                                         ORURO PEJERREYES PEÑABLANCA PIEDRA_LISA
AGUA_FRIA_ALTA                       95731.075  90000.898  67433.463   82266.150
AGUA_FRIA_BAJA                      100745.224  93554.932  72263.829   86489.971
ALCONES                              16525.418  93425.465  13385.517   74898.704
ALGARROBAL_Y_DESPENSA               116314.961 118244.093 139902.375  111786.804
ALGARROBO_DE_HORNILLOS               56648.612  86959.033  27519.219   72164.119
                                    PIEDRA_LISA_O_MINA_NEGRA PIEDRAS_BLANCAS
AGUA_FRIA_ALTA                                     80556.336      148893.060
AGUA_FRIA_BAJA                                     85144.412      153843.640
ALCONES                                            64160.966       96648.750
ALGARROBAL_Y_DESPENSA                             108162.662       36914.505
ALGARROBO_DE_HORNILLOS                             65202.395      122402.606
                                    POTRERILLO_ALTO EL_POTRERO_ALTO PULPICA_ALTO
AGUA_FRIA_ALTA                             87785.95      212340.996    86434.379
AGUA_FRIA_BAJA                             92960.40      217206.106    90838.991
ALCONES                                    34015.62      158449.426    72180.847
ALGARROBAL_Y_DESPENSA                     101770.18       29670.028   105356.054
ALGARROBO_DE_HORNILLOS                     56298.53      186402.576    73227.742
                                    PULPICA_BAJO  PUNITAQUI QUEBRADA_DE_COLLIGUACITO
AGUA_FRIA_ALTA                         91196.114  70501.575                93573.987
AGUA_FRIA_BAJA                         95639.433  75686.539                97754.765
ALCONES                                73519.477  28500.927                81928.530
ALGARROBAL_Y_DESPENSA                 100525.728 118824.411               103335.320
ALGARROBO_DE_HORNILLOS                 76871.206  39279.489                82719.843
                                    QUEBRADA_DE_PAIHUANO_Y_SAN_ANDRES QUEBRADA_DE_TALCA
AGUA_FRIA_ALTA                                              187095.04         160469.46
AGUA_FRIA_BAJA                                              191769.08         165646.64
ALCONES                                                     141658.98          91678.43
ALGARROBAL_Y_DESPENSA                                        30159.76          46403.82
ALGARROBO_DE_HORNILLOS                                      164772.81         126799.77
                                    QUEBRADA_DE_TULAHUEN QUEBRADA_HONDA QUEBRADA_LA_ARENA
AGUA_FRIA_ALTA                                 86569.501     211120.412         89594.585
AGUA_FRIA_BAJA                                 90573.777     216305.323         93889.584
ALCONES                                        82201.609     136256.333         76774.254
ALGARROBAL_Y_DESPENSA                         112051.814      70010.713        104458.263
ALGARROBO_DE_HORNILLOS                         78764.325     174857.623         77606.912
                                    QUEBRADA_LAS_MINILLAS QUEBRADA_LAS_MOLLACAS
AGUA_FRIA_ALTA                                  97097.393             89086.887
AGUA_FRIA_BAJA                                 101212.257             93263.929
ALCONES                                         85661.671             79505.592
ALGARROBAL_Y_DESPENSA                          101960.031            106976.757
ALGARROBO_DE_HORNILLOS                          86758.450             78768.094
                                    QUEBRADA_LOS_LOROS QUITALLACO  RAMADILLA      RAPEL
AGUA_FRIA_ALTA                               172179.23  148662.43  99174.027 104400.544
AGUA_FRIA_BAJA                               177140.95  153841.16 103181.606 108976.034
ALCONES                                      116970.63   74297.57  89525.607  77183.849
ALGARROBAL_Y_DESPENSA                         13606.36   69494.40 102771.175  86361.430
ALGARROBO_DE_HORNILLOS                       144948.06  112288.09  89997.594  86822.448
                                    RAPELCILLO RINCONADA_DE_PUNITAQUI RIO_COLORADO
AGUA_FRIA_ALTA                       79446.394              73243.339    115222.27
AGUA_FRIA_BAJA                       83778.305              78415.294    118574.10
ALCONES                              70928.850              19439.963    114529.54
ALGARROBAL_Y_DESPENSA               112582.771             120619.943    110710.74
ALGARROBO_DE_HORNILLOS               68226.318              38192.078    112108.78
                                    ROMERALCILLO     SALALA SAN_ISIDRO SAN_LORENZO
AGUA_FRIA_ALTA                        117878.903  89244.562 181711.064   70633.882
AGUA_FRIA_BAJA                        123054.427  94228.218 186731.679   75024.401
ALCONES                                53722.741   9705.675 122962.710   66230.157
ALGARROBAL_Y_DESPENSA                  75266.729 121589.292   7504.805  119681.094
ALGARROBO_DE_HORNILLOS                 85080.354  49959.900 153013.133   60003.643
                                         SOCOS TOTORALILLO TUNGA_NORTE  TUNGA_SUR
AGUA_FRIA_ALTA                       82333.568  159855.259   15298.759  18917.166
AGUA_FRIA_BAJA                       87390.104  165011.170   10928.269  13917.516
ALCONES                               7602.673   83304.235   95080.562  98776.550
ALGARROBAL_Y_DESPENSA               121754.716   74316.440  197051.491 202309.053
ALGARROBO_DE_HORNILLOS               43833.818  122493.331   55303.144  58670.135
                                    UCHUMI-DIAGUITAS VADO_HONDO VALDIVIA_DE_PUNILLA
AGUA_FRIA_ALTA                            174684.377  84975.755          103445.216
AGUA_FRIA_BAJA                            179609.413  89331.630          108385.207
ALCONES                                   120896.348  72805.328           23525.106
ALGARROBAL_Y_DESPENSA                      12397.293 107398.230          117181.140
ALGARROBO_DE_HORNILLOS                    148166.231  72664.789           63854.117
                                      VARILLAR    VIVANCO YERBA_LOCA
AGUA_FRIA_ALTA                      189995.586  42979.359   8333.940
AGUA_FRIA_BAJA                      194894.419  47025.517  10738.086
ALCONES                             136135.375  68767.358  75955.000
ALGARROBAL_Y_DESPENSA                 9804.626 147514.935 186501.606
ALGARROBO_DE_HORNILLOS              163735.836  45047.960  35570.821
 [ reached 'max' / getOption("max.print") -- omitted 173 rows ]

> #Matriz de distancia con datos de apellidos (si se corrio el script "OBJETIVO_1_Surnames.R" es la matriz surname_matrix)
> surname_matrix <- as.matrix(surname_matrix)

> #Intersecci?n entre ambas matrices
> # Encontrar los row.names en com?n
> common_rows <- intersect(row.names(surname_matrix), row.names(geo_total))

> #TODO: REVISAR. No existe el objeto 'geo_total'.
> # Error: object 'geo_total' not found
> # Como esto me impide seguir revisando, voy a correr la siguiente linea, que dejaré comentada:
> # common_rows <- row.names(surname_matrix)
> # Obviamente esto es "trampa". Hay que volver a revisar todo después.
> 
> # RESOLUCIÓN: HAY QUE CREAR EL OBJETO EN EL SCRIPT QUE SE CORRE PRIMERO
> 
> ## REVISIÓN: Agregué la creación de Geo_total. Este error se dió porque creé primero la versión 3.2 de Manteltest y no me dí cuenta que no estaba ese archivo creado en este script.
> 
> common_rows
  [1] "AGUA_FRIA_ALTA"                      "AGUA_FRIA_BAJA"                     
  [3] "ALCONES"                             "ALGARROBAL_Y_DESPENSA"              
  [5] "ALGARROBO_DE_HORNILLOS"              "ALHUEMILLA_LAS_PALMAS"              
  [7] "ALVAREZ_DE_VALLE_HERMOSO"            "ANGOSTURA_DE_GALVEZ"                
  [9] "ATELCURA"                            "ATUHUAICO"                          
 [11] "BARRAZA"                             "BLAS_Y_BULRREME"                    
 [13] "BUENOS_AIRES_DE_PUNILLA"             "CABRA_CORRAL"                       
 [15] "CALDERA_Y_DAMAS"                     "CANELA_ALTA"                        
 [17] "CANELA_BAJA"                         "CANELILLA_CANELA"                   
 [19] "CANELILLA_OVALLE"                    "CARCAMO"                            
 [21] "CARRIZAL_Y_LAGUNA_DE_SERON"          "CARRIZO,_MENDOZA_Y_ROMERO"          
 [23] "CASTILLO_MAL_PASO"                   "CERRO_BLANCO"                       
 [25] "CERRO_GIGANTE"                       "CHACARILLAS"                        
 [27] "CHALINGA"                            "CHANCHOQUI"                         
 [29] "CHAPE_Y_CHACAY"                      "CHELLES"                            
 [31] "CHILECITO_Y_CHUAPA"                  "COIPO_Y_CUYUNCAVI"                  
 [33] "COLLIGUAY"                           "CORDILLERA_DE_CARRIZAL"             
 [35] "CUARTO_CAJON"                        "CUESTA_EL_MANZANO"                  
 [37] "CUZCUZ"                              "DAIN_Y_CORTADERA"                   
 [39] "DE_ARAYA"                            "DE_ORREGO"                          
 [41] "DIAZ_Y_OCARANZA"                     "DOS_RIOS"                           
 [43] "EL_ALMENDRO"                         "EL_ALTAR"                           
 [45] "EL_ATAJO"                            "EL_CHACAY"                          
 [47] "EL_CUYANO"                           "EL_DIVISADERO"                      
 [49] "EL_DURAZNO"                          "EL_ESPINAL"                         
 [51] "EL_ESPINO"                           "EL_MACANO"                          
 [53] "EL_OLIVO"                            "EL_PANGUE"                          
 [55] "EL_PERAL_OJO_DE_AGUA"                "EL_POTRERO_ALTO"                    
 [57] "EL_POTRERO_DE_HUATULAME"             "EL_ROMERAL"                         
 [59] "EL_TOME"                             "ESTERO_DERECHO"                     
 [61] "FERNANDEZ_ANGEL_Y_OTROS"             "FERNANDEZ_Y_VELIZ"                  
 [63] "FERNANDO_ALVAREZ"                    "FLORES_Y_SAAVEDRA"                  
 [65] "FUNDIDA_NORTE"                       "FUNDIDA_SUR"                        
 [67] "GUALLIGUAICA"                        "HIGUERITAS_UNIDAS"                  
 [69] "HUAMPULLA"                           "HUANA"                              
 [71] "HUAPILLAS_MOLLAQUITAS"               "HUENTELAUQUEN"                      
 [73] "HUINCHIGUALLEGO"                     "INGA_PICHASCA"                      
 [75] "JARA_O_LAJA"                         "JARILLA_Y_AZOGUE"                   
 [77] "JIMENEZ_Y_TAPIA"                     "LA_CALERA"                          
 [79] "LA_CAPILLA"                          "LA_CEBADA"                          
 [81] "LA_CISTERNA"                         "LA_COIPA"                           
 [83] "LA_COLORADA_DE_AGUILERA_Y_SARMIENTO" "LA_HERRADURA"                       
 [85] "LA_HOYADA"                           "LA_LEONA"                           
 [87] "LA_ORTIGA"                           "LA_PLATA"                           
 [89] "LA_POLVADA"                          "LA_SAUCERA"                         
 [91] "LA_TRANQUITA"                        "LA_VERDIONA"                        
 [93] "LAGUNA_VERDE"                        "LAGUNILLAS_GALLEGUILLOS_DEL_VALLE"  
 [95] "LAS_BARRANCAS"                       "LAS_BATEAS"                         
 [97] "LAS_CARDAS"                          "LAS_DAMAS"                          
 [99] "LAS_MINILLAS"                        "LAS_PAREDES"                        
[101] "LAS_ROJAS_DE_CUTUN"                  "LAS_TAZAS"                          
[103] "LAS_TRANCAS_DE_PUCLARO"              "LITIPAMPA"                          
[105] "LORENZO_ARAYA"                       "LORENZO_PERALTA_DE_PUNILLA"         
[107] "LOS_ALGODONES"                       "LOS_ANGELES"                        
[109] "LOS_CERRILLOS"                       "LOS_CHOROS"                         
[111] "LOS_CLONQUIS"                        "LOS_HOYOS_Y_EL_EMPEDRADO"           
[113] "LOS_LAVADEROS"                       "LOS_MAITENES"                       
[115] "LOS_MAITENES_DE_SERON"               "LOS_MORALES"                        
[117] "LOS_MOZOS"                           "LOS_POZOS"                          
[119] "LOS_TAPIAS"                          "LOS_TOMES"                          
[121] "LOS_TRIGOS"                          "MAJADA_BLANCA"                      
[123] "MANQUEHUA"                           "MAQUI_LOS_PALQUIS"                  
[125] "MIALQUI"                             "MINCHA_NORTE"                       
[127] "MINCHA_SUR"                          "MONTE_PATRIA"                       
[129] "MOVILO"                              "OLLA_DE_CALDERA"                    
[131] "ORURO"                               "PEJERREYES"                         
[133] "PIEDRA_LISA"                         "PIEDRAS_BLANCAS"                    
[135] "POTRERILLO_ALTO"                     "PULPICA_ALTO"                       
[137] "PULPICA_BAJO"                        "PUNITAQUI"                          
[139] "QUEBRADA_DE_COLLIGUACITO"            "QUEBRADA_DE_PAIHUANO_Y_SAN_ANDRES"  
[141] "QUEBRADA_DE_TALCA"                   "QUEBRADA_DE_TULAHUEN"               
[143] "QUEBRADA_HONDA"                      "QUEBRADA_LA_ARENA"                  
[145] "QUEBRADA_LAS_MINILLAS"               "QUEBRADA_LAS_MOLLACAS"              
[147] "QUEBRADA_LOS_LOROS"                  "QUITALLACO"                         
[149] "RAMADILLA"                           "RAPEL"                              
[151] "RAPELCILLO"                          "RINCONADA_DE_PUNITAQUI"             
[153] "RIO_COLORADO"                        "ROMERALCILLO"                       
[155] "SALALA"                              "SAN_ISIDRO"                         
[157] "SAN_LORENZO"                         "SOCOS"                              
[159] "TOTORALILLO"                         "TUNGA_NORTE"                        
[161] "TUNGA_SUR"                           "UCHUMI-DIAGUITAS"                   
[163] "VADO_HONDO"                          "VALDIVIA_DE_PUNILLA"                
[165] "VALLECITO_Y_RIO_SECO"                "VARILLAR"                           
[167] "VIVANCO"                             "YERBA_LOCA"                         

> # Filtrar las matrices para que solo contengan las filas y columnas con row.names en com?n
> mat1_filtered <- surname_matrix[common_rows, common_rows]

> mat2_filtered <- geo_total[common_rows, common_rows]

> #=======
> #TODO: REVISAR. No existe el objeto 'geo_total'.
> # Ahora que leo todo lo que viene después es obvio que no puedo seguir revisando.
> #=======
> 
> # Identificar las filas/columnas que quedaron fuera en mat1
> rows_outside_mat1 <- setdiff(row.names(surname_matrix), common_rows)

> mat1_outside <- surname_matrix[rows_outside_mat1, rows_outside_mat1]

> # Identificar las filas/columnas que quedaron fuera en mat2
> rows_outside_mat2 <- setdiff(row.names(geo_total), common_rows)

> mat2_outside <- geo_total[rows_outside_mat2, rows_outside_mat2]

> # Mostrar las filas/columnas que quedaron fuera
> print("Filas/columnas que quedaron fuera de la matriz de apellidos:")
[1] "Filas/columnas que quedaron fuera de la matriz de apellidos:"

> print(mat1_outside) ## Quedan fuera Huascoaltinos y totoral
              HUASCOALTINOS   TOTORAL
HUASCOALTINOS     0.0000000 0.9328766
TOTORAL           0.9328766 0.0000000

> print("Filas/columnas que quedaron fuera de la matriz geográfica:")
[1] "Filas/columnas que quedaron fuera de la matriz geográfica:"

> print(mat2_outside)
                         BAÑADOS_DE_HUANTA CARQUINDAÑO CERRO_BLANCO_Y_GIGANTE   EL_CHIÑE
BAÑADOS_DE_HUANTA                     0.00  205644.121               60630.00 201286.723
CARQUINDAÑO                      205644.12       0.000              145031.57   8811.591
CERRO_BLANCO_Y_GIGANTE            60630.00  145031.572                   0.00 140670.019
EL_CHIÑE                         201286.72    8811.591              140670.02      0.000
EL_ESPINAL_DE_SAN_PEDRO           79988.91  126714.566               21918.29 123092.213
EL_PEÑON                         119087.57   88888.195               59188.66  83415.002
EL_POTRERO                       205949.26   12487.750              145389.82   6611.820
LO_MUÑOZ                         266300.02   70303.583              206350.97  70195.607
PEÑABLANCA                       163419.53   63223.024              106415.01  65396.360
PIEDRA_LISA_O_MINA_NEGRA         127929.74   80063.724               67857.59  74502.434
                         EL_ESPINAL_DE_SAN_PEDRO   EL_PEÑON EL_POTRERO  LO_MUÑOZ
BAÑADOS_DE_HUANTA                       79988.91 119087.574  205949.26 266300.02
CARQUINDAÑO                            126714.57  88888.195   12487.75  70303.58
CERRO_BLANCO_Y_GIGANTE                  21918.29  59188.657  145389.82 206350.97
EL_CHIÑE                               123092.21  83415.002    6611.82  70195.61
EL_ESPINAL_DE_SAN_PEDRO                     0.00  46411.446  128250.11 190700.31
EL_PEÑON                                46411.45      0.000   87524.41 147268.05
EL_POTRERO                             128250.11  87524.406       0.00  64029.43
LO_MUÑOZ                               190700.31 147268.048   64029.43      0.00
PEÑABLANCA                              84739.21  69570.911   72007.61 133335.28
PIEDRA_LISA_O_MINA_NEGRA                54002.19   8937.776   78587.16 138506.59
                         PEÑABLANCA PIEDRA_LISA_O_MINA_NEGRA
BAÑADOS_DE_HUANTA         163419.53               127929.742
CARQUINDAÑO                63223.02                80063.724
CERRO_BLANCO_Y_GIGANTE    106415.01                67857.589
EL_CHIÑE                   65396.36                74502.434
EL_ESPINAL_DE_SAN_PEDRO    84739.21                54002.189
EL_PEÑON                   69570.91                 8937.776
EL_POTRERO                 72007.61                78587.164
LO_MUÑOZ                  133335.28               138506.585
PEÑABLANCA                     0.00                64678.490
PIEDRA_LISA_O_MINA_NEGRA   64678.49                    0.000

> #Matrices de Distancias
> mat2_filtered<-as.dist(mat2_filtered)

> mat1_filtered <- as.dist(mat1_filtered)

> #Generar mantel
> set.seed(152)

> mantel.rtest(
+     mat2_filtered, # La primera de las dos matrices de disimilitud
+     mat1_filtered, # La segunda matriz
+     nrepet = iter
+   )
Monte-Carlo test
Call: mantelnoneuclid(m1 = m1, m2 = m2, nrepet = nrepet)

Observation: 0.2825564 

Based on 1000 replicates
Simulated p-value: 0.000999001 
Alternative hypothesis: greater 

     Std.Obs  Expectation     Variance 
8.9732964804 0.0015164976 0.0009809164 

> #2. Comunidades muestreadas #
> #Administración de datos
> selected_communities <- unique(STR$pop)

> my_points_t <- my_points_t %>% dplyr::filter(row.names(my_points_t) %in% selected_communities)

> geo_muestra <- distm (my_points_t, fun = distGeo )

> rownames(geo_muestra) <- as.factor(rownames(my_points_t))

> colnames(geo_muestra) <- as.factor(rownames(my_points_t))

> geo_muestra <- as.matrix(geo_muestra)

> geo_muestra
                          BARRAZA CANELA_BAJA CANELILLA_OVALLE CASTILLO_MAL_PASO
BARRAZA                     0.000    65521.08         38228.26          53790.89
CANELA_BAJA             65521.082        0.00         84488.19          49389.16
CANELILLA_OVALLE        38228.258    84488.19             0.00          46883.88
CASTILLO_MAL_PASO       53790.890    49389.16         46883.88              0.00
EL_ALTAR                35235.601    59391.52         26357.70          22398.30
EL_DIVISADERO           37063.117    55234.21         31016.05          18367.75
EL_ESPINAL               7950.917    61035.97         34078.02          45876.49
GUALLIGUAICA           100834.007   154511.60         70085.61         112418.51
HUENTELAUQUEN           95896.115    32049.85        116503.51          78619.73
LA_CALERA               13282.972    54264.66         37587.82          41441.09
LA_POLVADA              97722.954   152234.41         67748.82         110821.43
MANQUEHUA               42135.670    45613.06         41690.33          12098.17
MONTE_PATRIA            52801.617    86182.56         17846.56          40977.16
PUNITAQUI               29167.768    48500.33         36027.97          24825.71
RINCONADA_DE_PUNITAQUI  20804.767    49822.98         37245.89          33850.09
                        EL_ALTAR EL_DIVISADERO EL_ESPINAL GUALLIGUAICA HUENTELAUQUEN
BARRAZA                35235.601     37063.117   7950.917   100834.007      95896.12
CANELA_BAJA            59391.521     55234.211  61035.974   154511.597      32049.85
CANELILLA_OVALLE       26357.704     31016.046  34078.025    70085.613     116503.51
CASTILLO_MAL_PASO      22398.300     18367.753  45876.495   112418.506      78619.73
EL_ALTAR                   0.000      4672.036  27489.899    95492.103      91146.79
EL_DIVISADERO           4672.036         0.000  29145.854    99947.531      86856.18
EL_ESPINAL             27489.899     29145.854      0.000   100133.929      92194.92
GUALLIGUAICA           95492.103     99947.531 100133.929        0.000     186475.77
HUENTELAUQUEN          91146.788     86856.184  92194.918   186475.765          0.00
LA_CALERA              25591.907     26180.884   6822.354   105399.278      85542.74
LA_POLVADA             93414.207     97915.150  97220.464     3895.034     184237.00
MANQUEHUA              15334.870     10675.552  34304.580   110410.767      76830.36
MONTE_PATRIA           27635.655     31202.228  47002.947    71500.155     117425.71
PUNITAQUI              13238.135     11383.060  21371.012   106108.210      80542.63
RINCONADA_DE_PUNITAQUI 19993.259     19614.568  13476.653   106710.690      81636.12
                        LA_CALERA LA_POLVADA MANQUEHUA MONTE_PATRIA  PUNITAQUI
BARRAZA                 13282.972  97722.954  42135.67     52801.62  29167.768
CANELA_BAJA             54264.662 152234.407  45613.06     86182.56  48500.333
CANELILLA_OVALLE        37587.821  67748.821  41690.33     17846.56  36027.965
CASTILLO_MAL_PASO       41441.092 110821.429  12098.17     40977.16  24825.710
EL_ALTAR                25591.907  93414.207  15334.87     27635.65  13238.135
EL_DIVISADERO           26180.884  97915.150  10675.55     31202.23  11383.060
EL_ESPINAL               6822.354  97220.464  34304.58     47002.95  21371.012
GUALLIGUAICA           105399.278   3895.034 110410.77     71500.15 106108.210
HUENTELAUQUEN           85542.739 184236.998  76830.36    117425.71  80542.634
LA_CALERA                   0.000 102597.336  29499.82     48479.74  16618.289
LA_POLVADA             102597.336      0.000 108441.03     70024.64 103770.019
MANQUEHUA               29499.821 108441.026      0.00     40627.51  12974.476
MONTE_PATRIA            48479.740  70024.635  40627.51         0.00  40619.960
PUNITAQUI               16618.289 103770.019  12974.48     40619.96      0.000
RINCONADA_DE_PUNITAQUI   7706.698 104111.755  21846.31     45438.60   9119.051
                       RINCONADA_DE_PUNITAQUI
BARRAZA                             20804.767
CANELA_BAJA                         49822.976
CANELILLA_OVALLE                    37245.892
CASTILLO_MAL_PASO                   33850.095
EL_ALTAR                            19993.259
EL_DIVISADERO                       19614.568
EL_ESPINAL                          13476.653
GUALLIGUAICA                       106710.690
HUENTELAUQUEN                       81636.119
LA_CALERA                            7706.698
LA_POLVADA                         104111.755
MANQUEHUA                           21846.306
MONTE_PATRIA                        45438.603
PUNITAQUI                            9119.051
RINCONADA_DE_PUNITAQUI                  0.000

> #Crear una matriz de distancia con datos de apellidos de las comunidades muestreadas 
> surname_matrix_muestra
                       EL_DIVISADERO  EL_ALTAR MANQUEHUA PUNITAQUI RINCONADA_DE_PUNITAQUI
EL_ALTAR                   0.6394561                                                     
MANQUEHUA                  0.5270033 0.5211648                                           
PUNITAQUI                  0.6239492 0.5200219 0.4508029                                 
RINCONADA_DE_PUNITAQUI     0.6984764 0.5435365 0.5510045 0.4409524                       
BARRAZA                    0.7269915 0.6921722 0.6577319 0.5266810              0.6679969
CANELILLA_OVALLE           0.7949177 0.7112899 0.7149405 0.8315610              0.8129801
CANELA_BAJA                0.7946333 0.3989849 0.6268504 0.6470554              0.7266230
LA_CALERA                  0.7203128 0.7175465 0.5982259 0.5946726              0.6452046
EL_ESPINAL                 0.8122858 0.7850372 0.7292758 0.7147334              0.6617125
GUALLIGUAICA               0.9460301 0.9146856 0.8686474 0.8694248              0.9186818
HUENTELAUQUEN              0.6938979 0.7224691 0.5471690 0.7912974              0.7529813
CASTILLO_MAL_PASO          0.6818260 0.5827190 0.4052663 0.6804279              0.6956697
MONTE_PATRIA               0.8266250 0.7259555 0.6704053 0.7427140              0.8264483
LA_POLVADA                 0.9549146 0.9597871 0.9302839 0.9199888              0.8905126
                         BARRAZA CANELILLA_OVALLE CANELA_BAJA LA_CALERA EL_ESPINAL
EL_ALTAR                                                                          
MANQUEHUA                                                                         
PUNITAQUI                                                                         
RINCONADA_DE_PUNITAQUI                                                            
BARRAZA                                                                           
CANELILLA_OVALLE       0.9246816                                                  
CANELA_BAJA            0.6850736        0.9037869                                 
LA_CALERA              0.6159566        0.6893568   0.7788822                     
EL_ESPINAL             0.6773830        0.8227061   0.8305944 0.5010996           
GUALLIGUAICA           0.9160002        0.9289556   0.7948131 0.9551568  0.9034592
HUENTELAUQUEN          0.7986905        0.7211099   0.8495283 0.6479454  0.6867261
CASTILLO_MAL_PASO      0.7995306        0.6246591   0.6009669 0.6735648  0.7621643
MONTE_PATRIA           0.8206300        0.7238130   0.7023125 0.7889567  0.9117430
LA_POLVADA             0.9208244        0.9277754   0.9766940 0.8225314  0.7818016
                       GUALLIGUAICA HUENTELAUQUEN CASTILLO_MAL_PASO MONTE_PATRIA
EL_ALTAR                                                                        
MANQUEHUA                                                                       
PUNITAQUI                                                                       
RINCONADA_DE_PUNITAQUI                                                          
BARRAZA                                                                         
CANELILLA_OVALLE                                                                
CANELA_BAJA                                                                     
LA_CALERA                                                                       
EL_ESPINAL                                                                      
GUALLIGUAICA                                                                    
HUENTELAUQUEN             0.8174901                                             
CASTILLO_MAL_PASO         0.8091610     0.6485945                               
MONTE_PATRIA              0.8159288     0.8773425         0.7108045             
LA_POLVADA                0.8554056     0.9106425         0.9162819    0.9578333

> surname_matrix_muestra <- as.matrix(surname_matrix_muestra)

> #Intersecci?n entre ambas matrices
> # Encontrar los row.names en com?n
> common_rows <- intersect(row.names(surname_matrix_muestra), row.names(geo_muestra))

> # Filtrar las matrices para que solo contengan las filas y columnas con row.names en com?n
> mat1_filtered <- surname_matrix_muestra[common_rows, common_rows]

> mat2_filtered <- geo_muestra[common_rows, common_rows]

> # Identificar las filas/columnas que quedaron fuera en mat1
> rows_outside_mat1 <- setdiff(row.names(surname_matrix_muestra), common_rows)

> mat1_outside <- surname_matrix_muestra[rows_outside_mat1, rows_outside_mat1]

> # Identificar las filas/columnas que quedaron fuera en mat2
> rows_outside_mat2 <- setdiff(row.names(geo_muestra), common_rows)

> mat2_outside <- geo_muestra[rows_outside_mat2, rows_outside_mat2]

> # Mostrar las filas/columnas que quedaron fuera #Esto deber?a generar una matriz de extensi?n 0x0
> print("Filas/columnas que quedaron fuera de mat1:")
[1] "Filas/columnas que quedaron fuera de mat1:"

> print(mat1_outside)
<0 x 0 matrix>

> print("Filas/columnas que quedaron fuera de mat2:")
[1] "Filas/columnas que quedaron fuera de mat2:"

> print(mat2_outside)
<0 x 0 matrix>

> #configurar como matrices de Distancias
> mat2_filtered<-as.dist(mat2_filtered)

> mat1_filtered <- as.dist(mat1_filtered)

> set.seed(152)

> #Generar mantel
> mantel.rtest(
+   mat2_filtered, # La primera de las dos matrices de disimilitud
+   mat1_filtered, # La segunda matriz
+   nrepet = iter
+ )
Monte-Carlo test
Call: mantelnoneuclid(m1 = m1, m2 = m2, nrepet = nrepet)

Observation: 0.5995645 

Based on 1000 replicates
Simulated p-value: 0.002997003 
Alternative hypothesis: greater 

     Std.Obs  Expectation     Variance 
 3.211566322 -0.001364254  0.035011617 

### [Step 6/17] Running: scripts_fv/OBJETIVO_2.1.Traitsv3.R ###


> ##########################################################################################################################################################
> #########Project 111160402: Cultural phylogenetics and coevolution of wealth inheritance and land tenure norms in agropastoralist communities.############
> ##########################################################################################################################################################
> 
> #### OBJETIVO 2 ####
> ### To estimate the traits of surnames' diversity, concentration of commoners' rights and inheritance's agnatic bias for each community based on the distributions of surnames within communities ###
> 
> ## Cargar paquetes y librerias ##
> library(cluster)

> library(dplyr)

> library(e1071)

> library(factoextra)

> library(fpc)

> library(ggplot2)

> library(Hmisc)

> library(NbClust)

> library(phytools)

> library(REAT)

> ##Calcular traits
> # Definir la funcion gini
> gini <- function (x, weights = rep(1, length = length(x))) {
+   ox <- order(x)
+   x <- x[ox]
+   weights <- weights[ox] / sum(weights)
+   p <- cumsum(weights)
+   nu <- cumsum(weights * x)
+   n <- length(nu)
+   nu <- nu / nu[n]
+   sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])
+ }

> # Definir la funcion principal traits
> traits <- function(comuneros, group_by_cols = c("community","commune")) {
+   # Asegurarse de que group_by_cols es un vector
+   if (!is.vector(group_by_cols)) {
+     group_by_cols <- as.vector(group_by_cols)
+   }
+   
+   # Calcular los indices
+   result <- comuneros %>%
+     group_by(across(all_of(group_by_cols))) %>%
+     summarise(
+       N = n(),
+       S = n_distinct(surname_father) / N,
+       R = mean(rights, na.rm = TRUE),
+       G = gini(shares),
+       A = mean(sex == "M", na.rm = TRUE),
+       M = sum(rights < 1, na.rm = TRUE) / N,
+     )
+   
+   return(result)
+ }

> result <-traits(comuneros) 
`summarise()` has grouped output by 'community'. You can override using the `.groups`
argument.

> #Editar tabla
> result[is.na(result)] <- 0

> result <- as.data.frame(result)

> head(result)
               community commune   N         S         R           G         A          M
1         AGUA_FRIA_ALTA  CANELA  71 0.4225352 0.9859155 0.041448692 0.6619718 0.04225352
2         AGUA_FRIA_BAJA  CANELA 180 0.2833333 1.0055556 0.005494168 0.6777778 0.00000000
3                ALCONES  OVALLE 248 0.2096774 0.7903226 0.296222710 0.4395161 0.31048387
4  ALGARROBAL_Y_DESPENSA  VICUÑA  14 0.5714286 1.0000000 0.000000000 0.5714286 0.00000000
5 ALGARROBO_DE_HORNILLOS  OVALLE  40 0.3750000 1.0000000 0.000000000 0.7250000 0.00000000
6  ALHUEMILLA_LAS_PALMAS  CANELA  46 0.3043478 1.0000000 0.000000000 0.8043478 0.00000000

> #Descripciones estadisticas de traits
> Hmisc::describe(result) #Descripciones generales
result 

 8  Variables      170  Observations
------------------------------------------------------------------------------------------
community 
       n  missing distinct 
     170        0      170 

lowest : AGUA_FRIA_ALTA         AGUA_FRIA_BAJA         ALCONES                ALGARROBAL_Y_DESPENSA  ALGARROBO_DE_HORNILLOS
highest: VALDIVIA_DE_PUNILLA    VALLECITO_Y_RIO_SECO   VARILLAR               VIVANCO                YERBA_LOCA            
------------------------------------------------------------------------------------------
commune 
       n  missing distinct 
     170        0       17 

lowest : ALTO DEL CARMEN ANDACOLLO       CANELA          COMBARBALA      COPIAPO        
highest: PAIHUANO        PUNITAQUI       RIO HURTADO     SALAMANCA       VICUÑA         
------------------------------------------------------------------------------------------
N 
       n  missing distinct     Info     Mean  pMedian      Gmd      .05      .10      .25 
     170        0       97        1    100.6       59    122.1    12.45    17.00    24.25 
     .50      .75      .90      .95 
   47.00    89.50   174.60   350.45 

lowest :    6   10   11   12   13, highest:  590  727  951 1062 1712
------------------------------------------------------------------------------------------
S 
       n  missing distinct     Info     Mean  pMedian      Gmd      .05      .10      .25 
     170        0      142        1   0.4329    0.423   0.1918   0.1697   0.2230   0.3150 
     .50      .75      .90      .95 
  0.4146   0.5257   0.6667   0.7474 

lowest : 0.0985915 0.1       0.106893  0.142373  0.147059 
highest: 0.818182  0.823529  0.833333  0.916667  1        
------------------------------------------------------------------------------------------
R 
       n  missing distinct     Info     Mean  pMedian      Gmd      .05      .10      .25 
     170        0      110    0.962   0.9376   0.9666   0.1821   0.5794   0.6895   0.8906 
     .50      .75      .90      .95 
  1.0000   1.0000   1.0526   1.1371 

lowest : 0.267726 0.3      0.303448 0.35098  0.363636
highest: 1.34615  1.38889  1.41667  1.48333  1.57143 
------------------------------------------------------------------------------------------
G 
       n  missing distinct     Info     Mean  pMedian      Gmd      .05      .10      .25 
     170        0      112    0.968   0.1278   0.1158   0.1569  0.00000  0.00000  0.00000 
     .50      .75      .90      .95 
 0.05991  0.23015  0.34042  0.41157 

lowest : 0           4.44089e-16 7.10543e-15 0.00381668  0.00549417 
highest: 0.503914    0.523969    0.536421    0.536441    0.599699   
------------------------------------------------------------------------------------------
A 
       n  missing distinct     Info     Mean  pMedian      Gmd      .05      .10      .25 
     170        0      136        1   0.6019   0.5982   0.1173   0.4486   0.4864   0.5335 
     .50      .75      .90      .95 
  0.5882   0.6667   0.7333   0.7604 

lowest : 0.272727 0.318182 0.37931  0.4      0.411765
highest: 0.833333 0.857143 0.875    0.9      1       
------------------------------------------------------------------------------------------
M 
       n  missing distinct     Info     Mean  pMedian      Gmd      .05      .10      .25 
     170        0       83    0.884   0.1313  0.09904   0.1845  0.00000  0.00000  0.00000 
     .50      .75      .90      .95 
 0.02346  0.20886  0.40054  0.49100 

lowest : 0         0.0166667 0.0216121 0.0253165 0.0305344
highest: 0.732704  0.811765  0.82069   0.822581  1        
------------------------------------------------------------------------------------------

> summary(result) #Mediana, rango
  community           commune                N                 S          
 Length:170         Length:170         Min.   :   6.00   Min.   :0.09859  
 Class :character   Class :character   1st Qu.:  24.25   1st Qu.:0.31498  
 Mode  :character   Mode  :character   Median :  47.00   Median :0.41463  
                                       Mean   : 100.60   Mean   :0.43295  
                                       3rd Qu.:  89.50   3rd Qu.:0.52569  
                                       Max.   :1712.00   Max.   :1.00000  
       R                G                 A                M          
 Min.   :0.2677   Min.   :0.00000   Min.   :0.2727   Min.   :0.00000  
 1st Qu.:0.8906   1st Qu.:0.00000   1st Qu.:0.5335   1st Qu.:0.00000  
 Median :1.0000   Median :0.05991   Median :0.5882   Median :0.02346  
 Mean   :0.9376   Mean   :0.12779   Mean   :0.6019   Mean   :0.13126  
 3rd Qu.:1.0000   3rd Qu.:0.23015   3rd Qu.:0.6667   3rd Qu.:0.20886  
 Max.   :1.5714   Max.   :0.59970   Max.   :1.0000   Max.   :1.00000  

> var(result$N) #Varianza
[1] 36139.91

> skewness(result$N) #Asimetria
[1] 5.329991

> #Normalidad
> #histogramas
> png(filename = "Figures/Traits_hist.png")

> par(mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))

> par(mfrow = c(2, 3)) 

> exclude_cols <- c("community", "commune", "R")

> include_cols <- setdiff(colnames(result), exclude_cols)

> for (col in include_cols) {
+   hist(result[[col]], breaks = 100, main = col, xlab = col)
+ }

> dev.off()
RStudioGD 
        2 

> par(mfrow=c(1,1))

> par(mar = c(0, 0, 0, 0), oma = c(0, 0, 0, 0))

> shapiro.test(result$N)

	Shapiro-Wilk normality test

data:  result$N
W = 0.42667, p-value < 2.2e-16


> shapiro.test(result$S)

	Shapiro-Wilk normality test

data:  result$S
W = 0.9733, p-value = 0.002311


> shapiro.test(result$R)

	Shapiro-Wilk normality test

data:  result$R
W = 0.8331, p-value = 1.156e-12


> shapiro.test(result$G)

	Shapiro-Wilk normality test

data:  result$G
W = 0.83139, p-value = 9.79e-13


> shapiro.test(result$A)

	Shapiro-Wilk normality test

data:  result$A
W = 0.97904, p-value = 0.01132


> shapiro.test(result$M)

	Shapiro-Wilk normality test

data:  result$M
W = 0.72, p-value < 2.2e-16


> #Ningún índice se distribuye de manera normal
> 
> #### G y M DATA TOTAL ####
> GM_df <- as.data.frame(dplyr::select(result,community, G,M))

> rownames(GM_df) <- GM_df$community

> GM_df <- GM_df[, -1]

> # Escalar los datos (opcional)
> GM_scaled <- scale(GM_df)

### [Step 7/17] Running: scripts_fv/OBJETIVO_2.2.Dendroplot.R ###


> ##########################################################################################################################################################
> #########Project 111160402: Cultural phylogenetics and coevolution of wealth inheritance and land tenure norms in agropastoralist communities.############
> ##########################################################################################################################################################
> 
> #### OBJETIVO 2 ####
> ### To estimate the traits of surnames' diversity, concentration of commoners' rights and inheritance's agnatic bias for each community based on the distributions of surnames within communities ###
> 
> ## Cargar paquetes y librerias ##
> library(dendextend)

> library(ggplot2)

> library(gridExtra)

> library(stringr)

> library(conflicted)

> ##Conflict preference
> conflict_prefer("label","ggdendro")
[conflicted] Will prefer ggdendro::label over any other package.

> conflict_prefer("theme_dendro","ggdendro")
[conflicted] Will prefer ggdendro::theme_dendro over any other package.

> # Mostrar y escribir la tabla final 
> result_dendro<-as.data.frame(result, fileEncoding = "UTF-8-BOM")

> row.names(result_dendro) <-result_dendro$community

> #result_dendro$commune <- gsub("Ñ", "N", result_dendro$commune)
> result_dendro <- result_dendro%>%dplyr::select(-community)

> write.table(result_dendro, file='Figures/Tabla_indices.txt', sep = '\t', row.names = T, quote = FALSE, fileEncoding = "UTF-8")

> # Imprimir im?gen en png y en pdf
> png("Figures/Tabla_indices.png", height=4000, width=1500)

> p<-tableGrob(result_dendro)

> grid.arrange(p)

> dev.off()
RStudioGD 
        2 

> pdf("Figures/Tabla_indices.pdf", height=60, width=20)

> grid.table(result_dendro)

> dev.off()
RStudioGD 
        2 

> # Escribir la tabla de las comunidades muestreadas
> STR <- read.csv("scripts_fv/Datos/STR.csv", sep = ",")

> STR$pop <- gsub(" ", "_", STR$pop)

> selected_communities <- unique(STR$pop)

> result_dendro2 <- result_dendro %>% dplyr::filter(row.names(result_dendro) %in% selected_communities)

> #result_dendro2$commune <- gsub("Ñ","N", result_dendro2$commune)
> STR$pop <- gsub(" ", "_", STR$pop)

> selected_communities <- unique(STR$pop)

> write.table(result_dendro2, file='Figures/Tabla_indices_sample.txt', sep = '\t', row.names = T, quote = FALSE, fileEncoding = "UTF-8")

> # Imprimir im?gen en png y en pdf
> png("Figures/Tabla_indices_sample.png", height=800, width=800)

> p<-tableGrob(result_dendro2)

> grid.arrange(p)

> dev.off()
RStudioGD 
        2 

> pdf("Figures/Tabla_indices_sample.pdf", height=60, width=20)

> grid.table(result_dendro2)

> dev.off()
RStudioGD 
        2 

> result_dendro$community <- row.names(result_dendro)

> result_dendro2 <- result_dendro %>% dplyr::filter(result_dendro$community %in% selected_communities)

> ## Traits y comunidades pdf anotados en un arbol
> dendroplot <- function(hc, save_as=NULL,
+                        group_by_col="community") {
+   # generate dendrogram from hclust data
+   hcd <- dendro_data(hc, type="rectangle")
+   # get rid of those factors
+   hcd$labels$label <- as.character(hcd$labels$label)
+   # traits
+   container <- if (group_by_col == "community") "commune"
+   else if (group_by_col == "commune") "province"
+   else if (group_by_col == "province") "region"
+   # Verificar si container es NULL
+   if (is.null(container)) {
+     stop("Container is NULL")
+   }
+   #tc <- traits(comuneros, c(group_by_col, container))
+   tc <- result_dendro
+   # vectors to obtain commune, S, R, G, A, cluster of communities
+   vector_of <- function(target_col) {
+     if (!target_col %in% colnames(tc)) {
+       stop(paste("Column", target_col, "is not found in traits data"))
+     }
+     v <- tc[[target_col]]
+     if (is.null(v)) {
+       stop(paste("Column", target_col, "is NULL in traits data"))
+     }
+     print(v)  # Agregado para depurar
+     names(v) <- tc[[group_by_col]]
+     v
+   }
+   location <- if (!is.null(container))
+     vector_of(container)
+   else NULL
+   N <- vector_of("N")
+   S <- vector_of("S")
+   A <- vector_of("A")
+   G <- vector_of("G")
+   M <- vector_of("M")
+   #cluster <- vector_of("cluster")
+   # useful coordinates
+   lastrow <- nrow(hcd$labels)
+   x0 <- hcd$labels$x[[lastrow]]
+   y0 <- hcd$labels$y[[lastrow]]
+   x1 <- x0 + 1 + 0.5 * lastrow / 170
+   ydiff <- if (is.null(container)) 0.4 else 0
+   # output to pdf
+   if (!is.null(save_as)) {
+     pdf(save_as,
+         width=8 + 4 * lastrow / 170,
+         height=1 + 40 * lastrow / 170,
+         encoding = "ISOLatin1")
+   }
+   size <- function(xs) {
+     xs * 1.3 / max(xs) + (1.7 + lastrow / 170)
+   }
+   # plot
+   p <- ggplot() +
+     geom_segment(data=segment(hcd),
+                  aes(x=x, y=y, xend=xend, yend=yend)) +
+     # because of the coord_flip at the end, x and y are flipped
+     geom_text(data=ggdendro::label(hcd),
+               aes(x=x, y=y, label=label, hjust=0),
+               nudge_y=0.01,
+               size=3) +
+     annotate("text", x=x1, y=y0-0.215, # y=y0-0.30,
+              label=str_to_title(group_by_col),
+              fontface="bold", size=4) +
+     (if (!is.null(container))
+       annotate("text", x=x1, y=y0-1.265, # y=y0-1.30,
+                label=str_to_title(container),
+                fontface="bold", size=4)) +
+     annotate("text", x=x1, y=y0-1.64+ydiff,
+              label="#", fontface="bold", size=4) +
+     annotate("text", x=x1, y=y0-1.86+ydiff,
+              label="S", fontface="bold", size=4) +
+     annotate("text", x=x1, y=y0-2.06+ydiff,
+              label="A", fontface="bold", size=4) +
+     annotate("text", x=x1, y=y0-2.26+ydiff,
+              label="G", fontface="bold", size=4) +
+     annotate("text", x=x1, y=y0-2.46+ydiff,
+              label="M", fontface="bold", size=4) +
+     #annotate("text", x=x1, y=y0-2.66+ydiff,
+     #         label="Cluster", fontface="bold", size=4) +
+     (if (!is.null(container))
+       geom_text(data=ggdendro::label(hcd),
+                 aes(x=x, y=y, hjust=0,
+                     label=location[label],
+                     colour=location[label]),
+                 nudge_y=1.1,
+                 size=3,
+                 show.legend=FALSE)) +
+     geom_text(data=ggdendro::label(hcd),
+               aes(x=x, y=y,
+                   label=N[label],
+                   size=size(N[label])),
+               nudge_y=1.6-ydiff,
+               hjust=0) +
+     geom_text(data=ggdendro::label(hcd),
+               aes(x=x, y=y,
+                   label=prettyNum(S[label], digits=3),
+                   size=size(S[label])),
+               nudge_y=1.8-ydiff,
+               hjust=0) +
+     geom_text(data=label(hcd),
+               aes(x=x, y=y,
+                   label=prettyNum(A[label], digits=3),
+                   size=size(A[label])),
+               nudge_y=2.0-ydiff,
+               hjust=0) +
+     geom_text(data=ggdendro::label(hcd),
+               aes(x=x, y=y,
+                   label=prettyNum(G[label], digits=3),
+                   size=size(G[label])),
+               nudge_y=2.2-ydiff,
+               hjust=0) +
+     geom_text(data=label(hcd),
+               aes(x=x, y=y,
+                   label=prettyNum(M[label], digits=3),
+                   size=size(M[label])),
+               nudge_y=2.4-ydiff,
+               hjust=0)  +
+     #geom_text(data=label(hcd),
+     #          aes(x=x, y=y,
+     #              label=prettyNum(cluster[label], digits=1),
+     #              size=size(cluster[label])),
+     #          nudge_y=2.6-ydiff,
+     #          hjust=0)  +
+     scale_size_identity() +
+     coord_flip() +
+     scale_y_reverse(expand=c(0, 0.6)) +
+     theme_dendro()
+   # save plot
+   if (!is.null(save_as)) {
+     # ggsave(save_as, width=12, height=60, units="cm")
+     print(p)
+     dev.off()
+   } else p
+ }

> surname_dendrogram <- function(comuneros, save_as=NULL,
+                                hclust_method=hclust_default_method,
+                                group_by_col="community") {
+   hc_total <- surname_clustering(comuneros, hclust_method, group_by_col)
+   dendroplot(hc_total, save_as, group_by_col)
+ }

> # Llamar a la funci?n surname_dendrogram
> surname_dendrogram(comuneros, save_as = "Figures/dendrograma_total.pdf")
  [1] "CANELA"          "CANELA"          "OVALLE"          "VICUÑA"         
  [5] "OVALLE"          "CANELA"          "COMBARBALA"      "CANELA"         
  [9] "CANELA"          "MONTE PATRIA"    "OVALLE"          "RIO HURTADO"    
 [13] "OVALLE"          "CANELA"          "ANDACOLLO"       "CANELA"         
 [17] "CANELA"          "CANELA"          "OVALLE"          "MONTE PATRIA"   
 [21] "RIO HURTADO"     "RIO HURTADO"     "COMBARBALA"      "OVALLE"         
 [25] "RIO HURTADO"     "MONTE PATRIA"    "SALAMANCA"       "PAIHUANO"       
 [29] "RIO HURTADO"     "MONTE PATRIA"    "MONTE PATRIA"    "MONTE PATRIA"   
 [33] "MONTE PATRIA"    "MONTE PATRIA"    "OVALLE"          "COQUIMBO"       
 [37] "ILLAPEL"         "RIO HURTADO"     "MONTE PATRIA"    "COMBARBALA"     
 [41] "COMBARBALA"      "MONTE PATRIA"    "CANELA"          "PUNITAQUI"      
 [45] "RIO HURTADO"     "LA SERENA"       "MONTE PATRIA"    "PUNITAQUI"      
 [49] "OVALLE"          "OVALLE"          "COMBARBALA"      "MONTE PATRIA"   
 [53] "OVALLE"          "CANELA"          "OVALLE"          "VICUÑA"         
 [57] "MONTE PATRIA"    "RIO HURTADO"     "MONTE PATRIA"    "PAIHUANO"       
 [61] "COMBARBALA"      "COMBARBALA"      "OVALLE"          "COMBARBALA"     
 [65] "RIO HURTADO"     "RIO HURTADO"     "VICUÑA"          "OVALLE"         
 [69] "RIO HURTADO"     "MONTE PATRIA"    "RIO HURTADO"     "ALTO DEL CARMEN"
 [73] "CANELA"          "CANELA"          "RIO HURTADO"     "MONTE PATRIA"   
 [77] "ANDACOLLO"       "COMBARBALA"      "MONTE PATRIA"    "OVALLE"         
 [81] "CANELA"          "MONTE PATRIA"    "MONTE PATRIA"    "OVALLE"         
 [85] "RIO HURTADO"     "CANELA"          "LA SERENA"       "CANELA"         
 [89] "VICUÑA"          "OVALLE"          "CANELA"          "OVALLE"         
 [93] "MONTE PATRIA"    "OVALLE"          "COMBARBALA"      "COQUIMBO"       
 [97] "RIO HURTADO"     "CANELA"          "MONTE PATRIA"    "VICUÑA"         
[101] "VICUÑA"          "COMBARBALA"      "MONTE PATRIA"    "OVALLE"         
[105] "COMBARBALA"      "OVALLE"          "OVALLE"          "VICUÑA"         
[109] "MONTE PATRIA"    "LOS VILOS"       "LA HIGUERA"      "MONTE PATRIA"   
[113] "MONTE PATRIA"    "RIO HURTADO"     "RIO HURTADO"     "RIO HURTADO"    
[117] "MONTE PATRIA"    "COMBARBALA"      "OVALLE"          "MONTE PATRIA"   
[121] "CANELA"          "OVALLE"          "COQUIMBO"        "COMBARBALA"     
[125] "MONTE PATRIA"    "MONTE PATRIA"    "CANELA"          "CANELA"         
[129] "MONTE PATRIA"    "COMBARBALA"      "LA SERENA"       "OVALLE"         
[133] "MONTE PATRIA"    "RIO HURTADO"     "MONTE PATRIA"    "OVALLE"         
[137] "MONTE PATRIA"    "MONTE PATRIA"    "PUNITAQUI"       "MONTE PATRIA"   
[141] "PAIHUANO"        "LA SERENA"       "MONTE PATRIA"    "LA HIGUERA"     
[145] "MONTE PATRIA"    "MONTE PATRIA"    "MONTE PATRIA"    "VICUÑA"         
[149] "COQUIMBO"        "MONTE PATRIA"    "MONTE PATRIA"    "MONTE PATRIA"   
[153] "PUNITAQUI"       "MONTE PATRIA"    "OVALLE"          "OVALLE"         
[157] "VICUÑA"          "COMBARBALA"      "OVALLE"          "COPIAPO"        
[161] "COQUIMBO"        "ILLAPEL"         "ILLAPEL"         "VICUÑA"         
[165] "MONTE PATRIA"    "OVALLE"          "VICUÑA"          "VICUÑA"         
[169] "COMBARBALA"      "CANELA"         
  [1]   71  180  248   14   40   46   38   37   71   31  130   53   37   88   84  590  727
 [18]   79  107   24   24   48  216   51   14  174  547   10   85   20  117   19   59   19
 [35]   19  122   76  123   11   21   41   29   10  131   11   54   21   76   66   67   79
 [52]   80   17   25   19   45   54   71  105  386   15  276   50  103   51   90   62   41
 [69]   27  104   15  260  377   37   86   82   28 1712   10   33   39   13  106   20   32
 [86]   18   43   41   17  318   32  100   64  124   54  136   22   22   70   31  136   31
[103]   22   88   39   33   22   29   38   27  202   80   28   17   48   34   60   12   18
[120]   26   19  100   24  951   39   73   75  130  472   30  225   85   21   10   33  145
[137]   87   16 1062   12   38  131   35   59   29   26    6   14   24   27   74   22  173
[154]   64   54  148   22   86   28  138  119  130  171   35   41   59   19   21   38   54
  [1] 0.42253521 0.28333333 0.20967742 0.57142857 0.37500000 0.30434783 0.39473684
  [8] 0.45945946 0.45070423 0.48387097 0.28461538 0.47169811 0.43243243 0.27272727
 [15] 0.42857143 0.14237288 0.15130674 0.40506329 0.33644860 0.50000000 0.66666667
 [22] 0.43750000 0.21296296 0.25490196 0.64285714 0.41954023 0.29250457 0.40000000
 [29] 0.22352941 0.10000000 0.37606838 0.52631579 0.45762712 0.42105263 0.47368421
 [36] 0.40983607 0.55263158 0.31707317 1.00000000 0.28571429 0.41463415 0.75862069
 [43] 0.60000000 0.33587786 0.54545455 0.40740741 0.61904762 0.38157895 0.30303030
 [50] 0.35820896 0.43037975 0.31250000 0.82352941 0.44000000 0.73684211 0.37777778
 [57] 0.42592593 0.09859155 0.31428571 0.26943005 0.66666667 0.30434783 0.28000000
 [64] 0.27184466 0.45098039 0.33333333 0.45161290 0.75609756 0.40740741 0.45192308
 [71] 0.66666667 0.32692308 0.23342175 0.35135135 0.25581395 0.41463415 0.57142857
 [78] 0.10689252 0.80000000 0.66666667 0.41025641 0.46153846 0.31132075 0.45000000
 [85] 0.50000000 0.66666667 0.53488372 0.56097561 0.47058824 0.20125786 0.40625000
 [92] 0.39000000 0.48437500 0.19354839 0.37037037 0.44117647 0.31818182 0.31818182
 [99] 0.40000000 0.38709677 0.14705882 0.19354839 0.40909091 0.26136364 0.46153846
[106] 0.36363636 0.72727273 0.41379310 0.47368421 0.29629630 0.59900990 0.40000000
[113] 0.50000000 0.41176471 0.35416667 0.26470588 0.38333333 0.66666667 0.66666667
[120] 0.50000000 0.57894737 0.17000000 0.58333333 0.15036803 0.33333333 0.46575342
[127] 0.45333333 0.29230769 0.16949153 0.56666667 0.36000000 0.32941176 0.52380952
[134] 0.80000000 0.69696970 0.25517241 0.27586207 0.68750000 0.15348399 0.91666667
[141] 0.42105263 0.41221374 0.42857143 0.57627119 0.41379310 0.73076923 0.83333333
[148] 0.57142857 0.62500000 0.37037037 0.47297297 0.59090909 0.20809249 0.35937500
[155] 0.44444444 0.23648649 0.81818182 0.32558140 0.46428571 0.22463768 0.21848739
[162] 0.43076923 0.36842105 0.68571429 0.46341463 0.44067797 0.47368421 0.66666667
[169] 0.68421053 0.53703704
  [1] 0.6619718 0.6777778 0.4395161 0.5714286 0.7250000 0.8043478 0.4473684 0.5675676
  [9] 0.6760563 0.5161290 0.5692308 0.6415094 0.5405405 0.6022727 0.6666667 0.6474576
 [17] 0.6066025 0.6455696 0.5794393 0.8750000 0.7083333 0.5625000 0.5601852 0.5490196
 [25] 0.6428571 0.5804598 0.5612431 0.4000000 0.5764706 0.4500000 0.6068376 0.5789474
 [33] 0.5254237 0.6315789 0.4736842 0.6475410 0.7500000 0.5853659 0.6363636 0.6190476
 [41] 0.6829268 0.5517241 0.9000000 0.6717557 0.2727273 0.5740741 0.5714286 0.5394737
 [49] 0.5303030 0.5671642 0.6708861 0.6250000 0.4117647 0.4800000 0.5789474 0.6888889
 [57] 0.5925926 0.5633803 0.6000000 0.6683938 0.7333333 0.5036232 0.7200000 0.5339806
 [65] 0.6274510 0.5888889 0.5645161 0.5853659 0.6666667 0.6057692 0.7333333 0.8153846
 [73] 0.5198939 0.4864865 0.6279070 0.6097561 0.6785714 0.5426402 0.5000000 0.4242424
 [81] 0.7179487 0.6153846 0.5000000 0.7500000 0.5625000 0.6666667 0.5581395 0.6097561
 [89] 0.7058824 0.5377358 0.6562500 0.4500000 0.5312500 0.4838710 0.6666667 0.7132353
 [97] 0.5909091 0.6818182 0.5285714 0.6774194 0.5220588 0.6451613 0.3181818 0.5227273
[105] 0.5641026 0.5757576 0.5454545 0.5172414 0.5000000 0.5555556 0.6683168 0.5125000
[113] 0.5714286 0.5882353 0.5000000 0.5882353 0.7500000 0.7500000 0.6666667 0.6153846
[121] 0.7368421 0.5200000 0.8750000 0.5499474 0.6666667 0.6438356 0.6266667 0.5923077
[129] 0.4936441 0.5333333 0.7688889 0.5411765 0.7142857 1.0000000 0.6363636 0.6000000
[137] 0.4712644 0.6875000 0.5555556 0.8333333 0.5263158 0.6259542 0.7142857 0.4915254
[145] 0.3793103 0.5000000 0.5000000 0.7142857 0.5833333 0.4444444 0.4729730 0.6363636
[153] 0.5549133 0.5625000 0.6296296 0.5405405 0.6818182 0.6395349 0.5714286 0.4855072
[161] 0.4957983 0.7153846 0.6081871 0.7428571 0.5121951 0.5084746 0.6842105 0.8571429
[169] 0.5526316 0.7407407
  [1] 4.144869e-02 5.494168e-03 2.962227e-01 0.000000e+00 0.000000e+00 0.000000e+00
  [7] 3.226121e-01 1.828829e-01 0.000000e+00 2.768192e-01 3.401253e-01 2.024014e-01
 [13] 3.515916e-01 9.959142e-02 2.270210e-02 5.515873e-02 1.126470e-01 4.451477e-02
 [19] 4.900130e-01 0.000000e+00 3.833333e-02 1.998299e-02 2.532922e-01 2.260451e-01
 [25] 0.000000e+00 4.002288e-01 1.046479e-01 0.000000e+00 4.470062e-01 2.385417e-01
 [31] 1.006776e-01 0.000000e+00 6.251737e-02 8.521303e-02 1.148325e-01 2.340984e-02
 [37] 0.000000e+00 7.991106e-02 4.440892e-16 0.000000e+00 8.112965e-02 0.000000e+00
 [43] 0.000000e+00 7.791460e-02 2.772727e-01 2.588076e-01 4.523810e-02 1.419874e-01
 [49] 6.508749e-02 2.813552e-01 6.634210e-02 2.897182e-01 2.081448e-01 0.000000e+00
 [55] 4.736842e-02 0.000000e+00 5.039138e-01 1.929939e-01 2.666667e-01 1.262208e-02
 [61] 0.000000e+00 1.343525e-01 3.734033e-01 2.464616e-01 1.468587e-01 3.118280e-02
 [67] 0.000000e+00 1.152439e-01 2.983539e-01 1.206576e-01 0.000000e+00 3.816681e-03
 [73] 1.658951e-01 0.000000e+00 2.240729e-01 1.281260e-01 0.000000e+00 3.755501e-02
 [79] 0.000000e+00 2.305455e-01 2.435897e-02 0.000000e+00 1.312726e-01 4.523810e-02
 [85] 0.000000e+00 0.000000e+00 9.063804e-02 0.000000e+00 5.228758e-02 5.239689e-01
 [91] 0.000000e+00 3.081592e-01 1.514423e-02 5.996988e-01 1.734007e-01 7.105427e-15
 [97] 4.202552e-01 0.000000e+00 0.000000e+00 0.000000e+00 7.105427e-15 5.669599e-02
[103] 3.776224e-01 5.364409e-01 0.000000e+00 0.000000e+00 4.329004e-02 0.000000e+00
[109] 4.736842e-02 0.000000e+00 2.780468e-01 2.282197e-01 3.325123e-02 2.521008e-01
[115] 4.421296e-01 3.587435e-01 3.170412e-01 1.715686e-01 2.733333e-01 2.076923e-01
[121] 0.000000e+00 2.245872e-01 0.000000e+00 2.176690e-01 1.946247e-01 1.196490e-01
[127] 0.000000e+00 7.574868e-03 2.973456e-01 6.428571e-02 1.382029e-01 3.430283e-01
[133] 0.000000e+00 0.000000e+00 2.852050e-02 5.364205e-01 0.000000e+00 0.000000e+00
[139] 1.838879e-01 0.000000e+00 0.000000e+00 2.437296e-01 0.000000e+00 0.000000e+00
[145] 2.948276e-01 0.000000e+00 0.000000e+00 3.311688e-01 3.833333e-02 3.485839e-01
[151] 2.335304e-01 0.000000e+00 3.198819e-01 0.000000e+00 2.833481e-01 1.243924e-01
[157] 0.000000e+00 5.729896e-02 0.000000e+00 0.000000e+00 4.009553e-01 5.499901e-02
[163] 1.466831e-01 0.000000e+00 9.492419e-02 2.289831e-01 0.000000e+00 0.000000e+00
[169] 4.736842e-02 0.000000e+00
  [1] 0.04225352 0.00000000 0.31048387 0.00000000 0.00000000 0.00000000 0.36842105
  [8] 0.21621622 0.00000000 0.22580645 0.40000000 0.20754717 0.40540541 0.11363636
 [15] 0.00000000 0.05254237 0.11279230 0.02531646 0.59813084 0.00000000 0.00000000
 [22] 0.00000000 0.17592593 0.13725490 0.00000000 0.20689655 0.11882998 0.00000000
 [29] 0.81176471 0.25000000 0.09401709 0.00000000 0.03389831 0.00000000 0.00000000
 [36] 0.00000000 0.00000000 0.08130081 0.00000000 0.00000000 0.09756098 0.00000000
 [43] 0.00000000 0.03053435 0.36363636 0.31481481 0.09523810 0.15789474 0.00000000
 [50] 1.00000000 0.05063291 0.31250000 0.35294118 0.00000000 0.00000000 0.00000000
 [57] 0.55555556 0.15492958 0.16190476 0.00000000 0.00000000 0.15579710 0.28000000
 [64] 0.24271845 0.13725490 0.00000000 0.00000000 0.09756098 0.40740741 0.15384615
 [71] 0.00000000 0.00000000 0.14854111 0.00000000 0.20930233 0.09756098 0.00000000
 [78] 0.02161215 0.00000000 0.33333333 0.00000000 0.00000000 0.15094340 0.00000000
 [85] 0.00000000 0.00000000 0.11627907 0.00000000 0.00000000 0.73270440 0.00000000
 [92] 0.27000000 0.00000000 0.82258065 0.24074074 0.00000000 0.45454545 0.00000000
 [99] 0.00000000 0.00000000 0.00000000 0.00000000 0.45454545 0.72727273 0.00000000
[106] 0.00000000 0.09090909 0.00000000 0.00000000 0.00000000 0.24257426 0.23750000
[113] 0.00000000 0.29411765 0.52083333 0.44117647 0.01666667 0.00000000 0.05555556
[120] 0.00000000 0.00000000 0.12000000 0.00000000 0.17034700 0.23076923 0.15068493
[127] 0.00000000 0.00000000 0.41101695 0.10000000 0.08444444 0.42352941 0.00000000
[134] 0.00000000 0.00000000 0.82068966 0.00000000 0.00000000 0.19774011 0.00000000
[141] 0.00000000 0.29007634 0.00000000 0.00000000 0.34482759 0.00000000 0.00000000
[148] 0.00000000 0.00000000 0.40740741 0.20270270 0.00000000 0.25433526 0.00000000
[155] 0.22222222 0.12162162 0.00000000 0.05813953 0.00000000 0.00000000 0.36974790
[162] 0.03846154 0.14619883 0.00000000 0.12195122 0.23728814 0.00000000 0.00000000
[169] 0.00000000 0.00000000
RStudioGD 
        2 

### [Step 8/17] Running: scripts_fv/OBJETIVO_3.1.STR.R ###


> ##########################################################################################################################################################
> #########Project 111160402: Cultural phylogenetics and coevolution of wealth inheritance and land tenure norms in agropastoralist communities.############
> ##########################################################################################################################################################
> 
> #### OBJETIVO 3 ####
> ### To build a phylogenetic tree showing relationships between communities based on the distributions of genetic microsatellite markers within and between communities.###
> 
> ## Cargar paquetes y librerias
> library(ape)

> library(conflicted)

> library(graph4lg)

> library(phylogram)

> library(phytools)

> ##Conflict preference
> conflict_prefer("as.phylo","ape")
[conflicted] Will prefer ape::as.phylo over any other package.

> #Dps
> DPS<-mat_pw_dps(STR_genind)

 Converting data from a genind to a genpop object... 

...done.


 Finding allelic frequencies from a genpop object... 

...done.


> DPS<-as.dist(DPS)

> #Arbol con UPGMA
> dend.DPS<-as.dendrogram(hclust(DPS,method = "complete"))

> phyDPS <- as.phylo(dend.DPS)

> is.rooted(phyDPS)
[1] TRUE

> plot.phylo(phyDPS)

> write.dendrogram(dend.DPS, file = "Figures/treeDPS.phy", edges = FALSE)

> write.nexus(phyDPS, file = "Figures/treeDPS.nex", translate = TRUE)

### [Step 9/17] Running: scripts_fv/OBJETIVO_3.2.Manteltest.R ###


> ##########################################################################################################################################################
> #########Project 111160402: Cultural phylogenetics and coevolution of wealth inheritance and land tenure norms in agropastoralist communities.############
> ##########################################################################################################################################################
> 
> #### OBJETIVO 3 ####
> ### To build a phylogenetic tree showing relationships between communities based on the distributions of genetic microsatellite markers within and between communities.###
> 
> ### Cargar paquetes y librerias ###
> library(dendextend)

> library(dplyr)

> library(geosphere)

> library(vegan)

> library(phangorn)

> ### Cargar DATOS geogr?ficos ###
> coordenadas <- read.csv("scripts_fv/Datos/coordenadas.csv", header = T, fileEncoding = "UTF-8-BOM")

> coordenadas$community <- gsub(" ", "_", coordenadas$community)

> coordenadas$community[grepl("LA_RINCONADA_DE_PUNITAQUI" , coordenadas$community)] <- "RINCONADA_DE_PUNITAQUI"

> #=======
> #TODO: REVISAR. Al igual que en el objetivo_1.2. las lineas 15,16 y 17 arrojan error por un problema de codificación de caracteres.
> # Arreglé manualmente, pero seguro que se va a revertir cuando se abra desde el equipo con el problema.
> # Vamos a tener que resolverlo, o seguirá pasando.
> ## REVISION: Agregué la misma solución que en 1.2
> 
> 
> ##Administraci?n de datos ##
> rownames(coordenadas) <- coordenadas$community

> colnames(coordenadas)<- c("community","lon","lat","org_name")

> my_points_t <- dplyr::select(coordenadas, lon, lat)

> rownames(my_points_t) <- coordenadas$community

> common_communities <- unique(comuneros$community)

> ##Test de Mantel##
> #3. Comunidades muestreadas: ?rbol de consenso #
> #Crear una matriz de distancia con datos de coordenadas de comunidades seleccionadas
> selected_communities <- unique(STR$pop)

> my_points_t <- my_points_t %>% dplyr::filter(row.names(my_points_t) %in% selected_communities)

> my_points_t <- my_points_t %>% dplyr::filter(row.names(my_points_t) %in% selected_communities)

> my_points_t <- my_points_t %>% dplyr::filter(row.names(my_points_t) %in% selected_communities)

> #=======
> #TODO: REVISAR. El paquete conflicted nos obliga a definir cuál proveedor de la función "filter estamos usando.
> # Asumí que es la de dplyr:
> # my_points_t <- my_points_t %>% dplyr::filter(row.names(my_points_t) %in% selected_communities)
> # Hay que revisar si es correcto.
> 
> geo_muestra <- distm (my_points_t, fun = distGeo )

> #TODO: REVISAR. Aquí aparecío el objeto "geo_muestra".
> # ¿Es ese el qie faltaba para correr O1.2?
> # De ser así, habría que incluir este código allá en vez de acá.
> # O bien, correr esto primero y O1.2. después 
> # (e inidicar en alguna parte que deben correrse en ese orden)
> 
> 
> rownames(geo_muestra) <- as.factor(rownames(my_points_t))

> colnames(geo_muestra) <- as.factor(rownames(my_points_t))

> geo_muestra <- as.matrix(geo_muestra)

> geo_muestra
                          BARRAZA CANELA_BAJA CANELILLA_OVALLE CASTILLO_MAL_PASO
BARRAZA                     0.000    65521.08         38228.26          53790.89
CANELA_BAJA             65521.082        0.00         84488.19          49389.16
CANELILLA_OVALLE        38228.258    84488.19             0.00          46883.88
CASTILLO_MAL_PASO       53790.890    49389.16         46883.88              0.00
EL_ALTAR                35235.601    59391.52         26357.70          22398.30
EL_DIVISADERO           37063.117    55234.21         31016.05          18367.75
EL_ESPINAL               7950.917    61035.97         34078.02          45876.49
GUALLIGUAICA           100834.007   154511.60         70085.61         112418.51
HUENTELAUQUEN           95896.115    32049.85        116503.51          78619.73
LA_CALERA               13282.972    54264.66         37587.82          41441.09
LA_POLVADA              97722.954   152234.41         67748.82         110821.43
MANQUEHUA               42135.670    45613.06         41690.33          12098.17
MONTE_PATRIA            52801.617    86182.56         17846.56          40977.16
PUNITAQUI               29167.768    48500.33         36027.97          24825.71
RINCONADA_DE_PUNITAQUI  20804.767    49822.98         37245.89          33850.09
                        EL_ALTAR EL_DIVISADERO EL_ESPINAL GUALLIGUAICA HUENTELAUQUEN
BARRAZA                35235.601     37063.117   7950.917   100834.007      95896.12
CANELA_BAJA            59391.521     55234.211  61035.974   154511.597      32049.85
CANELILLA_OVALLE       26357.704     31016.046  34078.025    70085.613     116503.51
CASTILLO_MAL_PASO      22398.300     18367.753  45876.495   112418.506      78619.73
EL_ALTAR                   0.000      4672.036  27489.899    95492.103      91146.79
EL_DIVISADERO           4672.036         0.000  29145.854    99947.531      86856.18
EL_ESPINAL             27489.899     29145.854      0.000   100133.929      92194.92
GUALLIGUAICA           95492.103     99947.531 100133.929        0.000     186475.77
HUENTELAUQUEN          91146.788     86856.184  92194.918   186475.765          0.00
LA_CALERA              25591.907     26180.884   6822.354   105399.278      85542.74
LA_POLVADA             93414.207     97915.150  97220.464     3895.034     184237.00
MANQUEHUA              15334.870     10675.552  34304.580   110410.767      76830.36
MONTE_PATRIA           27635.655     31202.228  47002.947    71500.155     117425.71
PUNITAQUI              13238.135     11383.060  21371.012   106108.210      80542.63
RINCONADA_DE_PUNITAQUI 19993.259     19614.568  13476.653   106710.690      81636.12
                        LA_CALERA LA_POLVADA MANQUEHUA MONTE_PATRIA  PUNITAQUI
BARRAZA                 13282.972  97722.954  42135.67     52801.62  29167.768
CANELA_BAJA             54264.662 152234.407  45613.06     86182.56  48500.333
CANELILLA_OVALLE        37587.821  67748.821  41690.33     17846.56  36027.965
CASTILLO_MAL_PASO       41441.092 110821.429  12098.17     40977.16  24825.710
EL_ALTAR                25591.907  93414.207  15334.87     27635.65  13238.135
EL_DIVISADERO           26180.884  97915.150  10675.55     31202.23  11383.060
EL_ESPINAL               6822.354  97220.464  34304.58     47002.95  21371.012
GUALLIGUAICA           105399.278   3895.034 110410.77     71500.15 106108.210
HUENTELAUQUEN           85542.739 184236.998  76830.36    117425.71  80542.634
LA_CALERA                   0.000 102597.336  29499.82     48479.74  16618.289
LA_POLVADA             102597.336      0.000 108441.03     70024.64 103770.019
MANQUEHUA               29499.821 108441.026      0.00     40627.51  12974.476
MONTE_PATRIA            48479.740  70024.635  40627.51         0.00  40619.960
PUNITAQUI               16618.289 103770.019  12974.48     40619.96      0.000
RINCONADA_DE_PUNITAQUI   7706.698 104111.755  21846.31     45438.60   9119.051
                       RINCONADA_DE_PUNITAQUI
BARRAZA                             20804.767
CANELA_BAJA                         49822.976
CANELILLA_OVALLE                    37245.892
CASTILLO_MAL_PASO                   33850.095
EL_ALTAR                            19993.259
EL_DIVISADERO                       19614.568
EL_ESPINAL                          13476.653
GUALLIGUAICA                       106710.690
HUENTELAUQUEN                       81636.119
LA_CALERA                            7706.698
LA_POLVADA                         104111.755
MANQUEHUA                           21846.306
MONTE_PATRIA                        45438.603
PUNITAQUI                            9119.051
RINCONADA_DE_PUNITAQUI                  0.000

> # como arbol
> 
> Geo_tree <- upgma(as.dist(geo_muestra),method="average")

> Geo_tree <- phangorn::upgma(as.dist(geo_muestra),method="average")

> Geo_tree <- phangorn::upgma(as.dist(geo_muestra),method="average")

> #=======
> #TODO: REVISAR. Ninguna de las librerías cargadas hasta ahora provee la función UPGMA.
> # Podría asumir que es upgma de Phangorn,  upgma de numbat, u otro.
> # Asumí phangorn:
> # library(phangorn)
> # Revisar si es correcto, y si lo es, añadir al preambulo.
> 
> plot.phylo(Geo_tree)

> ##Matriz de Geo_tree##Matriz de distancia con datos de apellidos
> surname_matrix_muestra
                       EL_DIVISADERO  EL_ALTAR MANQUEHUA PUNITAQUI RINCONADA_DE_PUNITAQUI
EL_DIVISADERO              0.0000000 0.6394561 0.5270033 0.6239492              0.6984764
EL_ALTAR                   0.6394561 0.0000000 0.5211648 0.5200219              0.5435365
MANQUEHUA                  0.5270033 0.5211648 0.0000000 0.4508029              0.5510045
PUNITAQUI                  0.6239492 0.5200219 0.4508029 0.0000000              0.4409524
RINCONADA_DE_PUNITAQUI     0.6984764 0.5435365 0.5510045 0.4409524              0.0000000
BARRAZA                    0.7269915 0.6921722 0.6577319 0.5266810              0.6679969
CANELILLA_OVALLE           0.7949177 0.7112899 0.7149405 0.8315610              0.8129801
CANELA_BAJA                0.7946333 0.3989849 0.6268504 0.6470554              0.7266230
LA_CALERA                  0.7203128 0.7175465 0.5982259 0.5946726              0.6452046
EL_ESPINAL                 0.8122858 0.7850372 0.7292758 0.7147334              0.6617125
GUALLIGUAICA               0.9460301 0.9146856 0.8686474 0.8694248              0.9186818
HUENTELAUQUEN              0.6938979 0.7224691 0.5471690 0.7912974              0.7529813
CASTILLO_MAL_PASO          0.6818260 0.5827190 0.4052663 0.6804279              0.6956697
MONTE_PATRIA               0.8266250 0.7259555 0.6704053 0.7427140              0.8264483
LA_POLVADA                 0.9549146 0.9597871 0.9302839 0.9199888              0.8905126
                         BARRAZA CANELILLA_OVALLE CANELA_BAJA LA_CALERA EL_ESPINAL
EL_DIVISADERO          0.7269915        0.7949177   0.7946333 0.7203128  0.8122858
EL_ALTAR               0.6921722        0.7112899   0.3989849 0.7175465  0.7850372
MANQUEHUA              0.6577319        0.7149405   0.6268504 0.5982259  0.7292758
PUNITAQUI              0.5266810        0.8315610   0.6470554 0.5946726  0.7147334
RINCONADA_DE_PUNITAQUI 0.6679969        0.8129801   0.7266230 0.6452046  0.6617125
BARRAZA                0.0000000        0.9246816   0.6850736 0.6159566  0.6773830
CANELILLA_OVALLE       0.9246816        0.0000000   0.9037869 0.6893568  0.8227061
CANELA_BAJA            0.6850736        0.9037869   0.0000000 0.7788822  0.8305944
LA_CALERA              0.6159566        0.6893568   0.7788822 0.0000000  0.5010996
EL_ESPINAL             0.6773830        0.8227061   0.8305944 0.5010996  0.0000000
GUALLIGUAICA           0.9160002        0.9289556   0.7948131 0.9551568  0.9034592
HUENTELAUQUEN          0.7986905        0.7211099   0.8495283 0.6479454  0.6867261
CASTILLO_MAL_PASO      0.7995306        0.6246591   0.6009669 0.6735648  0.7621643
MONTE_PATRIA           0.8206300        0.7238130   0.7023125 0.7889567  0.9117430
LA_POLVADA             0.9208244        0.9277754   0.9766940 0.8225314  0.7818016
                       GUALLIGUAICA HUENTELAUQUEN CASTILLO_MAL_PASO MONTE_PATRIA
EL_DIVISADERO             0.9460301     0.6938979         0.6818260    0.8266250
EL_ALTAR                  0.9146856     0.7224691         0.5827190    0.7259555
MANQUEHUA                 0.8686474     0.5471690         0.4052663    0.6704053
PUNITAQUI                 0.8694248     0.7912974         0.6804279    0.7427140
RINCONADA_DE_PUNITAQUI    0.9186818     0.7529813         0.6956697    0.8264483
BARRAZA                   0.9160002     0.7986905         0.7995306    0.8206300
CANELILLA_OVALLE          0.9289556     0.7211099         0.6246591    0.7238130
CANELA_BAJA               0.7948131     0.8495283         0.6009669    0.7023125
LA_CALERA                 0.9551568     0.6479454         0.6735648    0.7889567
EL_ESPINAL                0.9034592     0.6867261         0.7621643    0.9117430
GUALLIGUAICA              0.0000000     0.8174901         0.8091610    0.8159288
HUENTELAUQUEN             0.8174901     0.0000000         0.6485945    0.8773425
CASTILLO_MAL_PASO         0.8091610     0.6485945         0.0000000    0.7108045
MONTE_PATRIA              0.8159288     0.8773425         0.7108045    0.0000000
LA_POLVADA                0.8554056     0.9106425         0.9162819    0.9578333
                       LA_POLVADA
EL_DIVISADERO           0.9549146
EL_ALTAR                0.9597871
MANQUEHUA               0.9302839
PUNITAQUI               0.9199888
RINCONADA_DE_PUNITAQUI  0.8905126
BARRAZA                 0.9208244
CANELILLA_OVALLE        0.9277754
CANELA_BAJA             0.9766940
LA_CALERA               0.8225314
EL_ESPINAL              0.7818016
GUALLIGUAICA            0.8554056
HUENTELAUQUEN           0.9106425
CASTILLO_MAL_PASO       0.9162819
MONTE_PATRIA            0.9578333
LA_POLVADA              0.0000000

> #surname_matrix_muestra2
> 
> #TODO: REVISAR. El objeto surname_matrix_muestra2 no existe.
> # ¿Tal vez se creaba en "Objetivo_1.2.Manteltest.R" que no corrió completamente?
> 
> 
> ###Intersecci?n entre distintas matrices
> ##Mantel function
> mantel_function <- function(t1,t2) {
+   #Conversir en matrix
+   t1 <- as.matrix(t1)
+   t2 <- as.matrix(t2)
+   # Encontrar los row.names en com?n
+   common_rows <- intersect(row.names(t1), row.names(t2))
+   # Filtrar las matrices para que sol# Filtrar las matrices para que sol# Filtrar las matrices para que solo contengan las filas y columnas con row.names en com?n
+   mat1_filtered <- t1[common_rows, common_rows]
+   mat2_filtered <- t2[common_rows, common_rows]
+   # Identificar las filas/columnas que quedaron fuera en mat1
+   rows_outside_mat1 <- setdiff(row.names(t1), common_rows)
+   mat1_outside <- t1[rows_outside_mat1, rows_outside_mat1]
+   # Identificar las filas/columnas que quedaron fuera en mat2
+   rows_outside_mat2 <- setdiff(row.names(t2), common_rows)
+   mat2_outside <- t2[rows_outside_mat2, rows_outside_mat2]
+  
+   #Distancias
+   mat2_filtered<-as.dist(mat2_filtered)
+   mat1_filtered <- as.dist(mat1_filtered)
+   set.seed(152)
+   #Generar mantel
+   mantel.test <- mantel.rtest(
+     mat2_filtered, # La primera de las dos matrices de disimilitud
+     mat1_filtered, # La segunda matriz
+     nrepet = iter
+   )
+   
+   #Visualizar mantel
+   return(print(mantel.test))
+ }

> ##Resultados de mantel tests con geo_muestra
> mantel_DPS<- mantel_function(DPS,geo_muestra)
Monte-Carlo test
Call: mantelnoneuclid(m1 = m1, m2 = m2, nrepet = nrepet)

Observation: 0.3798017 

Based on 1000 replicates
Simulated p-value: 0.05394605 
Alternative hypothesis: greater 

    Std.Obs Expectation    Variance 
 1.68784871  0.01173958  0.04755269 

> ##Resultados de mantel tests con apellidos
> mantel_DPS_Ap<- mantel_function(DPS,surname_matrix_muestra)
Monte-Carlo test
Call: mantelnoneuclid(m1 = m1, m2 = m2, nrepet = nrepet)

Observation: 0.5211502 

Based on 1000 replicates
Simulated p-value: 0.01498501 
Alternative hypothesis: greater 

    Std.Obs Expectation    Variance 
 2.39160421  0.01343688  0.04506699 

### [Step 10/17] Running: scripts_fv/OBJETIVO_4.1.Comparev2.R ###


> ################################################################################
> ################################################################################
> #########Project 111160402: Cultural phylogenetics and coevolution of wealth#### 
> ##########inheritance and land tenure norms in agropastoralist communities######
> ################################################################################
> ################################################################################
> #### OBJETIVO 4 ################################################################
> ### To compare trees builds with different data and their deviations from the consensus tree #################################################################
> 
> ##########IMPORTANTE: CORRER LOS SCRIPTS DE LOS OBJETIVOS 1 Y 3 #################
> 
> ###LIBRERIAS
> library(ape)

> library(dendextend)

> library(geiger)

> library(phangorn)

> library(phytools)

> library(stringr)

> ################ TANGLEGRAMA:COMPARACION APELLIDOS/STR #########################
> # Etiquetas están en el mismo orden
> hy <- reorder(hy, "postorder")

> plotTree(hy)

> phyDPS <- reorder(phyDPS,"postorder")

> plotTree(phyDPS)

> # Escalonar las ramas en el mismo sentido (izquierda o derecha)
> hy <- ape::ladderize(hy)

> phyDPS <- ape::ladderize(phyDPS)

> ## Tanglegrama
> # Hacer dos árboles en dónde las poblaciones sean números
> hy_num <- hy

> hy_num$tip.label <- seq_along(hy$tip.label)

> phyDPS_num <- phyDPS

> phyDPS_num$tip.label <- seq_along(phyDPS$tip.label)

> # Crear correspondencia entre número y comunidad
> comunidades <- hy$tip.label 

> # Crear leyenda como un vector de caracteres
> leyenda <- paste(seq_along(comunidades), "  ", comunidades)

> #Entanglement
> e <- dendlist(as.dendrogram(hy_num), as.dendrogram(phyDPS_num)) %>%
+   dendextend::untangle(method = "step1side") %>% # Find the best alignment layout
+   entanglement()                     # Alignment
Found more than one class "phylo" in cache; using the first, from namespace 'TreeTools'
Also defined by ‘tidytree’
Found more than one class "phylo" in cache; using the first, from namespace 'TreeTools'
Also defined by ‘tidytree’

> dendlist(as.dendrogram(hy_num),as.dendrogram(phyDPS_num))%>% dendextend::untangle(method = "step1side") %>% entanglement # lower is better
[1] 0.3182715

> dendlist(as.dendrogram(hy_num),as.dendrogram(phyDPS_num))%>% dendextend::untangle(method = "step1side") %>% 
+   tanglegram(common_subtrees_color_lines = FALSE, highlight_distinct_edges  = FALSE)

> x <- dendlist(as.dendrogram(hy_num),as.dendrogram(phyDPS_num))%>% dendextend::untangle(method = "step2side") 

> #PNG DPS
> png("Figures/Tanglegram_DPS.png",width = 800, height = 400, units = "px", pointsize = 12,bg = "white")

> x %>% plot(main = paste("entanglement =", round(entanglement(x), 2)),common_subtrees_color_branches = T, highlight_distinct_edges  = FALSE,
+   main_left = "Surnames",
+   main_right = "STR",
+   sort = F,
+   edge.lwd = T,
+   color_lines = T,
+   intersecting = T,
+   rank_branches = T,
+ )

> legend(x = 5.8, y = 7.5,legend = leyenda, cex = 0.3, pt.cex = 0.5,inset=c(0.05,0.05),text.width = 0.8,box.lty = 2)

> dev.off()
RStudioGD 
        2 

> ################ BAKER GAMMA:COMPARACION APELLIDOS/STR #########################
> # Encontrar p-valor
> set.seed(10000)

> the_cor <- cor_bakers_gamma(hy,hy)

> the_cor2 <- cor_bakers_gamma(as.dendrogram(phyDPS), as.dendrogram(hy))

> R <- 1000

> cor_bakers_gamma_results <- numeric(R)

> dend_mixed <- hd

> for(i in 1:R) {
+   dend_mixed <- sample.dendrogram(dend_mixed, replace = F)
+   cor_bakers_gamma_results[i] <- cor_bakers_gamma(hd, dend_mixed)
+ }

> plot(density(cor_bakers_gamma_results),
+      main = "Baker's gamma distribution under H0",
+      xlim = c(-1,1))

> abline(v = 0, lty = 2)

> abline(v = the_cor, lty = 2, col = 2)

> abline(v = the_cor2, lty = 2, col = 4)

> legend("topleft", legend = c("cor", "cor2"), fill = c(2,1))

> sum(the_cor2 < cor_bakers_gamma_results)/ R #p-valor = 0.013
[1] 0.013

> the_cor2 #Baker's gamma correlation coeff = 0.5660764 (Va de -1 a 1, 0 significa que NO son estadisticamente similares)
[1] 0.5660764

> set.seed(NULL)

> ###################### ARBOL DE CONSENSO #######################################
> # Combina los árboles en una lista de clase "multiPhylo"
> combined_trees1 <- as.multiPhylo(hy,phyDPS)

> combined_trees2 <- as.multiPhylo(phyDPS,hy)

> # Genera el árbol de consenso
> consensus_tree1 <- consensus(combined_trees1,p=0.5,check.labels = TRUE, rooted =F)

> consensus_tree1 <- reorder(consensus_tree1, "postorder")

> consensus_tree2 <- consensus(combined_trees2,p=0.5,check.labels = TRUE, rooted =F)

> consensus_tree2 <- reorder(consensus_tree2, "postorder")

> plotTree(consensus_tree1)

> plotTree(consensus_tree2)

> par(mfrow=c(1,2))

> plot(consensus_tree1, main="Apellidos primero")
Found more than one class "phylo" in cache; using the first, from namespace 'TreeTools'
Also defined by ‘tidytree’
Found more than one class "phylo" in cache; using the first, from namespace 'TreeTools'
Also defined by ‘tidytree’

> plot(consensus_tree2, main="DPS primero")

> par(mfrow=c(1,1))

> dev.off()
null device 
          1 

> png("Figures/Consensus_tree.png",width = 800, height = 800, units = "px", pointsize = 12,bg = "white")

> plot.phylo(consensus_tree2)

> dev.off()
null device 
          1 

> #Preparacion de árbol con largo de ramas (Todavía está por verse)
> is.binary(consensus_tree2)
[1] TRUE

> consensus_tree2$root.edge <- 0

> # Promediar longitudes de ambos árboles (si topologías son compatibles)
> consensus_tree2$edge.length <- (hy$edge.length + phyDPS$edge.length) / 2

> consensus_tree2$edge.length[consensus_tree2$edge.length == 0] <- 1e-6  # Reemplazar ceros para evitar la división por 0

> consensus_tree2 <- nnls.tree(cophenetic(consensus_tree2), consensus_tree2, rooted = TRUE)

> consensus_tree2 <- multi2di(consensus_tree2)

> plot.phylo(consensus_tree2)

> is.rooted(consensus_tree2)
[1] TRUE

> is.ultrametric(consensus_tree2)
[1] TRUE

> consensus_tree<-(consensus_tree2)

> ###################### DENDROPLOT CONSENSO & TRAITS ############################
> ## Generar dendroplot con el ?rbol de consenso y los traits anotados
> result_dendro2
                            commune    N         S         R            G         A
BARRAZA                      OVALLE  130 0.2846154 0.6846154 3.401253e-01 0.5692308
CANELA_BAJA                  CANELA  727 0.1513067 0.9188446 1.126470e-01 0.6066025
CANELILLA_OVALLE             OVALLE  107 0.3364486 0.5607477 4.900130e-01 0.5794393
CASTILLO_MAL_PASO        COMBARBALA  216 0.2129630 0.9722222 2.532922e-01 0.5601852
EL_ALTAR                  PUNITAQUI  131 0.3358779 1.0458015 7.791460e-02 0.6717557
EL_DIVISADERO             PUNITAQUI   76 0.3815789 0.8815789 1.419874e-01 0.5394737
EL_ESPINAL                   OVALLE   67 0.3582090 0.2677259 2.813552e-01 0.5671642
GUALLIGUAICA                 VICUÑA   62 0.4516129 1.0000000 0.000000e+00 0.5645161
HUENTELAUQUEN                CANELA  377 0.2334218 0.9098143 1.658951e-01 0.5198939
LA_CALERA                    OVALLE  318 0.2012579 0.3871855 5.239689e-01 0.5377358
LA_POLVADA                   VICUÑA  136 0.1470588 1.0000000 7.105427e-15 0.5220588
MANQUEHUA                COMBARBALA  951 0.1503680 0.9484753 2.176690e-01 0.5499474
MONTE_PATRIA           MONTE PATRIA  472 0.1694915 0.6885593 2.973456e-01 0.4936441
PUNITAQUI                 PUNITAQUI 1062 0.1534840 0.8644068 1.838879e-01 0.5555556
RINCONADA_DE_PUNITAQUI    PUNITAQUI  173 0.2080925 1.2369942 3.198819e-01 0.5549133
                                M              community
BARRAZA                0.40000000                BARRAZA
CANELA_BAJA            0.11279230            CANELA_BAJA
CANELILLA_OVALLE       0.59813084       CANELILLA_OVALLE
CASTILLO_MAL_PASO      0.17592593      CASTILLO_MAL_PASO
EL_ALTAR               0.03053435               EL_ALTAR
EL_DIVISADERO          0.15789474          EL_DIVISADERO
EL_ESPINAL             1.00000000             EL_ESPINAL
GUALLIGUAICA           0.00000000           GUALLIGUAICA
HUENTELAUQUEN          0.14854111          HUENTELAUQUEN
LA_CALERA              0.73270440              LA_CALERA
LA_POLVADA             0.00000000             LA_POLVADA
MANQUEHUA              0.17034700              MANQUEHUA
MONTE_PATRIA           0.41101695           MONTE_PATRIA
PUNITAQUI              0.19774011              PUNITAQUI
RINCONADA_DE_PUNITAQUI 0.25433526 RINCONADA_DE_PUNITAQUI

> consensus_tree <- as.dendrogram(consensus_tree2)

> plot(consensus_tree)

> #comuneros$commune <-gsub("Ñ", "N", comuneros$commune)
> select_comuneros <- comuneros %>% dplyr::filter(comuneros$community %in% selected_communities)

> dendroplot <- function(consensus_tree,result_dendro2, save_as = NULL, group_by_col = "community") {
+   library(ggdendro)
+   library(ggplot2)
+   
+   # Comprobar si el objeto es un dendrograma
+   if (!inherits(consensus_tree, "dendrogram")) {
+     stop("consensus_tree debe ser un objeto de tipo dendrogram")
+   }
+   
+   # Generar los datos del dendrograma
+   hcd <- dendro_data(consensus_tree, type = "rectangle")
+   # Obtener las etiquetas como caracteres
+   hcd$labels$label <- as.character(hcd$labels$label)
+   # Definir el container
+   container <- if (group_by_col == "community") "commune"
+   else if (group_by_col == "commune") "province"
+   else if (group_by_col == "province") "region"
+   else NULL
+   
+   if (is.null(container)) {
+     stop("Container is NULL")
+   }
+   
+   # Calcular traits
+   tc <- result_dendro2
+   
+   # Funci?n auxiliar para obtener vectores
+   vector_of <- function(target_col) {
+     if (!target_col %in% colnames(tc)) {
+       stop(paste("Column", target_col, "is not found in traits data"))
+     }
+     v <- tc[[target_col]]
+     if (is.null(v)) {
+       stop(paste("Column", target_col, "is NULL in traits data"))
+     }
+     names(v) <- tc[[group_by_col]]
+     v
+   }
+   
+   location <- if (!is.null(container)) vector_of(container) else NULL
+   N <- vector_of("N")
+   S <- vector_of("S")
+   A <- vector_of("A")
+   G <- vector_of("G")
+   M <- vector_of("M")
+ #  cluster <- vector_of("cluster")
+   
+   # Coordenadas ?tiles
+   lastrow <- nrow(hcd$labels)
+   x0 <- hcd$labels$x[[lastrow]]
+   y0 <- hcd$labels$y[[lastrow]]
+   x1 <- x0 + 1 + 0.5 * lastrow / 170
+   ydiff <- if (is.null(container)) 0.4 else 0
+   
+   # Verificar y crear el directorio si no existe
+   if (!is.null(save_as)) {
+     dir_path <- dirname(save_as)
+     if (!dir.exists(dir_path)) {
+       dir.create(dir_path, recursive = TRUE)
+     }
+     png(filename = save_as, width = 10 + 4 * lastrow / 170, height = 1 + 40 * lastrow / 170, units = "in", res = 300)
+   }
+   
+   size <- function(xs) {
+     xs * 1.3 / max(xs) + (1.7 + lastrow / 170)
+   }
+   #Ajustar tama?o de las ramas
+   scale_factor <- 0.5  # Ajusta este valor para cambiar el tama?o de las ramas
+   hcd$segments$y <- hcd$segments$y * scale_factor
+   hcd$segments$yend <- hcd$segments$yend * scale_factor
+   
+   # Graficar
+   p <- ggplot() +
+     geom_segment(data = hcd$segments, aes(x = x, y = y, xend = xend, yend = yend)) +
+     geom_text(data = hcd$labels, aes(x = x, y = y, label = label, hjust = 0), nudge_y = 0.01, nudge_x = 0.05, size = 2) +
+     annotate("text", x = x1, y = y0 - 0.215, label = str_to_title(group_by_col), fontface = "bold", size = 4) +
+     annotate("text", x = x1, y = y0 - 1.84 + ydiff, label = "#", fontface = "bold", size = 4) +
+     annotate("text", x = x1, y = y0 - 2.06 + ydiff, label = "S", fontface = "bold", size = 4) +
+     annotate("text", x = x1, y = y0 - 2.26 + ydiff, label = "A", fontface = "bold", size = 4) +
+     annotate("text", x = x1, y = y0 - 2.46 + ydiff, label = "G", fontface = "bold", size = 4) +
+     annotate("text", x = x1, y = y0 - 2.66 + ydiff, label = "M", fontface = "bold", size = 4) +
+  #   annotate("text", x = x1, y = y0 - 2.90 + ydiff, label = "Cluster", fontface = "bold", size = 4) +
+     scale_size_identity() +
+     coord_flip() +
+     scale_y_reverse(expand = c(0.2, 0)) +
+     theme_dendro()
+   
+   # Agregar condicionalmente el container
+   if (!is.null(container)) {
+     p <- p +
+       annotate("text", x = x1, y = y0 - 1.265, label = str_to_title(container), fontface = "bold", size = 4) +
+       geom_text(data = label(hcd), aes(x = x, y = y, hjust = 0, label = location[label], colour = location[label]), nudge_y = 1.1, size = 3, show.legend = FALSE)
+   }
+   
+   # Agregar el resto de las anotaciones
+   p <- p +
+     geom_text(data = label(hcd), aes(x = x, y = y, label = N[label]), nudge_y = 1.8 - ydiff, hjust = 0, size = 3) +
+     geom_text(data = label(hcd), aes(x = x, y = y, label = formatC(S[label], format = "f", digits = 3)), nudge_y = 2.0 - ydiff, hjust = 0, size = 3) +
+     geom_text(data = label(hcd), aes(x = x, y = y, label = formatC(A[label], format = "f", digits = 3)), nudge_y = 2.2 - ydiff, hjust = 0, size = 3) +
+     geom_text(data = label(hcd), aes(x = x, y = y, label = formatC(G[label], format = "f", digits = 3)), nudge_y = 2.4 - ydiff, hjust = 0, size = 3) +
+     geom_text(data = label(hcd), aes(x = x, y = y, label = formatC(M[label], format = "f", digits = 3)), nudge_y = 2.6 - ydiff, hjust = 0, size = 3)
+   #  geom_text(data = label(hcd), aes(x = x, y = y, label = formatC(cluster[label], format = "f", digits = 0)), nudge_y = 2.85 - ydiff, hjust = 0, size = 3)
+   
+   # Guardar el gr?fico
+   if (!is.null(save_as)) {
+     print(p)
+     dev.off()
+   } else {
+     p
+   }
+ }

> # Llamar a la funci?n consensus_dendrogram
> library(conflicted)

> conflict_prefer("theme_dendro","ggdendro")
[conflicted] Removing existing preference.
[conflicted] Will prefer ggdendro::theme_dendro over any other package.

> conflict_prefer("label", "ggdendro")
[conflicted] Removing existing preference.
[conflicted] Will prefer ggdendro::label over any other package.

> consensus_dendrogram <- function(select_comuneros, save_as=NULL,group_by_col="community") {
+   raised_tree <- raise.dendrogram(as.dendrogram(consensus_tree), max(consensus_tree$edge.length))
+   dendroplot(raised_tree, save_as, group_by_col)
+ }

> consensus_dendrogram(select_comuneros, save_as = "Figures/dendrograma_consenso_DPS.png")
Warning in script: scripts_fv/OBJETIVO_4.1.Comparev2.R

### [Step 11/17] Running: scripts_fv/OBJETIVO_4.2.Manteltest.R ###


> ##########################################################################################################################################################
> #########Project 111160402: Cultural phylogenetics and coevolution of wealth inheritance and land tenure norms in agropastoralist communities.############
> ##########################################################################################################################################################
> 
> #### OBJETIVO 4 ####
> ### To compare trees builds with different data and their deviations from the consensus tree ###
> 
> ## Cargar paquetes y librerias ##
> library(dendextend)

> library(dplyr)

> library(geosphere)

> library(vegan)

> library(classInt)

> library(units) #este paquete requiere instalar libunits en OSX y Linux
udunits database from /usr/share/udunits/udunits2.xml

> ### Cargar DATOS geograficos ###
> shape.data <- sf::st_read("scripts_fv/Datos/comunidades_reprojected.shx")
Reading layer `comunidades_reprojected' from data source 
  `/home/nico/Documents/ccaa-surnames/ccaa-surnames/scripts_fv/Datos/comunidades_reprojected.shx' 
  using driver `ESRI Shapefile'
Simple feature collection with 178 features and 2 fields
Geometry type: POINT
Dimension:     XY
Bounding box:  xmin: -7975718 ymin: -3755147 xmax: -7795863 ymax: -3389729
Projected CRS: WGS 84 / World Mercator

> shape.data$Name <-  gsub("\\s*\\(\\d+\\)", "", shape.data$Name)

> shape.data$Name <- toupper(shape.data$Name)

> shape.data$Name <- gsub(" ", "_", shape.data$Name)

> shape.data$Name[grepl("LA_RINCONADA_DE_PUNITAQUI" , shape.data$Name)] <- "RINCONADA_DE_PUNITAQUI"

> rownames(shape.data) <- shape.data$Name

> my_points_v<- dplyr::select(shape.data,Name,geometry)

> rownames(my_points_v)<-shape.data$Name

> shape.data2<-shape.data

> shape.data2$Name[shape.data2$Name %in% c("GUALLIGUAICA")] <- "PUCLARO"

> rownames(shape.data2) <- shape.data2$Name

> my_points_w<- dplyr::select(shape.data2,Name,geometry)

> rownames(my_points_w)<-shape.data2$Name

> ##Test de Mantel##
> #3. Comunidades muestreadas: ?rbol de consenso #
> #Crear una matriz de distancia con datos de coordenadas de comunidades seleccionadas
> my_points_v <- my_points_v %>% dplyr::filter(row.names(shape.data) %in% selected_communities)

> coords <- sf::st_coordinates(my_points_v)# Estraer coordenadas

> geo_muestra <- sf::st_distance(my_points_v)# Calcular matriz de distancias

> rownames(geo_muestra) <- as.factor(rownames(my_points_v))

> colnames(geo_muestra)<- as.factor(rownames(my_points_v))

> geo_muestra
Units: [m]
                       HUENTELAUQUEN EL_DIVISADERO RINCONADA_DE_PUNITAQUI CANELA_BAJA
HUENTELAUQUEN                   0.00    101459.276              95355.451    37523.37
EL_DIVISADERO              101459.28         0.000              22826.378    64427.48
RINCONADA_DE_PUNITAQUI      95355.45     22826.378                  0.000    58111.88
CANELA_BAJA                 37523.37     64427.480              58111.885        0.00
MANQUEHUA                   89792.75     12430.587              25436.181    53231.53
EL_ALTAR                   106447.82      5436.219              23261.998    69261.54
PUNITAQUI                   94093.99     13249.194              10613.354    56578.66
LA_CALERA                   99894.76     30460.697               8965.951    63277.47
BARRAZA                    111926.60     43099.492              24191.653    76363.63
MONTE_PATRIA               137012.41     36272.766              52819.327   100412.91
EL_ESPINAL                 107628.59     33899.598              15673.728    71150.74
GUALLIGUAICA               216869.53    115813.182             123642.258   179438.30
LA_POLVADA                 214274.93    113462.954             120636.023   176801.20
CANELILLA_OVALLE           135894.03     36045.203              43282.482    98408.21
                       MANQUEHUA   EL_ALTAR PUNITAQUI  LA_CALERA    BARRAZA MONTE_PATRIA
HUENTELAUQUEN           89792.75 106447.822  94093.99  99894.759 111926.603    137012.41
EL_DIVISADERO           12430.59   5436.219  13249.19  30460.697  43099.492     36272.77
RINCONADA_DE_PUNITAQUI  25436.18  23261.998  10613.35   8965.951  24191.653     52819.33
CANELA_BAJA             53231.53  69261.538  56578.66  63277.472  76363.631    100412.91
MANQUEHUA                   0.00  17851.984  15109.01  34339.221  49022.492     47253.11
EL_ALTAR                17851.98      0.000  15405.02  29768.942  40965.402     32119.61
PUNITAQUI               15109.01  15405.025      0.00  19336.887  33921.733     47225.80
LA_CALERA               34339.22  29768.942  19336.89      0.000  15441.709     56341.15
BARRAZA                 49022.49  40965.402  33921.73  15441.709      0.000     61332.12
MONTE_PATRIA            47253.11  32119.608  47225.80  56341.155  61332.119         0.00
EL_ESPINAL              39919.51  31966.582  24859.22   7932.716   9240.166     54607.60
GUALLIGUAICA           128000.29 110626.575 122964.40 122094.185 116745.815     82757.42
LA_POLVADA             125722.04 108223.905 120259.83 118853.412 113148.571     81053.00
CANELILLA_OVALLE        48474.28  30624.859  41874.10  43669.532  44390.629     20716.98
                       EL_ESPINAL GUALLIGUAICA LA_POLVADA CANELILLA_OVALLE
HUENTELAUQUEN          107628.588    216869.53  214274.93        135894.03
EL_DIVISADERO           33899.598    115813.18  113462.95         36045.20
RINCONADA_DE_PUNITAQUI  15673.728    123642.26  120636.02         43282.48
CANELA_BAJA             71150.744    179438.30  176801.20         98408.21
MANQUEHUA               39919.514    128000.29  125722.04         48474.28
EL_ALTAR                31966.582    110626.58  108223.91         30624.86
PUNITAQUI               24859.222    122964.40  120259.83         41874.10
LA_CALERA                7932.716    122094.18  118853.41         43669.53
BARRAZA                  9240.166    116745.81  113148.57         44390.63
MONTE_PATRIA            54607.605     82757.42   81053.00         20716.98
EL_ESPINAL                  0.000    115958.39  112589.23         39579.33
GUALLIGUAICA           115958.393         0.00    4494.01         81095.42
LA_POLVADA             112589.226      4494.01       0.00         78394.82
CANELILLA_OVALLE        39579.334     81095.42   78394.82             0.00

> my_points_w <- my_points_w %>% dplyr::filter(row.names(shape.data2) %in% selected_communities2)

> coords <- sf::st_coordinates(my_points_w)# Estraer coordenadas

> geo_muestra2 <- sf::st_distance(my_points_w)# Calcular matriz de distancias

> rownames(geo_muestra2) <- as.factor(rownames(my_points_w))

> colnames(geo_muestra2)<- as.factor(rownames(my_points_w))

> geo_muestra2
Units: [m]
                       HUENTELAUQUEN EL_DIVISADERO RINCONADA_DE_PUNITAQUI CANELA_BAJA
HUENTELAUQUEN                   0.00    101459.276              95355.451    37523.37
EL_DIVISADERO              101459.28         0.000              22826.378    64427.48
RINCONADA_DE_PUNITAQUI      95355.45     22826.378                  0.000    58111.88
CANELA_BAJA                 37523.37     64427.480              58111.885        0.00
MANQUEHUA                   89792.75     12430.587              25436.181    53231.53
EL_ALTAR                   106447.82      5436.219              23261.998    69261.54
PUNITAQUI                   94093.99     13249.194              10613.354    56578.66
LA_CALERA                   99894.76     30460.697               8965.951    63277.47
BARRAZA                    111926.60     43099.492              24191.653    76363.63
MONTE_PATRIA               137012.41     36272.766              52819.327   100412.91
EL_ESPINAL                 107628.59     33899.598              15673.728    71150.74
PUCLARO                    216869.53    115813.182             123642.258   179438.30
CANELILLA_OVALLE           135894.03     36045.203              43282.482    98408.21
                       MANQUEHUA   EL_ALTAR PUNITAQUI  LA_CALERA    BARRAZA MONTE_PATRIA
HUENTELAUQUEN           89792.75 106447.822  94093.99  99894.759 111926.603    137012.41
EL_DIVISADERO           12430.59   5436.219  13249.19  30460.697  43099.492     36272.77
RINCONADA_DE_PUNITAQUI  25436.18  23261.998  10613.35   8965.951  24191.653     52819.33
CANELA_BAJA             53231.53  69261.538  56578.66  63277.472  76363.631    100412.91
MANQUEHUA                   0.00  17851.984  15109.01  34339.221  49022.492     47253.11
EL_ALTAR                17851.98      0.000  15405.02  29768.942  40965.402     32119.61
PUNITAQUI               15109.01  15405.025      0.00  19336.887  33921.733     47225.80
LA_CALERA               34339.22  29768.942  19336.89      0.000  15441.709     56341.15
BARRAZA                 49022.49  40965.402  33921.73  15441.709      0.000     61332.12
MONTE_PATRIA            47253.11  32119.608  47225.80  56341.155  61332.119         0.00
EL_ESPINAL              39919.51  31966.582  24859.22   7932.716   9240.166     54607.60
PUCLARO                128000.29 110626.575 122964.40 122094.185 116745.815     82757.42
CANELILLA_OVALLE        48474.28  30624.859  41874.10  43669.532  44390.629     20716.98
                       EL_ESPINAL   PUCLARO CANELILLA_OVALLE
HUENTELAUQUEN          107628.588 216869.53        135894.03
EL_DIVISADERO           33899.598 115813.18         36045.20
RINCONADA_DE_PUNITAQUI  15673.728 123642.26         43282.48
CANELA_BAJA             71150.744 179438.30         98408.21
MANQUEHUA               39919.514 128000.29         48474.28
EL_ALTAR                31966.582 110626.58         30624.86
PUNITAQUI               24859.222 122964.40         41874.10
LA_CALERA                7932.716 122094.18         43669.53
BARRAZA                  9240.166 116745.81         44390.63
MONTE_PATRIA            54607.605  82757.42         20716.98
EL_ESPINAL                  0.000 115958.39         39579.33
PUCLARO                115958.393      0.00         81095.42
CANELILLA_OVALLE        39579.334  81095.42             0.00

> #Crar una matriz de distancia con arbol de consenso
> con1 <-as.matrix(cophenetic.phylo(consensus_tree1)) #hy primero, s/PUCLARO
Warning in script: scripts_fv/OBJETIVO_4.2.Manteltest.R

### [Step 12/17] Running: scripts_fv/OBJETIVO_5.1.Tree&traits.R ###


> ################################################################################
> ################################################################################
> #########Project 111160402: Cultural phylogenetics and coevolution of wealth####
> ######inheritance and land tenure norms in agropastoralist communities##########
> ################################################################################
> ################################################################################
> 
> #### OBJETIVO 5 ####
> ### Part 1 ###
> ### To plot over tips of the resulting trees the estimated values of each trait, and compute the most likely values for each at the internal nodes ###
> ##IMPORTANTE: CORRER LOS SCRIPTS DE LOS OBJETIVOS 2 y 4 ##
> 
> 
> #### CARGAR E INSTALLAR LIBRERIAS ####
> library(tidyverse)

> library(ape)

> library(car)

> library(caper)

> library(conflicted)

> library(dplyr)

> library(geiger)

> library(nlme)

> library(phytools)

> library(Publish)

> #library(treeio) #No lo puedo instalar
> library(BiocManager) #esto se demora mucho en compilar cosas. No sé si se puede instalar en modo binario ejecutable
Bioconductor version 3.21 (BiocManager 1.30.25), R 4.5.0 (2025-04-11)

> library("treeio") #Ver "packages.R" para instalar este paqute

> library(ggplot2)

> library(gridExtra)

> library(geomorph) #No lo puedo instalar

> #install.packages("geomorph") 
> #library(devtools)
> #install_github("geomorphR/geomorph", ref = "Stable", build_vignettes = TRUE)
> 
> # Resolver conflictos de funciones
> conflict_prefer("select", "dplyr")
[conflicted] Will prefer dplyr::select over any other package.

> conflict_prefer("filter", "dplyr")
[conflicted] Will prefer dplyr::filter over any other package.

> conflict_prefer("treedata", "geiger")
[conflicted] Will prefer geiger::treedata over any other package.

> conflict_prefer("as.phylo", "phylogram")
[conflicted] Removing existing preference.
[conflicted] Will prefer phylogram::as.phylo over any other package.

> #### CREACION DE ARBOLES PARA CADA TRAIT ####
> #Ocuparemos (1) arbol de apellidos(y_total), (2) todas las tablas del objetivo 2, y (3) consenso STR/Apellido(consensus_3)
> 
> ###Explorar los datos
> STR <- read.csv("scripts_fv/Datos/STR.csv", sep = ",")

> STR$pop <- gsub(" ", "_", STR$pop)

> selected_communities <- unique(STR$pop)

> ##y_total
> plotTree(y_total,type="phylogram",ftype="off")

> ##Traits
> select_variable <- function(result, selected_communities = NULL, variable) {
+   df <- as.data.frame(result)
+   row.names(df) <- result$community
+   if (!is.null(selected_communities)) {
+     df <- df[df$community %in% selected_communities, ]
+   }
+   df <- df[, c("community", variable), drop = FALSE]
+   row.names(df) <- df$community
+   return(df)
+ }

> # S
> S_trait <- select_variable(result, selected_communities, "S")

> S_trait2 <- select_variable(result, NULL, "S")

> S_trait$community <- NULL

> S_trait2$community <- NULL

> N_trait2 <- select_variable(result, selected_communities, "N")

> # G
> G_trait <- select_variable(result, selected_communities, "G")

> G_trait2 <- select_variable(result, NULL, "G")

> G_trait$community <- NULL

> G_trait2$community <- NULL

> # A
> A_trait <- select_variable(result, selected_communities, "A")

> A_trait2 <- select_variable(result, NULL, "A")

> A_trait$community <- NULL

> A_trait2$community <- NULL

> # M
> M_trait <- select_variable(result, selected_communities, "M")

> M_trait2 <- select_variable(result, NULL, "M")

> M_trait$community <- NULL

> M_trait2$community <- NULL

> #Cluster
> #C_trait <- select_variable(result_traits, selected_communities, "cluster")
> #C_trait2 <- select_variable(result_traits, NULL, "cluster")
> #C_trait$community <- NULL
> #C_trait2$community <- NULL
> 
> #Final_table
> ft <- result

> ft <- ft %>% column_to_rownames(var = "community")

> ft2 <- result %>% filter(community %in% selected_communities)

> ft2 <- ft2 %>% column_to_rownames(var = "community")

> ##Consensus##
> consensus_tree <-as.phylo(consensus_tree)

> plotTree(consensus_tree,type="phylogram", ftype="i",lwd=1)

> ###Estimar estados ancestrales
> # S
> sv1 <- as.matrix(S_trait)[,1]

> sv2 <- as.matrix(S_trait2)[,1]

> # G
> gv1 <- as.matrix(G_trait)[,1]

> gv2 <- as.matrix(G_trait2)[,1]

> # A
> av1 <- as.matrix(A_trait)[,1]

> av2 <- as.matrix(A_trait2)[,1]

> # M
> mv1 <- as.matrix(M_trait)[,1]

> mv2 <- as.matrix(M_trait2)[,1]

> # Cluster
> #cv1 <- as.matrix(C_trait)[,1]
> #cv2 <- as.matrix(C_trait2)[,1]
> 
> # Funci?n para estimar estados ancestrales y crear el ?rbol
> estimacion_estados_ancestrales <- function(tree, trait_vector, leg_txt) {
+   sorted_trait_vector <- trait_vector[sort(tree$tip.label)]
+   anc <- fastAnc(tree, sorted_trait_vector, vars = TRUE, CI = TRUE)
+   obj <- contMap(tree, sorted_trait_vector, plot = TRUE)
+   plot(obj, type = "phylogram", legend = 0.7 * max(nodeHeights(tree)), ftype = "i", leg.txt = leg_txt)
+   return(list(anc=anc, obj = obj))
+ }

> # ANCESTRAL STATES FOR SAMPLED COMMUNITIES
> png("Figures/S_muestra.png")

> svc <- estimacion_estados_ancestrales(consensus_tree, sv1, "S")

> dev.off()
RStudioGD 
        2 

> #png("Figures/R_muestra.png")
> #rvc <- estimacion_estados_ancestrales(consensus_tree, rv1, "R")
> #dev.off()
> 
> png("Figures/G_muestra.png")

> gvc <- estimacion_estados_ancestrales(consensus_tree, gv1, "G")

> dev.off()
RStudioGD 
        2 

> png("Figures/A_muestra.png")

> avc <- estimacion_estados_ancestrales(consensus_tree, av1, "A")

> dev.off()
RStudioGD 
        2 

> png("Figures/M_muestra.png")

> mvc <- estimacion_estados_ancestrales(consensus_tree, mv1, "M")

> dev.off()
RStudioGD 
        2 

> #png("Figures/C_muestra.png")
> #cvc<- estimacion_estados_ancestrales(consensus_tree,cv1,"C")
> #dev.off()
> 
> # COMO LO QUE VIENE DEPENDE DE LO ANTERIOR, NO LO SEGUÍ PROBANDO##
> 
> writeAncestors(consensus_tree, Anc=svc$anc, file="Figures/S_nodos_muestra.phy", digits=6, format=c("phylip"))

> #writeAncestors(consensus_tree, Anc=rvc$anc, file="Figures/R_nodos_muestra.phy", digits=6, format=c("phylip"))
> writeAncestors(consensus_tree, Anc=gvc$anc, file="Figures/G_nodos_muestra.phy", digits=6, format=c("phylip"))

> writeAncestors(consensus_tree, Anc=avc$anc, file="Figures/A_nodos_muestra.phy", digits=6, format=c("phylip"))

> writeAncestors(consensus_tree, Anc=mvc$anc, file="Figures/M_nodos_muestra.phy", digits=6, format=c("phylip"))

> #Cluster discrete visualization
> #trees<-make.simmap(consensus_tree,cv1,nsim=100)
> #obj<-summary(trees,plot=FALSE)
> #cols<-setNames(palette()[1:400],mapped.states(trees))
> #cols<-cols[1:4]
> #plot(obj,cols,type="phylogram",fsize=0.8,cex=c(0.5,0.3))
> #add.simmap.legend(colors=cols,x=0.9*par()$usr[1],
> #                  y=0.9*par()$usr[4],prompt=FALSE,fsize=0.9)
> 
> 
> estimacion_estados_ancestrales <- function(tree, trait_vector, leg_txt) {
+   sorted_trait_vector <- trait_vector[sort(tree$tip.label)]
+   anc <- fastAnc(tree, sorted_trait_vector, vars = TRUE, CI = TRUE)
+   obj <- contMap(tree, sorted_trait_vector, plot = TRUE)
+   plot(obj, type = "phylogram", legend = 0.5 * max(nodeHeights(tree)), ftype = "off", leg.txt = leg_txt)
+   return(list(anc=anc, obj = obj))
+ }

> # Estimar estados ancestrales para los ?rboles de apellidos totales
> png("Figures/S_total.png")

> svt <- estimacion_estados_ancestrales(y_total, sv2, "S")

> dev.off()
RStudioGD 
        2 

> #png("Figures/R_total.png")
> #rvt <- estimacion_estados_ancestrales(y_total, rv2, "R")
> #dev.off()
> png("Figures/G_total.png")

> gvt <- estimacion_estados_ancestrales(y_total, gv2, "G")

> dev.off()
RStudioGD 
        2 

> png("Figures/A_total.png")

> avt <- estimacion_estados_ancestrales(y_total, av2, "A")

> dev.off()
RStudioGD 
        2 

> png("Figures/M_total.png")

> mvt <- estimacion_estados_ancestrales(y_total, mv2, "M")

> dev.off()
RStudioGD 
        2 

> #png("Figures/C_total.png")
> #cvt <- estimacion_estados_ancestrales(y_total, cv2, "C")
> #dev.off()
> 
> #Cluster discrete visualization
> #trees<-make.simmap(y_total,cv2,nsim=100)
> #obj<-summary(trees,plot=FALSE)
> #cols<-setNames(palette()[1:400],mapped.states(trees))
> #cols<-cols[1:4]
> #plot(obj,cols,type="phylogram",fsize=0.8,cex=c(0.5,0.3))
> #add.simmap.legend(colors=cols,x=0.9*par()$usr[1],
> #                  y=0.9*par()$usr[4],prompt=FALSE,fsize=0.9)
> 
> 
> ###Comparaciones
> ##Comunidades muestreadas
> plot_comparison <- function(obj1, obj2, xlabel) {
+   par(mfrow = c(1, 2), mar = c(5, 4, 4, 4) + 1, oma = c(1, 1, 1, 1))
+   # First plot
+   plot(obj1, lwd = 5, ftype = "off", legend = 0.7 * max(nodeHeights(consensus_tree)), outline = TRUE, fsize = c(0.3), leg.txt = xlabel[1])
+   
+   # Second plot
+   plot(obj2, lwd = 5, outline = TRUE, direction = "leftwards", ftype = "off", legend = 0.7 * max(nodeHeights(consensus_tree)), fsize = c(0.3), leg.txt = xlabel[2])
+ }

> # Comparaciones
> #png("Figures/S_R_muestra.png",width = 1042, height = 534, res = 300)
> #plot_comparison(svc$obj, rvc$obj, c("S", "R"))
> #dev.off()
> png("Figures/S_A_muestra.png",width = 1042, height = 534, res = 300)

> plot_comparison(svc$obj, avc$obj, c("S", "A"))

> dev.off()
RStudioGD 
        2 

> png("Figures/S_G_muestra.png",width = 1042, height = 534, res = 300)

> plot_comparison(svc$obj, gvc$obj, c("S", "G"))

> dev.off()
RStudioGD 
        2 

> png("Figures/S_M_muestra.png",width = 1042, height = 534, res = 300)

> plot_comparison(svc$obj, mvc$obj, c("S", "M"))

> dev.off()
RStudioGD 
        2 

> #png("Figures/R_A_muestra.png",width = 1042, height = 534, res = 300)
> #plot_comparison(rvc$obj, avc$obj, c("R", "A"))
> #dev.off()
> #png("Figures/R_G_muestra.png",width = 1042, height = 534, res = 300)
> #plot_comparison(rvc$obj, gvc$obj, c("R", "G"))
> #dev.off()
> #png("Figures/R_M_muestra.png",width = 1042, height = 534, res = 300)
> #plot_comparison(rvc$obj, mvc$obj, c("R", "M"))
> #dev.off()
> png("Figures/A_G_muestra.png",width = 1042, height = 534, res = 300)

> plot_comparison(avc$obj, gvc$obj, c("G", "A"))

> dev.off()
RStudioGD 
        2 

> png("Figures/A_M_muestra.png",width = 1042, height = 534, res = 300)

> plot_comparison(avc$obj, mvc$obj, c("A", "M"))

> dev.off()
RStudioGD 
        2 

> png("Figures/G_M_muestra.png",width = 1042, height = 534, res = 300)

> plot_comparison(gvc$obj, mvc$obj, c("G", "M"))

> dev.off()
RStudioGD 
        2 

> ##Comunidades totales
> plot_comparison2 <- function(obj1, obj2, xlabel) {
+   par(pin=c(10, 10))
+   par(mai = c(1.5, 4, 1.5, 4))
+   layout(matrix(1:3, 1, 3), widths=c(0.48, 0.04, 0.48)) 
+   plot(obj1, lwd=6, ftype="off", outline=TRUE,legend=0.4*max(nodeHeights(y_total)),fsize=c(0.3,1.2),leg.txt=xlabel[1])
+   plot.new()
+   plot.window(xlim=c(1,2), ylim=get("last_plot.phylo", envir=.PlotPhyloEnv)$y.lim)
+   plot(obj2, lwd=6,outline=TRUE, direction="leftwards", legend=0.4*max(nodeHeights(y_total)),ftype="off",fsize=c(0.3,1.2),leg.txt=xlabel[2])
+ }

> # Comparaciones
> dev.off()
null device 
          1 

> #png("Figures/S_R_total.png",width = 2084, height = 1068, res = 300)
> #plot_comparison2(svt$obj, rvt$obj, c("S", "R"))
> #dev.off()
> png("Figures/S_G_total.png",width = 2084, height = 1068, res = 300)

> plot_comparison2(svt$obj, gvt$obj, c("S", "G"))

> dev.off()
null device 
          1 

> png("Figures/S_A_total.png",width = 2084, height = 1068, res = 300)

> plot_comparison2(svt$obj, avt$obj, c("S", "A"))

> dev.off()
null device 
          1 

> png("Figures/S_M_total.png",width = 2084, height = 1068, res = 300)

> plot_comparison2(svt$obj, mvt$obj, c("S", "M"))

> dev.off()
null device 
          1 

> #png("Figures/R_G_total.png",width = 2084, height = 1068, res = 300)
> #plot_comparison2(rvt$obj, gvt$obj, c("R", "G"))
> #dev.off()
> #png("Figures/R_A_total.png",width = 2084, height = 1068, res = 300)
> #plot_comparison2(rvt$obj, avt$obj, c("R", "A"))
> #dev.off()
> #png("Figures/R_M_total.png",width = 2084, height = 1068, res = 300)
> #plot_comparison2(rvt$obj, mvt$obj, c("R", "M"))
> #dev.off()
> png("Figures/A_G_total.png",width = 2084, height = 1068, res = 300)

> plot_comparison2(avt$obj,gvt$obj, c("G", "A"))

> dev.off()
null device 
          1 

> png("Figures/A_M_total.png",width = 2084, height = 1068, res = 300)

> plot_comparison2(avt$obj, mvt$obj, c("A", "M"))

> dev.off()
null device 
          1 

> png("Figures/G_M_total.png",width = 2084, height = 1068, res = 300)

> plot_comparison2(gvt$obj, mvt$obj, c("G", "M"))

> dev.off()
null device 
          1 

> ###Phylogenetic signal
> ### Cambiar por physignal.z? 
> z<-phylosig(consensus_tree,sv1,method = "lambda",test=T)

> z

Phylogenetic signal lambda : 0.213636 
logL(lambda) : 14.1849 
LR(lambda=0) : 0.556576 
P-value (based on LR test) : 0.455643 


> ##Muestra
> analyze_phylosignal <- function(tree, trait) {
+   # 1. Verificar correspondencia entre árbol y datos
+   if(!all(names(trait) %in% tree$tip.label)) {
+     stop("Los nombres en el trait no coinciden con las puntas del árbol")
+   }
+   
+   # 2. Asegurar que el trait es numérico
+   trait_num <- setNames(as.numeric(trait), names(trait))
+   
+   # 3. Calcular lambda de Pagel con más simulaciones
+   res <- phylosig(tree, trait_num, method = "lambda", test = TRUE, nsim = 9999)
+   
+   # 4. Calcular K de Blomberg como alternativa
+   res_k <- phylosig(tree, trait_num, method = "K", test = TRUE, nsim = 9999)
+   
+   list(Pagel_lambda = res, Blomberg_K = res_k)
+ }

> # Aplicar a todos los traits
> Phy_sigx <- lapply(list(S = sv1, G = gv1, A = av1, M = mv1), 
+                   function(t) analyze_phylosignal(consensus_tree, t))  

> # Tabla resumen mejorada
> Phy_sig <- data.frame(
+   Lambda = format(round(sapply(Phy_sigx, function(x) x$Pagel_lambda$lambda), 5), nsmall = 5),
+   pvalue_lambda = format(round(sapply(Phy_sigx, function(x) x$Pagel_lambda$P), 5), nsmall = 5),
+   Blomberg_K = format(round(sapply(Phy_sigx, function(x) x$Blomberg_K$K), 5), nsmall = 5),
+   pvalue_K = format(round(sapply(Phy_sigx, function(x) x$Blomberg_K$P), 5), nsmall = 5)
+ )

> publish(Phy_sig)
   Lambda pvalue_lambda Blomberg_K pvalue_K 
 S 0.21364       0.45564    0.46463  0.12651 
 G 0.80726       0.61445    0.57686  0.04810 
 A 0.00008       1.00000    0.31567  0.58576 
 M 1.05665       0.02581    0.93000  0.01380 

> png("Figures/Phylosignal_muestra2.png", width = 400, height = 200)

> grid.table(Phy_sig)

> dev.off()
null device 
          1 

> #GM_df_cluster <- GM_df[rownames(GM_df) %in% tree_tips, ]
> #GM_df_cluster$cluster<-as.numeric(GM_df_cluster$cluster)
> #GM_df_cluster <- GM_df_cluster %>%
> #  select(cluster)
> # Example with your tree and cluster assignments
> #fit_lambda <- fitDiscrete(
> #  phy = consensus_tree,
> #  dat = GM_df_cluster,
> #  model = "ER",  # Equal rates model
> #  transform = "lambda"
> #)
> #fit_lambda <- fitContinuous(
>  # phy = consensus_tree,
>  # dat = GM_df_cluster,
>  #  model = "lambda",  # Equal rates model
> #)
> # View results
> #print(fit_lambda)
> #fit_lambda$opt$lambda ## la evolución del rasgo está ligada al árbol filogenético
> #fit_lambda$opt$lnL 
> 
> #fit null model
> #fit_null <- fitDiscrete(
> #  phy = consensus_tree,
> #  dat = GM_df_cluster,
> #  model = "ER", 
> #  transform = "none"  # No λ transformation
> #)
> #fit_null <- fitContinuous(
> #  phy = consensus_tree,
> #  dat = GM_df_cluster,
> #  model = "lambda"
> #)
> #fit_null$opt$lambda
> #fit_null$opt$lnL
> 
> # LRT between models
> #LRT_stat <- 2 * (fit_lambda$opt$lnL - fit_null$opt$lnL)
> #p_value <- pchisq(LRT_stat, df = 1, lower.tail = FALSE)
> #print(LRT_stat)
> #print(p_value)
> 
> ##Total
> calculate_phylosignal <- function(tree, trait_vector, trait_name = "") {
+   # Verificar y ajustar nombres
+   trait_numeric <- as.numeric(trait_vector)
+   names(trait_numeric) <- names(trait_vector)
+   
+   # Filtrar para coincidencia exacta entre árbol y datos
+   matched_data <- match_tree_and_traits(tree, trait_numeric)
+   
+   # Calcular métricas
+   lambda_res <- phylosig(matched_data$tree, matched_data$trait, 
+                          method = "lambda", test = TRUE, nsim = 9999)
+   K_res <- phylosig(matched_data$tree, matched_data$trait,
+                     method = "K", test = TRUE, nsim = 9999)
+   
+   list(
+     trait = trait_name,
+     lambda = lambda_res$lambda,
+     lambda_p = lambda_res$P,
+     K = K_res$K,
+     K_p = K_res$P
+   )
+ }

> # Función auxiliar para emparejar árbol y traits
> match_tree_and_traits <- function(tree, trait) {
+   common_taxa <- intersect(tree$tip.label, names(trait))
+   if(length(common_taxa) == 0) stop("No hay coincidencia entre árbol y traits")
+   
+   list(
+     tree = keep.tip(tree, common_taxa),
+     trait = trait[common_taxa]
+   )
+ }

> # Análisis para todos los traits totales
> trait_list_total <- list(
+   "S" = sv2,
+   "G" = gv2,
+   "A" = av2,
+   "M" = mv2
+ )

> Phy_sig_t <- lapply(names(trait_list_total), function(trait_name) {
+   calculate_phylosignal(y_total, trait_list_total[[trait_name]], trait_name)
+ })

> # Crear tabla de resultados con redondeo a 5 decimales
> Phy_sig_total <- do.call(rbind, lapply(Phy_sig_t , function(x) {
+   data.frame(
+     Trait = x$trait,
+     Lambda = round(x$lambda, 5),
+     pvalue_Lambda = round(x$lambda_p, 5),
+     Blomberg_K = round(x$K, 5),
+     pvalue_K = round(x$K_p, 5),
+     stringsAsFactors = FALSE
+   )
+ }))

> publish(Phy_sig_total)
 Trait  Lambda pvalue_Lambda Blomberg_K pvalue_K 
     S 0.00008       1.00000    0.60189  0.21582 
     G 0.13819       0.51663    0.64711  0.06541 
     A 0.00008       1.00000    0.63577  0.09661 
     M 0.00008       1.00000    0.64118  0.14361 

> png("Figures/Phylosignal_total.png", width = 400, height = 200)

> grid.table(Phy_sig_total)

> dev.off()
null device 
          1 

> ###Regresion PGLS
> ##Phylo-regression for sampled data
> sampled_matched <- treedata(consensus_tree, ft2, sort=F, warnings=TRUE)

> spc <- sampled_matched$phy$tip.label

> V<-corBrownian(phy=sampled_matched$phy,form = ~spc)

> C <- vcv.phylo(phy = sampled_matched$phy)

> #Assign traits
> obj <- ft2

> x <- write.tree(consensus_tree)

> tree_consensus.tree <- read.tree(text=x) #TODO Found more than one class "phylo" in cache; using the first, from namespace 'TreeTools' Also defined by ‘tidytree’

> G <- setNames(obj[,"G"],rownames(obj))

> M <- setNames(obj[,"M"],rownames(obj))

> S <- setNames(obj[,"S"],rownames(obj))

> A <- setNames(obj[,"A"],rownames(obj))

> #R <- setNames(obj[,"R"],rownames(obj))
> N <- setNames(obj[,"N"],rownames(obj))

> # Verifica que N, M, A, S, y G sean vectores numéricos
> N <- as.vector(N)

> M <- as.vector(M)

> A <- as.vector(A)

> S <- as.vector(S)

> G <- as.vector(G)

> # Crea un dataframe con estos vectores
> vector.data <- data.frame(N = N, M = M, A = A, S = S, G = G)

> #model with N ( efecto del N en el indice)
> bm_glsN<-gls(N~M+A+S+G,correlation = V, data= vector.data)

> summary(bm_glsN) 
Generalized least squares fit by REML
  Model: N ~ M + A + S + G 
  Data: vector.data 
       AIC      BIC    logLik
  151.6501 153.4656 -69.82505

Correlation Structure: corBrownian
 Formula: ~spc 
 Parameter estimate(s):
numeric(0)

Coefficients:
                Value Std.Error   t-value p-value
(Intercept)  -771.621 1429.8189 -0.539664  0.6012
M             724.430  674.3239  1.074305  0.3079
A            3331.386 2479.9114  1.343349  0.2088
S           -2810.400  732.2543 -3.838010  0.0033
G           -1298.542  949.5477 -1.367537  0.2014

 Correlation: 
  (Intr) M      A      S     
M -0.528                     
A -0.963  0.530              
S  0.235 -0.307 -0.422       
G  0.231 -0.794 -0.345  0.546

Standardized residuals:
        Min          Q1         Med          Q3         Max 
-0.82173913 -0.16370355  0.02639225  0.36668673  1.00145800 

Residual standard error: 508.9982 
Degrees of freedom: 15 total; 10 residual

> anova(bm_glsN)
Denom. DF: 10 
            numDF   F-value p-value
(Intercept)     1  1.772695  0.2126
M               1  1.556180  0.2406
A               1  0.030615  0.8646
S               1 13.615824  0.0042
G               1  1.870158  0.2014

> #model with G 
> bm_glsG<-gls(G~M+A+S,correlation = V, data=data.frame(N, M, A, S, G))

> summary(bm_glsG) 
Generalized least squares fit by REML
  Model: G ~ M + A + S 
  Data: data.frame(N, M, A, S, G) 
        AIC      BIC   logLik
  -11.00859 -9.01911 10.50429

Correlation Structure: corBrownian
 Formula: ~spc 
 Parameter estimate(s):
numeric(0)

Coefficients:
                 Value Std.Error   t-value p-value
(Intercept) -0.3479447 0.4417255 -0.787694  0.4475
M            0.5640314 0.1300998  4.335375  0.0012
A            0.9019917 0.7389959  1.220564  0.2478
S           -0.4210993 0.1947877 -2.161837  0.0535

 Correlation: 
  (Intr) M      A     
M -0.583              
A -0.967  0.449       
S  0.133  0.249 -0.297

Standardized residuals:
       Min         Q1        Med         Q3        Max 
-1.8281265 -0.2227923  0.2448525  0.4449359  0.7401298 

Residual standard error: 0.161623 
Degrees of freedom: 15 total; 11 residual

> anova(bm_glsG)
Denom. DF: 11 
            numDF  F-value p-value
(Intercept)     1 16.84671  0.0017
M               1 32.34784  0.0001
A               1  0.36750  0.5567
S               1  4.67354  0.0535

> #model with M 
> bm_glsM<-gls(M~G+A+S,correlation = V, data=data.frame(N, M, A, S, G))

> summary(bm_glsM) 
Generalized least squares fit by REML
  Model: M ~ G + A + S 
  Data: data.frame(N, M, A, S, G) 
        AIC       BIC   logLik
  -4.163082 -2.173605 7.081541

Correlation Structure: corBrownian
 Formula: ~spc 
 Parameter estimate(s):
numeric(0)

Coefficients:
                 Value Std.Error   t-value p-value
(Intercept)  1.1194204 0.5429619  2.061692  0.0637
G            1.1184067 0.2579723  4.335375  0.0012
A           -1.9504754 0.9400475 -2.074869  0.0622
S            0.3331548 0.3116242  1.069092  0.3079

 Correlation: 
  (Intr) G      A     
G -0.365              
A -0.948  0.147       
S  0.090  0.523 -0.321

Standardized residuals:
       Min         Q1        Med         Q3        Max 
-0.9672822 -0.8022637 -0.5913426 -0.1122406  2.4289865 

Residual standard error: 0.2275891 
Degrees of freedom: 15 total; 11 residual

> anova(bm_glsM)
Denom. DF: 11 
            numDF   F-value p-value
(Intercept)     1 18.424904  0.0013
G               1 31.228007  0.0002
A               1  3.342763  0.0947
S               1  1.142957  0.3079

> publish(bm_glsN)
    Variable Units Coefficient               CI.95    p-value 
 (Intercept)           -771.62  [-3574.01;2030.77]   0.601238 
           M            724.43   [-597.22;2046.08]   0.307924 
           A           3331.39  [-1529.15;8191.92]   0.208849 
           S          -2810.40 [-4245.59;-1375.21]   0.003276 
           G          -1298.54   [-3159.62;562.54]   0.201404 

> publish(bm_glsG)
    Variable Units Coefficient         CI.95    p-value 
 (Intercept)             -0.35  [-1.21;0.52]   0.447517 
           M              0.56   [0.31;0.82]   0.001184 
           A              0.90  [-0.55;2.35]   0.247770 
           S             -0.42 [-0.80;-0.04]   0.053533 

> publish(bm_glsM)
    Variable Units Coefficient         CI.95    p-value 
 (Intercept)              1.12   [0.06;2.18]   0.063679 
           G              1.12   [0.61;1.62]   0.001184 
           A             -1.95 [-3.79;-0.11]   0.062247 
           S              0.33  [-0.28;0.94]   0.307928 

> ##Phylo-regression for all communities
> sampled_matched <- treedata(y_total, ft, sort=FALSE, warnings=TRUE)

> spc <- sampled_matched$phy$tip.label

> V<-corBrownian(phy=sampled_matched$phy,form = ~spc)

> C <- vcv.phylo(phy = sampled_matched$phy)

> #Now we run the analysis:
> #Assign traits
> obj <- ft

> x <- write.tree(y_total)

> tree_consensus.tree <- read.tree(text=x) #TODO Found more than one class "phylo" in cache; using the first, from namespace 'TreeTools'. Also defined by ‘tidytree’ # REVISION: No me aparece este error.

> G <- setNames(obj[,"G"],rownames(obj))

> M <- setNames(obj[,"M"],rownames(obj))

> S <- setNames(obj[,"S"],rownames(obj))

> A <- setNames(obj[,"A"],rownames(obj))

> #R <- setNames(obj[,"R"],rownames(obj))
> N <- setNames(obj[,"N"],rownames(obj))

> #model with N ( efecto del N en el ?ndice)
> bm_glsN<-gls(N~M+A+S+G,correlation = V, data=data.frame(N, M, A, S, G))

> summary(bm_glsN) 
Generalized least squares fit by REML
  Model: N ~ M + A + S + G 
  Data: data.frame(N, M, A, S, G) 
       AIC     BIC    logLik
  2145.685 2164.32 -1066.842

Correlation Structure: corBrownian
 Formula: ~spc 
 Parameter estimate(s):
numeric(0)

Coefficients:
                Value Std.Error   t-value p-value
(Intercept)  258.7176  87.28992  2.963889  0.0035
M            106.4593 133.67897  0.796381  0.4270
A             35.0784 111.54608  0.314475  0.7536
S           -449.8082  67.56028 -6.657880  0.0000
G           -287.0773 171.04676 -1.678356  0.0952

 Correlation: 
  (Intr) M      A      S     
M -0.039                     
A -0.729  0.106              
S -0.254 -0.061 -0.171       
G -0.167 -0.889  0.017  0.249

Standardized residuals:
        Min          Q1         Med          Q3         Max 
-0.90408932 -0.19708173  0.02447264  0.27843532  8.03917670 

Residual standard error: 185.443 
Degrees of freedom: 170 total; 165 residual

> anova(bm_glsN)
Denom. DF: 165 
            numDF  F-value p-value
(Intercept)     1  1.67222  0.1978
M               1  1.56123  0.2133
A               1  0.69719  0.4049
S               1 41.51082  <.0001
G               1  2.81688  0.0952

> #model with G 
> bm_glsG<-gls(G~M+A+S,correlation = V, data=data.frame(N, M, A, S, G))

> summary(bm_glsG) 
Generalized least squares fit by REML
  Model: G ~ M + A + S 
  Data: data.frame(N, M, A, S, G) 
        AIC       BIC   logLik
  -398.9066 -383.3467 204.4533

Correlation Structure: corBrownian
 Formula: ~spc 
 Parameter estimate(s):
numeric(0)

Coefficients:
                 Value  Std.Error   t-value p-value
(Intercept)  0.0853582 0.03905113  2.185806  0.0302
M            0.6945041 0.02781832 24.965713  0.0000
A           -0.0108871 0.05060866 -0.215124  0.8299
S           -0.0985118 0.02968770 -3.318268  0.0011

 Correlation: 
  (Intr) M      A     
M -0.415              
A -0.737  0.264       
S -0.222  0.361 -0.181

Standardized residuals:
       Min         Q1        Med         Q3        Max 
-5.4314642 -0.3714818 -0.1433518  0.2447003  3.6825737 

Residual standard error: 0.08414756 
Degrees of freedom: 170 total; 166 residual

> anova(bm_glsG)
Denom. DF: 166 
            numDF  F-value p-value
(Intercept)     1  33.0774  <.0001
M               1 922.2494  <.0001
A               1   0.6858  0.4088
S               1  11.0109  0.0011

> #model with M 
> bm_glsM<-gls(M~G+A+S,correlation = V, data=data.frame(N, M, A, S, G))

> summary(bm_glsM) 
Generalized least squares fit by REML
  Model: M ~ G + A + S 
  Data: data.frame(N, M, A, S, G) 
       AIC       BIC   logLik
  -317.563 -302.0031 163.7815

Correlation Structure: corBrownian
 Formula: ~spc 
 Parameter estimate(s):
numeric(0)

Coefficients:
                 Value  Std.Error   t-value p-value
(Intercept)  0.0254273 0.05064277  0.502092  0.6163
G            1.1370467 0.04554433 24.965713  0.0000
A           -0.0885607 0.06439873 -1.375194  0.1709
S            0.0310447 0.03915195  0.792929  0.4290

 Correlation: 
  (Intr) G      A     
G -0.441              
A -0.730  0.243       
S -0.257  0.426 -0.165

Standardized residuals:
        Min          Q1         Med          Q3         Max 
-3.31071922 -0.17273173  0.08751576  0.19981878  6.44347440 

Residual standard error: 0.1076696 
Degrees of freedom: 170 total; 166 residual

> anova(bm_glsM)
Denom. DF: 166 
            numDF  F-value p-value
(Intercept)     1  21.3385  <.0001
G               1 873.0642  <.0001
A               1   1.5911  0.2089
S               1   0.6287  0.4290

> publish(bm_glsN)
    Variable Units Coefficient             CI.95    p-value 
 (Intercept)            258.72    [87.63;429.80]   0.003488 
           M            106.46  [-155.55;368.47]   0.426955 
           A             35.08  [-183.55;253.70]   0.753558 
           S           -449.81 [-582.22;-317.39]    < 1e-04 
           G           -287.08   [-622.32;48.17]   0.095171 

> publish(bm_glsG)
    Variable Units Coefficient         CI.95    p-value 
 (Intercept)              0.09   [0.01;0.16]   0.030230 
           M              0.69   [0.64;0.75]    < 1e-04 
           A             -0.01  [-0.11;0.09]   0.829935 
           S             -0.10 [-0.16;-0.04]   0.001113 

> publish(bm_glsM)
    Variable Units Coefficient        CI.95  p-value 
 (Intercept)              0.03 [-0.07;0.12]   0.6163 
           G              1.14  [1.05;1.23]   <1e-04 
           A             -0.09 [-0.21;0.04]   0.1709 
           S              0.03 [-0.05;0.11]   0.4290 

> ##Generate PICs and test while conditioning on phylogeny
> #Prepare the tree
> consensus_tree_rooted <- midpoint.root(consensus_tree) #TODO Found more than one class "phylo" in cache; using the first, from namespace 'TreeTools'. Also defined by ‘tidytree’ #REVISION: Tampoco me aparece error

> # Resuelve las politomías
> consensus_tree_dicotomous <- multi2di(consensus_tree_rooted) #TODO Found more than one class "phylo" in cache; using the first, from namespace 'TreeTools'

> #Also defined by ‘tidytree’ #REVISION:Tampoco me aparece este error
> #Sampled communities
> S_pic1<-pic(x = ft2$S, phy = consensus_tree_dicotomous)

> A_pic1<-pic(x = ft2$A, phy = consensus_tree_dicotomous)

> G_pic1<-pic(x=ft2$G, phy = consensus_tree_dicotomous)

> M_pic1<-pic(x=ft2$M, phy = consensus_tree_dicotomous)

> calc_r <- function(x, y) {
+   r <- cor.test(x, y)  # Calcular el coeficiente de correlaci?n de Pearson
+   r_squared <- r$estimate
+   p_value<-r$p.value
+   return(list(r_squared = r_squared, p_value = p_value))
+ }

> data1 <- data.frame(S_pic1,A_pic1,G_pic1,M_pic1)

> #Total communities
> S_pic<-pic(x = ft$S, phy = y_total)

> A_pic<-pic(x = ft$A, phy = y_total)

> G_pic<-pic(x=ft$G, phy = y_total)

> M_pic<-pic(x=ft$M, phy = y_total)

> calc_r <- function(x, y) {
+   r <- cor.test(x, y)  # Calcular el coeficiente de correlaci?n de Pearson
+   r_squared <- r$estimate
+   p_value<-r$p.value
+   return(list(r_squared = r_squared, p_value = p_value))
+ }

> data <- data.frame(S_pic,A_pic,G_pic,M_pic)

### [Step 13/17] Running: scripts_fv/OBJETIVO_5.2.Visualizacion.R ###


> ##########################################################################################################################################################
> #########Project 111160402: Cultural phylogenetics and coevolution of wealth inheritance and land tenure norms in agropastoralist communities.############
> ##########################################################################################################################################################
> 
> #### OBJETIVO 5 ####
> ### Part 2 ###
> ### To plot over tips of the resulting trees the estimated values of each trait, and compute the most likely values for each at the internal nodes ###
> 
> ## CARGAR LIBRERIAS ##
> library(cowplot)

> library(GGally)

> library(png)

> library(grid)

> library(magick)

> ## Matriz de graficos ##
> ## Comunidades muestreadas
> # Grafico 1
> annotate_r_squared <- function(data1, mapping, ...) {
+   x <- eval_data_col(data1, mapping$x)
+   y <- eval_data_col(data1, mapping$y)
+   
+   result <- calc_r(x, y)
+   r_squared <- result$r_squared
+   p_value <- result$p_value
+   
+   if (p_value < 0.001) {
+     stars <- "***"
+   } else if (p_value < 0.01) {
+     stars <- "**"
+   } else if (p_value < 0.05) {
+     stars <- "*"
+   } else {
+     stars <- ""
+   }
+   label <- paste("Corr = ", round(r_squared, 4),stars)
+   
+   ggplot() +
+     annotate("text", x = mean(x), y = max(y), label = label, hjust = 0.5, vjust = 0.5, size = 4, color = "black")
+ }

> image_paths1 <- c(
+   "Figures/S_A_muestra.png",
+   "Figures/S_G_muestra.png",
+   "Figures/A_G_muestra.png",
+   "Figures/S_M_muestra.png",
+   "Figures/A_M_muestra.png",
+   "Figures/G_M_muestra.png")

> plot_with_image <- function(image_path) {
+   # Cargar la imagen usando cowplot
+   image <- cowplot::ggdraw() + cowplot::draw_image(image_path, scale = 1)
+   return(image)
+ }

> image_index <- 1

> # Definir la funci?n personalizada para ggally que utilice la imagen correspondiente
> custom_image_plot <- function(data1, mapping) {
+   image_path <- image_paths1[image_index]
+   p <- plot_with_image(image_path)
+   image_index <<- image_index + 1
+   ggplot() + annotation_custom(ggplotGrob(p), xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) + theme_void()
+ }

> png("Figures/Scatterplot_muestra_1.png",width = 3000, height = 3000, res = 300)

> # Ajustar margen y tama?o de texto para evitar colapso
> par(mar = c(1, 1, 0.5, 0.5) + 0.1)

> ggpairs(data1,
+         columnLabels = c("S","A","G","M"), 
+         lower= list(continuous = custom_image_plot, image_path = image_paths1),
+         upper = list(continuous =wrap(annotate_r_squared))
+ )
 plot: [1, 1] [===>-------------------------------------------------------]  6% est: 0s  plot: [1, 2] [======>----------------------------------------------------] 12% est: 3s  plot: [1, 3] [==========>------------------------------------------------] 19% est: 5s  plot: [1, 4] [==============>--------------------------------------------] 25% est: 4s  plot: [2, 1] [=================>-----------------------------------------] 31% est: 4s  plot: [2, 2] [=====================>-------------------------------------] 38% est: 4s  plot: [2, 3] [=========================>---------------------------------] 44% est: 4s  plot: [2, 4] [=============================>-----------------------------] 50% est: 4s  plot: [3, 1] [================================>--------------------------] 56% est: 3s  plot: [3, 2] [====================================>----------------------] 62% est: 3s  plot: [3, 3] [========================================>------------------] 69% est: 2s  plot: [3, 4] [===========================================>---------------] 75% est: 2s  plot: [4, 1] [===============================================>-----------] 81% est: 1s  plot: [4, 2] [===================================================>-------] 88% est: 1s  plot: [4, 3] [======================================================>----] 94% est: 0s  plot: [4, 4] [===========================================================]100% est: 0s                                                                                         
> dev.off()
null device 
          1 

> #=======
> #TODO: REVISAR. Error: object 'data1' not found
> #=======
> 
> # Grafico 2
> annotate_r_squared <- function(data1, mapping, ...) {
+   x <- eval_data_col(data1, mapping$x)
+   y <- eval_data_col(data1, mapping$y)
+   
+   result <- calc_r(x, y)
+   r_squared <- result$r_squared
+   p_value <- result$p_value
+   
+   if (p_value < 0.001) {
+     stars <- "***"
+   } else if (p_value < 0.01) {
+     stars <- "**"
+   } else if (p_value < 0.05) {
+     stars <- "*"
+   } else {
+     stars <- ""
+   }
+   label <- paste("Corr = ", round(r_squared, 4),stars)
+   
+   ggplot() +
+     annotate("text", x = mean(x), y = max(y), label = label, hjust = 0.5, vjust = 0.5, size = 4, color = "black")
+ }

> png("Figures/Scatterplot_muestra_2.png",width = 3000, height = 3000, res = 300)

> # Ajustar margen y tama?o de texto para evitar colapso
> par(mar = c(1, 1, 0.5, 0.5) + 0.1)

> ggpairs(data1,
+         columnLabels = c("S", "A","G","M"), 
+         lower= list(continuous =function(data1, mapping, ...) {
+           ggplot(data = data1, mapping = mapping) +
+             geom_point() +
+             geom_smooth(method = "lm", color = "red", fill = "#69b3a2", se = TRUE)
+         }),
+         upper = list(continuous =wrap(annotate_r_squared))
+ )
 plot: [1, 1] [===>-------------------------------------------------------]  6% est: 0s  plot: [1, 2] [======>----------------------------------------------------] 12% est: 3s  plot: [1, 3] [==========>------------------------------------------------] 19% est: 4s  plot: [1, 4] [==============>--------------------------------------------] 25% est: 4s  plot: [2, 1] [=================>-----------------------------------------] 31% est: 4s `geom_smooth()` using formula = 'y ~ x'
 plot: [2, 2] [=====================>-------------------------------------] 38% est: 4s  plot: [2, 3] [=========================>---------------------------------] 44% est: 4s  plot: [2, 4] [=============================>-----------------------------] 50% est: 3s  plot: [3, 1] [================================>--------------------------] 56% est: 3s `geom_smooth()` using formula = 'y ~ x'
 plot: [3, 2] [====================================>----------------------] 62% est: 3s `geom_smooth()` using formula = 'y ~ x'
 plot: [3, 3] [========================================>------------------] 69% est: 2s  plot: [3, 4] [===========================================>---------------] 75% est: 2s  plot: [4, 1] [===============================================>-----------] 81% est: 1s `geom_smooth()` using formula = 'y ~ x'
 plot: [4, 2] [===================================================>-------] 88% est: 1s `geom_smooth()` using formula = 'y ~ x'
 plot: [4, 3] [======================================================>----] 94% est: 0s `geom_smooth()` using formula = 'y ~ x'
 plot: [4, 4] [===========================================================]100% est: 0s                                                                                         
> dev.off()
null device 
          1 

> #=======
> #TODO: REVISAR. Error: object 'data1' not found
> #=======
> # REVISION: Si corre el objetivo 5.1 debería crearse el objeto data1
> 
> ## Comunidades total
> #Grafico 1
> annotate_r_squared <- function(data, mapping, ...) {
+   x <- eval_data_col(data, mapping$x)
+   y <- eval_data_col(data, mapping$y)
+   
+   result <- calc_r(x, y)
+   r_squared <- result$r_squared
+   p_value <- result$p_value
+   
+   if (p_value < 0.001) {
+     stars <- "***"
+   } else if (p_value < 0.01) {
+     stars <- "**"
+   } else if (p_value < 0.05) {
+     stars <- "*"
+   } else {
+     stars <- ""
+   }
+   label <- paste("Corr = ", round(r_squared, 4),stars)
+   
+   ggplot() +
+     annotate("text", x = mean(x), y = max(y), label = label, hjust = 0.5, vjust = 0.5, size = 4, color = "black")
+ }

> image_paths <- c(
+   "Figures/S_A_total.png",
+   "Figures/S_G_total.png",
+   "Figures/A_G_total.png",
+   "Figures/S_M_total.png",
+   "Figures/A_M_total.png",
+   "Figures/G_M_total.png"
+ )

> plot_with_image <- function(image_path) {
+   # Cargar la imagen usando cowplot
+   image <- cowplot::ggdraw() + cowplot::draw_image(image_path, scale = 1)
+   return(image)
+ }

> image_index <- 1

> # Definir la funci?n personalizada para ggally que utilice la imagen correspondiente
> custom_image_plot <- function(data, mapping) {
+   image_path <- image_paths[image_index]
+   p <- plot_with_image(image_path)
+   image_index <<- image_index + 1
+   ggplot() + annotation_custom(ggplotGrob(p), xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) + theme_void()
+ }

> png("Figures/Scatterplot_total_1.png",width = 3000, height = 3000, res = 300)

> # Ajustar margen y tama?o de texto para evitar colapso
> par(mar = c(1, 1, 0.5, 0.5) + 0.1)

> ggpairs(data,
+         columnLabels = c("S", "A","G","M"), 
+         lower= list(continuous = custom_image_plot, image_path = image_paths),
+         upper = list(continuous =wrap(annotate_r_squared)))
 plot: [1, 1] [===>-------------------------------------------------------]  6% est: 0s  plot: [1, 2] [======>----------------------------------------------------] 12% est: 3s  plot: [1, 3] [==========>------------------------------------------------] 19% est: 4s  plot: [1, 4] [==============>--------------------------------------------] 25% est: 4s  plot: [2, 1] [=================>-----------------------------------------] 31% est: 4s  plot: [2, 2] [=====================>-------------------------------------] 38% est: 5s  plot: [2, 3] [=========================>---------------------------------] 44% est: 5s  plot: [2, 4] [=============================>-----------------------------] 50% est: 4s  plot: [3, 1] [================================>--------------------------] 56% est: 3s  plot: [3, 2] [====================================>----------------------] 62% est: 3s  plot: [3, 3] [========================================>------------------] 69% est: 3s  plot: [3, 4] [===========================================>---------------] 75% est: 2s  plot: [4, 1] [===============================================>-----------] 81% est: 2s  plot: [4, 2] [===================================================>-------] 88% est: 2s  plot: [4, 3] [======================================================>----] 94% est: 1s  plot: [4, 4] [===========================================================]100% est: 0s                                                                                         
> dev.off()
null device 
          1 

> #=======
> #TODO: REVISAR. Error in 1:dim(data)[2] : argument of length 0
> #=======
> 
> # Gr?fico 2 Correlaciones
> annotate_r_squared <- function(data, mapping, ...) {
+   x <- eval_data_col(data, mapping$x)
+   y <- eval_data_col(data, mapping$y)
+   
+   result <- calc_r(x, y)
+   r_squared <- result$r_squared
+   p_value <- result$p_value
+   
+   if (p_value < 0.001) {
+     stars <- "***"
+   } else if (p_value < 0.01) {
+     stars <- "**"
+   } else if (p_value < 0.05) {
+     stars <- "*"
+   } else {
+     stars <- ""
+   }
+   label <- paste("Corr = ", round(r_squared, 4),stars)
+   
+   ggplot() +
+     annotate("text", x = mean(x), y = max(y), label = label, hjust = 0.5, vjust = 0.5, size = 4, color = "black")
+ }

> png("Figures/Scatterplot_total_2.png",width = 3000, height = 3000, res = 300)

> # Ajustar margen y tama?o de texto para evitar colapso
> par(mar = c(1, 1, 0.5, 0.5) + 0.1)

> ggpairs(data,
+         columnLabels = c("S", "A","G","M"), 
+         lower= list(continuous =function(data, mapping, ...) {
+           ggplot(data = data, mapping = mapping) +
+             geom_point() +
+             geom_smooth(method = "lm", color = "red", fill = "#69b3a2", se = TRUE)
+         }),
+         upper = list(continuous =wrap(annotate_r_squared))
+         )
 plot: [1, 1] [===>-------------------------------------------------------]  6% est: 0s  plot: [1, 2] [======>----------------------------------------------------] 12% est: 3s  plot: [1, 3] [==========>------------------------------------------------] 19% est: 4s  plot: [1, 4] [==============>--------------------------------------------] 25% est: 4s  plot: [2, 1] [=================>-----------------------------------------] 31% est: 4s `geom_smooth()` using formula = 'y ~ x'
 plot: [2, 2] [=====================>-------------------------------------] 38% est: 4s  plot: [2, 3] [=========================>---------------------------------] 44% est: 4s  plot: [2, 4] [=============================>-----------------------------] 50% est: 3s  plot: [3, 1] [================================>--------------------------] 56% est: 3s `geom_smooth()` using formula = 'y ~ x'
 plot: [3, 2] [====================================>----------------------] 62% est: 2s `geom_smooth()` using formula = 'y ~ x'
 plot: [3, 3] [========================================>------------------] 69% est: 2s  plot: [3, 4] [===========================================>---------------] 75% est: 2s  plot: [4, 1] [===============================================>-----------] 81% est: 1s `geom_smooth()` using formula = 'y ~ x'
 plot: [4, 2] [===================================================>-------] 88% est: 1s `geom_smooth()` using formula = 'y ~ x'
 plot: [4, 3] [======================================================>----] 94% est: 0s `geom_smooth()` using formula = 'y ~ x'
 plot: [4, 4] [===========================================================]100% est: 0s                                                                                         
> dev.off()
null device 
          1 

> ##TODO: 1: Package `magick` is required to draw images. Image not drawn.
> 
> #=======
> #TODO: REVISAR. Error in 1:dim(data)[2] : argument of length 0
> #=======
> ## REVISION: Deberian arreglarse todos los problemas si se corre completo el objetivo 5.1

### [Step 14/17] Running: scripts_fv/OBJETIVO_5.5.GráficoG_M.R ###


> ##########################################################################################################################################################
> #########Project 111160402: Cultural phylogenetics and coevolution of wealth inheritance and land tenure norms in agropastoralist communities.############
> ##########################################################################################################################################################
> 
> #### OBJETIVO 5 ####
> ### Part 5 ###
> ### To plot over tips of the resulting trees the estimated values of each trait, and compute the most likely values for each at the internal nodes ###
> ##IMPORTANTE: CORRER LOS SCRIPTS DE LOS OBJETIVOS 2 y 4 ##
> 
> #### Cargar paquetes y librerias ####
> library(ape)

> library(dplyr)

> library(dendextend)

> library(phytools)

> library(ggplot2)

> ################################################################################
> ######################## Comunidades muestreadas ###############################
> ################################################################################
> # Cluster
> df_tree <- as.data.frame(cophenetic.phylo(consensus_tree))

> #=======
> #TODO: REVISAR. Error in compute.brlen(x, 1) : object "phy" is not of class "phylo"
> #In addition: Warning message:
> #  In dist.nodes(x) : the tree has no branch length: fixing them to one.
> # AL PARECER ESTE ES UN PROBLEMA RECURRENTE EN VARIAS PARTES
> #=======
> 
> df_tree <- na.omit(df_tree)

> df_tree <- as.data.frame(lapply(df_tree, as.numeric))

> df_tree_scaled <- scale(df_tree)

> df_tree_scaled_numeric <- as.data.frame(df_tree_scaled)  # Asegúrate de que sea un data frame de valores numéricos

> kmeans_result <-kmeans(df_tree_scaled_numeric, centers = 3, iter.max = 100, nstart = 100)

> Cluster <- as.factor(c(kmeans_result$cluster))

> names(Cluster) <- colnames(kmeans_result$centers)

> # Crear una tabla de clusters
> clusters_table <- data.frame(tip.label = names(Cluster), cluster = Cluster)

> ## Necesito que en el eje x estén los clados promediados ##
> ## En el eje y1 deben estar los valores de G y en ele eje y2 los valores de M ##
> ################################## G ###########################################
> # Cluster
> clusters_table
                                    tip.label cluster
EL_DIVISADERO                   EL_DIVISADERO       1
EL_ALTAR                             EL_ALTAR       1
MANQUEHUA                           MANQUEHUA       3
PUNITAQUI                           PUNITAQUI       2
RINCONADA_DE_PUNITAQUI RINCONADA_DE_PUNITAQUI       1
BARRAZA                               BARRAZA       2
CANELILLA_OVALLE             CANELILLA_OVALLE       3
CANELA_BAJA                       CANELA_BAJA       2
LA_CALERA                           LA_CALERA       2
EL_ESPINAL                         EL_ESPINAL       3
GUALLIGUAICA                     GUALLIGUAICA       1
HUENTELAUQUEN                   HUENTELAUQUEN       2
CASTILLO_MAL_PASO           CASTILLO_MAL_PASO       2
MONTE_PATRIA                     MONTE_PATRIA       2
LA_POLVADA                         LA_POLVADA       1

> # Tree
> G_tree <- read.tree(text = "(((((((GUALLIGUAICA:0.127973,LA_POLVADA:0.127973)[&CI={-0.0521,0.128952},ancstate={0.038426}]:0.123261,EL_DIVISADERO:0.251235)[&CI={-0.000347,0.225242},ancstate={0.112448}]:0.142584,RINCONADA_DE_PUNITAQUI:0.393819)[&CI={0.054363,0.308255},ancstate={0.181309}]:0.077413,EL_ALTAR:0.471233)[&CI={0.057315,0.325597},ancstate={0.191456}]:0.163097,CANELILLA_OVALLE:0.634329)[&CI={0.1019,0.402365},ancstate={0.252132}]:0.084733,MANQUEHUA:0.719062)[&CI={0.092656,0.411103},ancstate={0.251879}]:0.280938,((((((CANELA_BAJA:0.169277,CASTILLO_MAL_PASO:0.169277)[&CI={0.138494,0.305502},ancstate={0.221998}]:0.011386,PUNITAQUI:0.180663)[&CI={0.144077,0.31042},ancstate={0.227248}]:0.02304,MONTE_PATRIA:0.203702)[&CI={0.154424,0.33238},ancstate={0.243402}]:0.125087,BARRAZA:0.328789)[&CI={0.181639,0.41432},ancstate={0.29798}]:0.069566,LA_CALERA:0.398355)[&CI={0.190979,0.44785},ancstate={0.319415}]:0.215934,HUENTELAUQUEN:0.614289)[&CI={0.111258,0.43888},ancstate={0.275069}]:0.385711,EL_ESPINAL:1)[&CI={0.080061,0.448753},ancstate={0.264407}];")

> #TODO: Found more than one class "phylo" in cache; using the first, from namespace 'TreeTools'
> #Also defined by ‘tidytree’
> 
> terminal_nodes <-G_tree$tip.label

> terminal_nodes
 [1] "GUALLIGUAICA"           "LA_POLVADA"             "EL_DIVISADERO"         
 [4] "RINCONADA_DE_PUNITAQUI" "EL_ALTAR"               "CANELILLA_OVALLE"      
 [7] "MANQUEHUA"              "CANELA_BAJA"            "CASTILLO_MAL_PASO"     
[10] "PUNITAQUI"              "MONTE_PATRIA"           "BARRAZA"               
[13] "LA_CALERA"              "HUENTELAUQUEN"          "EL_ESPINAL"            

> #Path
> paths <- nodepath(G_tree,1:15)

> paths
[[1]]
[1] 16 17 18 19 20 21 22  1

[[2]]
[1] 16 17 18 19 20 21 22  2

[[3]]
[1] 16 17 18 19 20 21  3

[[4]]
[1] 16 17 18 19 20  4

[[5]]
[1] 16 17 18 19  5

[[6]]
[1] 16 17 18  6

[[7]]
[1] 16 17  7

[[8]]
[1] 16 23 24 25 26 27 28  8

[[9]]
[1] 16 23 24 25 26 27 28  9

[[10]]
[1] 16 23 24 25 26 27 10

[[11]]
[1] 16 23 24 25 26 11

[[12]]
[1] 16 23 24 25 12

[[13]]
[1] 16 23 24 13

[[14]]
[1] 16 23 14

[[15]]
[1] 16 15


> # Extraer los estados ancestrales
> G_anc_states <- gvc$anc$ace

> G_anc_states
        16         17         18         19         20         21         22         23 
0.26495954 0.26495954 0.30453185 0.25225583 0.25059075 0.18933150 0.17254450 0.14494536 
        24         25         26         27         28         29 
0.04500488 0.30549564 0.29733564 0.24138233 0.20384319 0.20384319 

> #Extraer estados actuales
> G_trait_vector <- setNames(G_trait$G, rownames(G_trait))

> print(G_trait_vector)
               BARRAZA            CANELA_BAJA       CANELILLA_OVALLE 
          3.401253e-01           1.126470e-01           4.900130e-01 
     CASTILLO_MAL_PASO               EL_ALTAR          EL_DIVISADERO 
          2.532922e-01           7.791460e-02           1.419874e-01 
            EL_ESPINAL           GUALLIGUAICA          HUENTELAUQUEN 
          2.813552e-01           0.000000e+00           1.658951e-01 
             LA_CALERA             LA_POLVADA              MANQUEHUA 
          5.239689e-01           7.105427e-15           2.176690e-01 
          MONTE_PATRIA              PUNITAQUI RINCONADA_DE_PUNITAQUI 
          2.973456e-01           1.838879e-01           3.198819e-01 

> #Crear un data.frame
> result_list <- list() 

> # Iterar sobre cada nodo terminal y su ruta desde la raíz
> for (i in seq_along(paths)) {
+   # Nodo terminal y ruta de nodos desde la raíz hasta el nodo terminal
+   tip <- terminal_nodes[i]
+   path <- paths[[i]]
+   
+   # Obtener el cluster del nodo terminal desde clusters_table
+   cluster <- clusters_table[clusters_table$tip.label == tip, "cluster"]
+   
+   # Obtener el valor de G para el nodo terminal desde G_trait
+   G_value_terminal <- G_trait_vector[tip]
+   
+   # Agregar el nodo terminal al dataframe con su valor de G y su cluster
+   result_list <- append(result_list, list(data.frame(
+     Node = path[length(path)],   # Último nodo en la ruta, que es el terminal
+     Cluster = cluster,
+     G_value = G_value_terminal
+   )))
+   
+   # Agregar cada nodo ancestral en el path (excluyendo el terminal)
+   for (node in head(path, -1)) {  # head(path, -1) excluye el último nodo terminal
+     # Asignar el valor de G para el nodo ancestral
+     G_value <- ifelse(as.character(node) %in% names(G_anc_states), G_anc_states[as.character(node)], NA)
+     
+     # Agregar el nodo ancestral, cluster y valor de G al resultado
+     result_list <- append(result_list, list(data.frame(
+       Node = node,
+       Cluster = cluster,  # Asignamos el mismo cluster del terminal
+       G_value = G_value
+     )))
+   }
+ }

> # Combinar todos los dataframes en uno solo
> result_df_G <- do.call(rbind, result_list)

> # Para nodos ancestrales, asegurarse de asignar clusters
> result_df_G <- result_df_G[!duplicated(result_df_G$Node), ]  # Eliminar filas duplicadas de cada nodo

> # Ver el dataframe resultante
> row.names(result_df_G)<-NULL

> ################################## M ###########################################
> paths
[[1]]
[1] 16 17 18 19 20 21 22  1

[[2]]
[1] 16 17 18 19 20 21 22  2

[[3]]
[1] 16 17 18 19 20 21  3

[[4]]
[1] 16 17 18 19 20  4

[[5]]
[1] 16 17 18 19  5

[[6]]
[1] 16 17 18  6

[[7]]
[1] 16 17  7

[[8]]
[1] 16 23 24 25 26 27 28  8

[[9]]
[1] 16 23 24 25 26 27 28  9

[[10]]
[1] 16 23 24 25 26 27 10

[[11]]
[1] 16 23 24 25 26 11

[[12]]
[1] 16 23 24 25 12

[[13]]
[1] 16 23 24 13

[[14]]
[1] 16 23 14

[[15]]
[1] 16 15


> # Extraer los estados ancestrales
> M_anc_states <- mvc$anc$ace

> M_anc_states
        16         17         18         19         20         21         22         23 
0.43274181 0.43274181 0.38208029 0.34545397 0.32982700 0.21643444 0.18156637 0.15343631 
        24         25         26         27         28         29 
0.04764128 0.38340490 0.36599624 0.27892533 0.20348571 0.20348571 

> #Extraer estados actuales
> M_trait_vector <- setNames(M_trait$M, rownames(M_trait))

> print(M_trait_vector)
               BARRAZA            CANELA_BAJA       CANELILLA_OVALLE 
            0.40000000             0.11279230             0.59813084 
     CASTILLO_MAL_PASO               EL_ALTAR          EL_DIVISADERO 
            0.17592593             0.03053435             0.15789474 
            EL_ESPINAL           GUALLIGUAICA          HUENTELAUQUEN 
            1.00000000             0.00000000             0.14854111 
             LA_CALERA             LA_POLVADA              MANQUEHUA 
            0.73270440             0.00000000             0.17034700 
          MONTE_PATRIA              PUNITAQUI RINCONADA_DE_PUNITAQUI 
            0.41101695             0.19774011             0.25433526 

> #Crear un data.frame
> result_list <- list() 

> # Iterar sobre cada nodo terminal y su ruta desde la raíz
> for (i in seq_along(paths)) {
+   # Nodo terminal y ruta de nodos desde la raíz hasta el nodo terminal
+   tip <- terminal_nodes[i]
+   path <- paths[[i]]
+   # Obtener el cluster del nodo terminal desde clusters_table
+   cluster <- clusters_table[clusters_table$tip.label == tip, "cluster"]
+   
+   # Obtener el valor de M para el nodo terminal desde M_trait
+   M_value_terminal <- M_trait_vector[tip]
+   
+   # Agregar el nodo terminal al dataframe con su valor de M y su cluster
+   result_list <- append(result_list, list(data.frame(
+     Node = path[length(path)],   # Último nodo en la ruta, que es el terminal
+     Cluster = cluster,
+     M_value = M_value_terminal
+   )))
+   
+   # Agregar cada nodo ancestral en el path (excluyendo el terminal)
+   for (node in head(path, -1)) {  # head(path, -1) excluye el último nodo terminal
+     # Asignar el valor de M para el nodo ancestral
+     M_value <- ifelse(as.character(node) %in% names(M_anc_states), M_anc_states[as.character(node)], NA)
+     # Agregar el nodo ancestral, cluster y valor de M al resultado
+     result_list <- append(result_list, list(data.frame(
+       Node = node,
+       Cluster = cluster,
+       M_value = M_value
+     )))
+   }
+ }

> # Combinar todos los dataframes en uno solo
> result_df_M <- do.call(rbind, result_list)

> # Para nodos ancestrales, asegurarse de asignar clusters
> result_df_M <- result_df_M[!duplicated(result_df_M$Node), ]  # Eliminar filas duplicadas de cada nodo

> # Ver el dataframe resultante
> row.names(result_df_M)<-NULL

> ################################## G-M #########################################
> #Dataframe de ambos
> result_df_GM<-merge(result_df_G, 
+                     result_df_M,
+                     all.x = T,
+                     by = c("Node", "Cluster"))

> result_df_GM
   Node Cluster      G_value    M_value
1     1       1 0.000000e+00 0.00000000
2    10       2 1.838879e-01 0.19774011
3    11       2 2.973456e-01 0.41101695
4    12       2 3.401253e-01 0.40000000
5    13       2 5.239689e-01 0.73270440
6    14       2 1.658951e-01 0.14854111
7    15       3 2.813552e-01 1.00000000
8    16       1 2.649595e-01 0.43274181
9    17       1 2.649595e-01 0.43274181
10   18       1 3.045318e-01 0.38208029
11   19       1 2.522558e-01 0.34545397
12    2       1 7.105427e-15 0.00000000
13   20       1 2.505908e-01 0.32982700
14   21       1 1.893315e-01 0.21643444
15   22       1 1.725445e-01 0.18156637
16   23       2 1.449454e-01 0.15343631
17   24       2 4.500488e-02 0.04764128
18   25       2 3.054956e-01 0.38340490
19   26       2 2.973356e-01 0.36599624
20   27       2 2.413823e-01 0.27892533
21   28       2 2.038432e-01 0.20348571
22    3       1 1.419874e-01 0.15789474
23    4       1 3.198819e-01 0.25433526
24    5       1 7.791460e-02 0.03053435
25    6       3 4.900130e-01 0.59813084
26    7       3 2.176690e-01 0.17034700
27    8       2 1.126470e-01 0.11279230
28    9       2 2.532922e-01 0.17592593

> max_path_length<-max(sapply(paths,length))

> max_path_length
[1] 8

> extended_paths <- lapply(paths, function(path){
+   if (length(path)<max_path_length){
+     c(path,rep(tail(path,1),max_path_length - length(path)))
+   }else{
+     path
+       }
+ })

> extended_paths
[[1]]
[1] 16 17 18 19 20 21 22  1

[[2]]
[1] 16 17 18 19 20 21 22  2

[[3]]
[1] 16 17 18 19 20 21  3  3

[[4]]
[1] 16 17 18 19 20  4  4  4

[[5]]
[1] 16 17 18 19  5  5  5  5

[[6]]
[1] 16 17 18  6  6  6  6  6

[[7]]
[1] 16 17  7  7  7  7  7  7

[[8]]
[1] 16 23 24 25 26 27 28  8

[[9]]
[1] 16 23 24 25 26 27 28  9

[[10]]
[1] 16 23 24 25 26 27 10 10

[[11]]
[1] 16 23 24 25 26 11 11 11

[[12]]
[1] 16 23 24 25 12 12 12 12

[[13]]
[1] 16 23 24 13 13 13 13 13

[[14]]
[1] 16 23 14 14 14 14 14 14

[[15]]
[1] 16 15 15 15 15 15 15 15


> calc_means<-function(nodos,df) {
+   #Extraer valores de G y M
+   G_values <- df$G_value[df$Node %in% nodos]
+   M_values <- df$M_value[df$Node %in% nodos]
+   #Calcular promedio- NA == 0
+   G_mean<-median(G_values)
+   M_mean<-median(M_values)
+   G_mean<-ifelse(is.na(G_values),0,G_values)
+   M_mean<-ifelse(is.na(M_values),0,M_values)
+   return(data.frame(G_mean=G_mean,M_mean=M_mean))
+ }

> levels_means<-list()

> for(level in 1:max_path_length){
+   nodos_at_level<-sapply(extended_paths, function(path)path[level])
+   mean_2<-calc_means(nodos_at_level,result_df_GM)
+   levels_means[[level]]<-data.frame(Level=level,G_mean=mean_2$G_mean,M_mean=mean_2$M_mean)
+ }

> level_means_df<- do.call(rbind,levels_means)

> print(level_means_df)
   Level       G_mean     M_mean
1      1 2.649595e-01 0.43274181
2      2 2.813552e-01 1.00000000
3      2 2.649595e-01 0.43274181
4      2 1.449454e-01 0.15343631
5      3 1.658951e-01 0.14854111
6      3 2.813552e-01 1.00000000
7      3 3.045318e-01 0.38208029
8      3 4.500488e-02 0.04764128
9      3 2.176690e-01 0.17034700
10     4 5.239689e-01 0.73270440
11     4 1.658951e-01 0.14854111
12     4 2.813552e-01 1.00000000
13     4 2.522558e-01 0.34545397
14     4 3.054956e-01 0.38340490
15     4 4.900130e-01 0.59813084
16     4 2.176690e-01 0.17034700
17     5 3.401253e-01 0.40000000
18     5 5.239689e-01 0.73270440
19     5 1.658951e-01 0.14854111
20     5 2.813552e-01 1.00000000
21     5 2.505908e-01 0.32982700
22     5 2.973356e-01 0.36599624
23     5 7.791460e-02 0.03053435
24     5 4.900130e-01 0.59813084
25     5 2.176690e-01 0.17034700
26     6 2.973456e-01 0.41101695
27     6 3.401253e-01 0.40000000
28     6 5.239689e-01 0.73270440
29     6 1.658951e-01 0.14854111
30     6 2.813552e-01 1.00000000
31     6 1.893315e-01 0.21643444
32     6 2.413823e-01 0.27892533
33     6 3.198819e-01 0.25433526
34     6 7.791460e-02 0.03053435
35     6 4.900130e-01 0.59813084
36     6 2.176690e-01 0.17034700
37     7 1.838879e-01 0.19774011
38     7 2.973456e-01 0.41101695
39     7 3.401253e-01 0.40000000
40     7 5.239689e-01 0.73270440
41     7 1.658951e-01 0.14854111
42     7 2.813552e-01 1.00000000
43     7 1.725445e-01 0.18156637
44     7 2.038432e-01 0.20348571
45     7 1.419874e-01 0.15789474
46     7 3.198819e-01 0.25433526
47     7 7.791460e-02 0.03053435
48     7 4.900130e-01 0.59813084
49     7 2.176690e-01 0.17034700
50     8 0.000000e+00 0.00000000
51     8 1.838879e-01 0.19774011
52     8 2.973456e-01 0.41101695
53     8 3.401253e-01 0.40000000
54     8 5.239689e-01 0.73270440
55     8 1.658951e-01 0.14854111
56     8 2.813552e-01 1.00000000
57     8 7.105427e-15 0.00000000
58     8 1.419874e-01 0.15789474
59     8 3.198819e-01 0.25433526
60     8 7.791460e-02 0.03053435
61     8 4.900130e-01 0.59813084
62     8 2.176690e-01 0.17034700
63     8 1.126470e-01 0.11279230
64     8 2.532922e-01 0.17592593

> averages <- level_means_df %>%
+   group_by(Level) %>%
+   summarise(across(everything(),median))

> averages
# A tibble: 8 × 3
  Level G_mean M_mean
  <int>  <dbl>  <dbl>
1     1  0.265  0.433
2     2  0.265  0.433
3     3  0.218  0.170
4     4  0.281  0.383
5     5  0.281  0.366
6     6  0.281  0.279
7     7  0.218  0.203
8     8  0.218  0.176

> hist_data<-ggplot_build(ggplot(averages, aes(x = Level)) + 
+   geom_histogram(binwidth = 0.5))$data[[1]]

> y_max <-max(hist_data$count)

> # Crear el gráfico
> ggplot(averages, aes(x = Level)) + 
+   geom_point(aes(y=G_mean), color="blue") + # Puntos para G
+   geom_line(aes(y=G_mean), color="blue",linetype="dashed")+ #Línea para G
+   geom_point(aes(y=M_mean), color="red") + # Puntos para M
+   geom_line(aes(y=M_mean), color="red",linetype="dashed")+ #Línea para M
+   scale_y_continuous(
+     name = "G",
+     sec.axis = sec_axis(~.*2,name = "M")
+     ) +
+   annotate("text",x=mean(averages$Level),y=mean(averages$G_mean),label="G trait",hjust=0.2,vjust=-4.2,size=5,color="blue")+
+   annotate("text",x=mean(averages$Level),y=mean(averages$M_mean),label="M trait",hjust=0.1,vjust=-7,size=5,color="red")+
+   labs(
+     x="Number of clades",
+     title = "The G and M traits of the tree of sampled communities",
+   ) +
+   theme_classic() 

> ########################## Líneas por cluster ##################################
> # Filtrar el nodo 16 (raiz)
> #node_16_G <- result_df_G[result_df_G$Node == 16, ]
> #node_16_M <- result_df_M[result_df_M$Node == 16, ]
> # Crear tres copias cambiando el valor del Cluster
> #node_16_cluster_1G <- node_16_G
> #node_16_cluster_1G$Cluster <- 1
> 
> #node_16_cluster_2G <- node_16_G
> #node_16_cluster_2G$Cluster <- 2
> 
> #node_16_cluster_3G <- node_16_G
> #node_16_cluster_3G$Cluster <- 3
> 
> #node_16_cluster_1M <- node_16_M
> #node_16_cluster_1M$Cluster <- 1
> 
> #node_16_cluster_2M <- node_16_M
> #node_16_cluster_2M$Cluster <- 2
> 
> #node_16_cluster_3M <- node_16_M
> #node_16_cluster_3M$Cluster <- 3
> 
> # Unir las filas modificadas al dataframe original
> #result_df_G <- rbind(result_df_G, node_16_cluster_1G, node_16_cluster_2G, node_16_cluster_3G)
> #result_df_G
> #result_df_M <- rbind(result_df_M, node_16_cluster_1M,node_16_cluster_2M, node_16_cluster_3M)
> #result_df_M
> #Eliminar duplicados
> #result_df_G <- result_df_G %>% distinct()
> #result_df_M <- result_df_M %>% distinct()
> 
> #Dataframe de ambos
> #result_df_GM <- merge(result_df_G, 
> #                      result_df_M, 
> #                      all.x = TRUE, 
> #                      by = c("Node", "Cluster"))
> 
> #result_df_GM
> #max_path_length<-max(sapply(paths,length))
> #max_path_length
> #extended_paths <- lapply(paths, function(path){
> #  if (length(path)<max_path_length){
> #    c(path,rep(tail(path,1),max_path_length - length(path)))
> #  }else{
> #    path
> #  }
> #})
> #extended_paths
> 
> #calc_means <- function(nodos, df) {
>   # Filtrar los datos para los nodos en el nivel actual
> #  df_filtered <- df %>% filter(Node %in% nodos)
>   
>   # Calcular promedios por cluster
> #  G_means <- df_filtered %>%
> #    group_by(Cluster) %>%
> #    summarise(G_mean = median(G_value, na.rm = TRUE), .groups = 'drop')
>   
> #  M_means <- df_filtered %>%
> #    group_by(Cluster) %>%
> #    summarise(M_mean = median(M_value, na.rm = TRUE), .groups = 'drop')
>   
>   # Combinar promedios de G y M para cada cluster
> #  cluster_means <- merge(G_means, M_means, by = "Cluster", all = TRUE)
>   
>   # Llenar NAs con 0
> #  cluster_means[is.na(cluster_means)] <- 0
>   
> #  return(cluster_means)
> #}
> 
> #levels_means <- list()
> #for (level in 1:max_path_length) {
>   # Obtener nodos en el nivel actual
> #  nodos_at_level <- sapply(extended_paths, function(path) path[level])
>   
>   # Calcular los promedios para cada cluster en este nivel
> #  mean_data <- calc_means(nodos_at_level, result_df_GM)
>   
>   # Agregar la columna de nivel
> #  mean_data$Level <- level
>   
>   # Almacenar resultados en la lista
> #  levels_means[[level]] <- mean_data
> #}
> 
> # Convertir lista en dataframe
> #level_means_df <- do.call(rbind, levels_means)
> #print(level_means_df)
> 
> # Calcular promedio general por nivel
> #averages_cluster <- level_means_df %>%
> #  group_by(Level, Cluster) %>%
> #  summarise(across(starts_with("G_mean"), median, na.rm = TRUE),
> #            across(starts_with("M_mean"), median, na.rm = TRUE),
> #            .groups = 'drop')
> #averages_cluster
> 
> # Crear el gráfico con ggplot2
> #ggplot(averages_cluster) +
>   # Línea continua para G_mean
> #  geom_line(aes(x = Level, y = G_mean, color = factor(Cluster), linetype = "G_mean", group = Cluster), 
> #            size = 1) +
>   # Línea punteada para M_mean
> #  geom_line(aes(x = Level, y = M_mean, color = factor(Cluster), linetype = "M_mean", group = Cluster), 
> #            size = 1) +
>   # Configuración de colores
> #  scale_color_manual(values = c("blue", "red", "green")) +
>   # Configuración de tipos de línea
> #  scale_linetype_manual(values = c("G_mean" = "solid", "M_mean" = "dotted")) +
> #  labs(
> #    title = "The G and M traits of the tree of sampled communities",
> #    x = "Number of clades",
> #    y = "G mean",
> #    color = "Cluster",
> #    linetype = "Trait"
> #  ) +
>   # Agregar eje secundario para M
> #  scale_y_continuous(
> #    sec.axis = sec_axis(~ ., name = "M mean")
> #  ) +
> #  theme_classic()
>  
> ################################################################################
> ########################## Todas las comunidades ###############################
> ################################################################################
> # Cluster
> #df_tree_total <- as.data.frame(as.matrix(surname_matrix))
> #df_tree_total <- as.data.frame(lapply(df_tree_total, as.numeric))
> #df_tree_scaled_t <- scale(df_tree_total)
> #km <- kmeans(df_tree_scaled_t, centers = 2, iter.max = 100, nstart = 100)
> #Cluster <- as.factor(c(km$cluster))
> #names(Cluster) <- colnames(km$centers)
> 
> # Crear una tabla de clusters
> #clusters_table <- data.frame(tip.label = names(Cluster), cluster = Cluster)
> #clusters_table
> 
> # Tree
> terminal_nodes <-gvt$obj$tree$tip.label

> terminal_nodes
  [1] "AGUA_FRIA_ALTA"                      "AGUA_FRIA_BAJA"                     
  [3] "ALCONES"                             "ALGARROBAL_Y_DESPENSA"              
  [5] "ALGARROBO_DE_HORNILLOS"              "ALHUEMILLA_LAS_PALMAS"              
  [7] "ALVAREZ_DE_VALLE_HERMOSO"            "ANGOSTURA_DE_GALVEZ"                
  [9] "ATELCURA"                            "ATUHUAICO"                          
 [11] "BARRAZA"                             "BLAS_Y_BULRREME"                    
 [13] "BUENOS_AIRES_DE_PUNILLA"             "CABRA_CORRAL"                       
 [15] "CALDERA_Y_DAMAS"                     "CANELA_ALTA"                        
 [17] "CANELA_BAJA"                         "CANELILLA_CANELA"                   
 [19] "CANELILLA_OVALLE"                    "CARCAMO"                            
 [21] "CARRIZAL_Y_LAGUNA_DE_SERON"          "CARRIZO,_MENDOZA_Y_ROMERO"          
 [23] "CASTILLO_MAL_PASO"                   "CERRO_BLANCO"                       
 [25] "CERRO_GIGANTE"                       "CHACARILLAS"                        
 [27] "CHALINGA"                            "CHANCHOQUI"                         
 [29] "CHAPE_Y_CHACAY"                      "CHELLES"                            
 [31] "CHILECITO_Y_CHUAPA"                  "COIPO_Y_CUYUNCAVI"                  
 [33] "COLLIGUAY"                           "CORDILLERA_DE_CARRIZAL"             
 [35] "CUARTO_CAJON"                        "CUESTA_EL_MANZANO"                  
 [37] "CUZCUZ"                              "DAIN_Y_CORTADERA"                   
 [39] "DE_ARAYA"                            "DE_ORREGO"                          
 [41] "DIAZ_Y_OCARANZA"                     "DOS_RIOS"                           
 [43] "EL_ALMENDRO"                         "EL_ALTAR"                           
 [45] "EL_ATAJO"                            "EL_CHACAY"                          
 [47] "EL_CUYANO"                           "EL_DIVISADERO"                      
 [49] "EL_DURAZNO"                          "EL_ESPINAL"                         
 [51] "EL_ESPINO"                           "EL_MACANO"                          
 [53] "EL_OLIVO"                            "EL_PANGUE"                          
 [55] "EL_PERAL_OJO_DE_AGUA"                "EL_POTRERO_ALTO"                    
 [57] "EL_POTRERO_DE_HUATULAME"             "EL_ROMERAL"                         
 [59] "EL_TOME"                             "ESTERO_DERECHO"                     
 [61] "FERNANDEZ_ANGEL_Y_OTROS"             "FERNANDEZ_Y_VELIZ"                  
 [63] "FERNANDO_ALVAREZ"                    "FLORES_Y_SAAVEDRA"                  
 [65] "FUNDIDA_NORTE"                       "FUNDIDA_SUR"                        
 [67] "GUALLIGUAICA"                        "HIGUERITAS_UNIDAS"                  
 [69] "HUAMPULLA"                           "HUANA"                              
 [71] "HUAPILLAS_MOLLAQUITAS"               "HUASCOALTINOS"                      
 [73] "HUENTELAUQUEN"                       "HUINCHIGUALLEGO"                    
 [75] "INGA_PICHASCA"                       "JARA_O_LAJA"                        
 [77] "JARILLA_Y_AZOGUE"                    "JIMENEZ_Y_TAPIA"                    
 [79] "LA_CALERA"                           "LA_CAPILLA"                         
 [81] "LA_CEBADA"                           "LA_CISTERNA"                        
 [83] "LA_COIPA"                            "LA_COLORADA_DE_AGUILERA_Y_SARMIENTO"
 [85] "LA_HERRADURA"                        "LA_HOYADA"                          
 [87] "LA_LEONA"                            "LA_ORTIGA"                          
 [89] "LA_PLATA"                            "LA_POLVADA"                         
 [91] "LA_SAUCERA"                          "LA_TRANQUITA"                       
 [93] "LA_VERDIONA"                         "LAGUNA_VERDE"                       
 [95] "LAGUNILLAS_GALLEGUILLOS_DEL_VALLE"   "LAS_BARRANCAS"                      
 [97] "LAS_BATEAS"                          "LAS_CARDAS"                         
 [99] "LAS_DAMAS"                           "LAS_MINILLAS"                       
[101] "LAS_PAREDES"                         "LAS_ROJAS_DE_CUTUN"                 
[103] "LAS_TAZAS"                           "LAS_TRANCAS_DE_PUCLARO"             
[105] "LITIPAMPA"                           "LORENZO_ARAYA"                      
[107] "LORENZO_PERALTA_DE_PUNILLA"          "LOS_ALGODONES"                      
[109] "LOS_ANGELES"                         "LOS_CERRILLOS"                      
[111] "LOS_CHOROS"                          "LOS_CLONQUIS"                       
[113] "LOS_HOYOS_Y_EL_EMPEDRADO"            "LOS_LAVADEROS"                      
[115] "LOS_MAITENES"                        "LOS_MAITENES_DE_SERON"              
[117] "LOS_MORALES"                         "LOS_MOZOS"                          
[119] "LOS_POZOS"                           "LOS_TAPIAS"                         
[121] "LOS_TOMES"                           "LOS_TRIGOS"                         
[123] "MAJADA_BLANCA"                       "MANQUEHUA"                          
[125] "MAQUI_LOS_PALQUIS"                   "MIALQUI"                            
[127] "MINCHA_NORTE"                        "MINCHA_SUR"                         
[129] "MONTE_PATRIA"                        "MOVILO"                             
[131] "OLLA_DE_CALDERA"                     "ORURO"                              
[133] "PEJERREYES"                          "PIEDRA_LISA"                        
[135] "PIEDRAS_BLANCAS"                     "POTRERILLO_ALTO"                    
[137] "PULPICA_ALTO"                        "PULPICA_BAJO"                       
[139] "PUNITAQUI"                           "QUEBRADA_DE_COLLIGUACITO"           
[141] "QUEBRADA_DE_PAIHUANO_Y_SAN_ANDRES"   "QUEBRADA_DE_TALCA"                  
[143] "QUEBRADA_DE_TULAHUEN"                "QUEBRADA_HONDA"                     
[145] "QUEBRADA_LA_ARENA"                   "QUEBRADA_LAS_MINILLAS"              
[147] "QUEBRADA_LAS_MOLLACAS"               "QUEBRADA_LOS_LOROS"                 
[149] "QUITALLACO"                          "RAMADILLA"                          
[151] "RAPEL"                               "RAPELCILLO"                         
[153] "RINCONADA_DE_PUNITAQUI"              "RIO_COLORADO"                       
[155] "ROMERALCILLO"                        "SALALA"                             
[157] "SAN_ISIDRO"                          "SAN_LORENZO"                        
[159] "SOCOS"                               "TOTORAL"                            
[161] "TOTORALILLO"                         "TUNGA_NORTE"                        
[163] "TUNGA_SUR"                           "UCHUMI-DIAGUITAS"                   
[165] "VADO_HONDO"                          "VALDIVIA_DE_PUNILLA"                
[167] "VALLECITO_Y_RIO_SECO"                "VARILLAR"                           
[169] "VIVANCO"                             "YERBA_LOCA"                         

> #Path
> paths <- nodepath(gvt$obj$tree,1:170)

> paths
[[1]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 249 302 317   1

[[2]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 249 302 317 329   2

[[3]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 241
[22] 313   3

[[4]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291 301 304   4

[[5]]
[1] 171 172 173 175 177 179 181 182   5

[[6]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 268 298 312 332
[22]   6

[[7]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199 207 243 248 269 303 324   7

[[8]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 192 197   8

[[9]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199 207 243 248 269 303   9

[[10]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 213 279  10

[[11]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 245
[22]  11

[[12]]
[1] 171 172 173 175 176 194 216  12

[[13]]
[1] 171 172 173 175 177 178 183  13

[[14]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 250 297 331  14

[[15]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 196 202 218 234  15

[[16]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 223 251 273  16

[[17]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 278 280 290  17

[[18]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 223 251 273  18

[[19]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253  19

[[20]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 306 334  20

[[21]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271 288 293 327 336 338  21

[[22]]
[1] 171 172 173 175 176 193 217  22

[[23]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 300 315 319  23

[[24]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 306  24

[[25]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271 288 293 326  25

[[26]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266 274 283  26

[[27]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 278 280 290  27

[[28]]
[1] 171 172 173 175 176 193 217  28

[[29]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 192 198 238  29

[[30]]
[1] 171 172 173 174 210 237  30

[[31]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291 301 305  31

[[32]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 241
[22] 313  32

[[33]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267  33

[[34]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 300 315 318  34

[[35]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 268  35

[[36]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 196 202 218  36

[[37]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 223  37

[[38]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 262 265 285 310 330  38

[[39]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 235 258
[22] 289  39

[[40]]
[1] 171  40

[[41]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291  41

[[42]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 278  42

[[43]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195  43

[[44]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291 301 305 321 328  44

[[45]]
[1] 171 172 173 175 176 193  45

[[46]]
[1] 171 172 173 175 176 194 215  46

[[47]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266  47

[[48]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264  48

[[49]]
[1] 171 172 173 175 176 194 216  49

[[50]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 220  50

[[51]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199 207 243 248 269 303 324  51

[[52]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 235 258
[22]  52

[[53]]
[1] 171 172 173 175 177 178 184  53

[[54]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 220 272 295  54

[[55]]
[1] 171 172 173 175 177 179 180  55

[[56]]
[1] 171 172 173 175 177 178 184 222  56

[[57]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 268 298 312 333
[22] 335  57

[[58]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 306 334 337  58

[[59]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 220 272  59

[[60]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 262 265 286  60

[[61]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199 207  61

[[62]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 278 280  62

[[63]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 307 309 311  63

[[64]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 232
[22]  64

[[65]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 262 265 285 310  65

[[66]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 262 265 285 310 330  66

[[67]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 249  67

[[68]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266 274 284 299  68

[[69]]
[1] 171 172 173 175 176 194 215  69

[[70]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291 301 305 321 328  70

[[71]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271 288 293 326  71

[[72]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206  72

[[73]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 262  73

[[74]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 196 201 244  74

[[75]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 235 257
[22]  75

[[76]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 213 279  76

[[77]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 213  77

[[78]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266 274 284 299 316 322  78

[[79]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 262 265 285  79

[[80]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 250  80

[[81]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 268 298 312 333
[22] 335  81

[[82]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 281  82

[[83]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 241
[22]  83

[[84]]
[1] 171 172 173 175 177 179 181 182  84

[[85]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 307 308  85

[[86]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208  86

[[87]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 250 297  87

[[88]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 292 296  88

[[89]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271  89

[[90]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199  90

[[91]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 306 334 337  91

[[92]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 239
[22] 320 339  92

[[93]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199 207 243  93

[[94]]
 [1] 171 172 173 175 177 179 180 185 186 225  94

[[95]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 196 202  95

[[96]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 249 302 317 329  96

[[97]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 254  97

[[98]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 307 309  98

[[99]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 220 272 295  99

[[100]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 100

[[101]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 250 297 331 101

[[102]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 192 197 102

[[103]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 103

[[104]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 192 198 238 275 104

[[105]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271 288 293 327 336 338 105

[[106]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 268 298 106

[[107]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 270 107

[[108]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291 301 304 323 108

[[109]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 260 109

[[110]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 254 110

[[111]]
 [1] 171 172 173 175 177 179 180 185 186 111

[[112]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 112

[[113]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 300 315 318 113

[[114]]
[1] 171 172 173 174 210 237 114

[[115]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 270 115

[[116]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271 288 293 327 336 116

[[117]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266 274 283 117

[[118]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 300 314 325 118

[[119]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 307 309 311 119

[[120]]
[1] 171 172 173 175 177 179 181 120

[[121]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 235 257
[22] 121

[[122]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 196 201 122

[[123]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199 207 243 248 269 123

[[124]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266 274 284 299 316 322 124

[[125]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291 301 304 323 125

[[126]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291 301 305 321 126

[[127]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 249 302 127

[[128]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 192 198 238 275 128

[[129]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 232
[22] 129

[[130]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 130

[[131]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 196 202 218 234 131

[[132]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 260 287 132

[[133]]
 [1] 171 172 173 175 177 179 180 185 187 133

[[134]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 134

[[135]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271 288 135

[[136]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 307 308 136

[[137]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 137

[[138]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 281 138

[[139]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266 274 284 299 316 139

[[140]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 239
[22] 140

[[141]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271 288 293 327 141

[[142]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 142

[[143]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 235 258
[22] 289 143

[[144]]
[1] 171 172 173 174 144

[[145]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 268 298 312 332
[22] 145

[[146]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 239
[22] 320 339 146

[[147]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 262 265 286 147

[[148]]
[1] 171 172 173 175 177 178 183 148

[[149]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 260 287 149

[[150]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 239
[22] 320 150

[[151]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 300 314 325 151

[[152]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 300 315 319 152

[[153]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266 274 284 153

[[154]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 268 298 312 333
[22] 154

[[155]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 300 314 155

[[156]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 245
[22] 156

[[157]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199 207 243 248 157

[[158]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 158

[[159]]
[1] 171 172 159

[[160]]
 [1] 171 172 173 175 177 179 180 185 186 225 160

[[161]]
[1] 171 172 173 174 210 161

[[162]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 162

[[163]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 192 198 163

[[164]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 164

[[165]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 292 165

[[166]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 223 251 166

[[167]]
[1] 171 172 173 175 177 178 184 222 167

[[168]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 196 201 244 168

[[169]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 292 296 169

[[170]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 170


> # Extraer los estados ancestrales
> G_anc_states <- gvt$anc$ace

> G_anc_states
       171        172        173        174        175        176        177        178 
0.11811683 0.11840475 0.12798707 0.14640683 0.12809278 0.13323442 0.12796359 0.13178576 
       179        180        181        182        183        184        185        186 
0.12741943 0.12211043 0.12758054 0.11190971 0.21294894 0.12344913 0.12156942 0.11863751 
       187        188        189        190        191        192        193        194 
0.12036829 0.11887525 0.11491738 0.11967715 0.12128591 0.12090900 0.13070224 0.14455498 
       195        196        197        198        199        200        201        202 
0.09866755 0.11372278 0.13149747 0.13892163 0.11975730 0.12427687 0.10774328 0.11343693 
       203        204        205        206        207        208        209        210 
0.12463498 0.12426975 0.12503983 0.12582687 0.13091769 0.13262767 0.05922463 0.18694861 
       211        212        213        214        215        216        217        218 
0.12106325 0.12549914 0.12427069 0.12959613 0.22819140 0.14068716 0.07151285 0.10062347 
       219        220        221        222        223        224        225        226 
0.13426162 0.14765987 0.13459785 0.02523743 0.11436714 0.13291510 0.06129407 0.12897426 
       227        228        229        230        231        232        233        234 
0.14051238 0.13998903 0.16380318 0.13977742 0.15049419 0.16255854 0.11429204 0.09483607 
       235        236        237        238        239        240        241        242 
0.12424065 0.12854936 0.22923714 0.15219777 0.16068433 0.12361268 0.25511262 0.15007197 
       243        244        245        246        247        248        249        250 
0.13811623 0.03750079 0.19843525 0.17782179 0.11457514 0.11921727 0.03377860 0.04093270 
       251        252        253        254        255        256        257        258 
0.11615286 0.14395525 0.15434606 0.04112183 0.10661872 0.11088145 0.11943383 0.11920486 
       259        260        261        262        263        264        265        266 
0.14212471 0.12355478 0.09222958 0.14332286 0.20421792 0.17985962 0.13832621 0.18398801 
       267        268        269        270        271        272        273        274 
0.10686240 0.10759141 0.10474438 0.19745436 0.10294964 0.13445375 0.08007971 0.19964103 
       275        276        277        278        279        280        281        282 
0.13555476 0.11293836 0.08441940 0.09132494 0.15931492 0.09549452 0.04689911 0.07964193 
       283        284        285        286        287        288        289        290 
0.25727235 0.19714727 0.17865725 0.11933680 0.13403291 0.09894282 0.07294047 0.09965140 
       291        292        293        294        295        296        297        298 
0.08053305 0.07753199 0.07365116 0.11584445 0.11880741 0.06966775 0.03490652 0.10442168 
       299        300        301        302        303        304        305        306 
0.17754859 0.13482291 0.08102286 0.02811921 0.11492334 0.07286621 0.09130368 0.16121982 
       307        308        309        310        311        312        313        314 
0.20736632 0.23139600 0.20897582 0.13900016 0.27074758 0.12733060 0.21405596 0.16368191 
       315        316        317        318        319        320        321        322 
0.12909967 0.17116658 0.02739219 0.07095957 0.12820819 0.32455471 0.09456258 0.15435940 
       323        324        325        326        327        328        329        330 
0.08363104 0.12261595 0.16985193 0.02383111 0.08254139 0.09522466 0.02051712 0.12208424 
       331        332        333        334        335        336        337        338 
0.04193772 0.07898161 0.15385044 0.11164899 0.26290762 0.12920354 0.12176076 0.07927356 
       339 
0.33249386 

> #Extraer estados actuales
> G_trait_vector <- setNames(G_trait2$G, rownames(G_trait2))

> print(G_trait_vector)
                     AGUA_FRIA_ALTA                      AGUA_FRIA_BAJA 
                       4.144869e-02                        5.494168e-03 
                            ALCONES               ALGARROBAL_Y_DESPENSA 
                       2.962227e-01                        0.000000e+00 
             ALGARROBO_DE_HORNILLOS               ALHUEMILLA_LAS_PALMAS 
                       0.000000e+00                        0.000000e+00 
           ALVAREZ_DE_VALLE_HERMOSO                 ANGOSTURA_DE_GALVEZ 
                       3.226121e-01                        1.828829e-01 
                           ATELCURA                           ATUHUAICO 
                       0.000000e+00                        2.768192e-01 
                            BARRAZA                     BLAS_Y_BULRREME 
                       3.401253e-01                        2.024014e-01 
            BUENOS_AIRES_DE_PUNILLA                        CABRA_CORRAL 
                       3.515916e-01                        9.959142e-02 
                    CALDERA_Y_DAMAS                         CANELA_ALTA 
                       2.270210e-02                        5.515873e-02 
                        CANELA_BAJA                    CANELILLA_CANELA 
                       1.126470e-01                        4.451477e-02 
                   CANELILLA_OVALLE                             CARCAMO 
                       4.900130e-01                        0.000000e+00 
         CARRIZAL_Y_LAGUNA_DE_SERON           CARRIZO,_MENDOZA_Y_ROMERO 
                       3.833333e-02                        1.998299e-02 
                  CASTILLO_MAL_PASO                        CERRO_BLANCO 
                       2.532922e-01                        2.260451e-01 
                      CERRO_GIGANTE                         CHACARILLAS 
                       0.000000e+00                        4.002288e-01 
                           CHALINGA                          CHANCHOQUI 
                       1.046479e-01                        0.000000e+00 
                     CHAPE_Y_CHACAY                             CHELLES 
                       4.470062e-01                        2.385417e-01 
                 CHILECITO_Y_CHUAPA                   COIPO_Y_CUYUNCAVI 
                       1.006776e-01                        0.000000e+00 
                          COLLIGUAY              CORDILLERA_DE_CARRIZAL 
                       6.251737e-02                        8.521303e-02 
                       CUARTO_CAJON                   CUESTA_EL_MANZANO 
                       1.148325e-01                        2.340984e-02 
                             CUZCUZ                    DAIN_Y_CORTADERA 
                       0.000000e+00                        7.991106e-02 
                           DE_ARAYA                           DE_ORREGO 
                       4.440892e-16                        0.000000e+00 
                    DIAZ_Y_OCARANZA                            DOS_RIOS 
                       8.112965e-02                        0.000000e+00 
                        EL_ALMENDRO                            EL_ALTAR 
                       0.000000e+00                        7.791460e-02 
                           EL_ATAJO                           EL_CHACAY 
                       2.772727e-01                        2.588076e-01 
                          EL_CUYANO                       EL_DIVISADERO 
                       4.523810e-02                        1.419874e-01 
                         EL_DURAZNO                          EL_ESPINAL 
                       6.508749e-02                        2.813552e-01 
                          EL_ESPINO                           EL_MACANO 
                       6.634210e-02                        2.897182e-01 
                           EL_OLIVO                           EL_PANGUE 
                       2.081448e-01                        0.000000e+00 
               EL_PERAL_OJO_DE_AGUA                     EL_POTRERO_ALTO 
                       4.736842e-02                        0.000000e+00 
            EL_POTRERO_DE_HUATULAME                          EL_ROMERAL 
                       5.039138e-01                        1.929939e-01 
                            EL_TOME                      ESTERO_DERECHO 
                       2.666667e-01                        1.262208e-02 
            FERNANDEZ_ANGEL_Y_OTROS                   FERNANDEZ_Y_VELIZ 
                       0.000000e+00                        1.343525e-01 
                   FERNANDO_ALVAREZ                   FLORES_Y_SAAVEDRA 
                       3.734033e-01                        2.464616e-01 
                      FUNDIDA_NORTE                         FUNDIDA_SUR 
                       1.468587e-01                        3.118280e-02 
                       GUALLIGUAICA                   HIGUERITAS_UNIDAS 
                       0.000000e+00                        1.152439e-01 
                          HUAMPULLA                               HUANA 
                       2.983539e-01                        1.206576e-01 
              HUAPILLAS_MOLLAQUITAS                       HUASCOALTINOS 
                       0.000000e+00                        3.816681e-03 
                      HUENTELAUQUEN                     HUINCHIGUALLEGO 
                       1.658951e-01                        0.000000e+00 
                      INGA_PICHASCA                         JARA_O_LAJA 
                       2.240729e-01                        1.281260e-01 
                   JARILLA_Y_AZOGUE                     JIMENEZ_Y_TAPIA 
                       0.000000e+00                        3.755501e-02 
                       LAGUNA_VERDE   LAGUNILLAS_GALLEGUILLOS_DEL_VALLE 
                       0.000000e+00                        2.305455e-01 
                      LAS_BARRANCAS                          LAS_BATEAS 
                       2.435897e-02                        0.000000e+00 
                         LAS_CARDAS                           LAS_DAMAS 
                       1.312726e-01                        4.523810e-02 
                       LAS_MINILLAS                         LAS_PAREDES 
                       0.000000e+00                        0.000000e+00 
                 LAS_ROJAS_DE_CUTUN                           LAS_TAZAS 
                       9.063804e-02                        0.000000e+00 
             LAS_TRANCAS_DE_PUCLARO                           LA_CALERA 
                       5.228758e-02                        5.239689e-01 
                         LA_CAPILLA                           LA_CEBADA 
                       0.000000e+00                        3.081592e-01 
                        LA_CISTERNA                            LA_COIPA 
                       1.514423e-02                        5.996988e-01 
LA_COLORADA_DE_AGUILERA_Y_SARMIENTO                        LA_HERRADURA 
                       1.734007e-01                        7.105427e-15 
                          LA_HOYADA                            LA_LEONA 
                       4.202552e-01                        0.000000e+00 
                          LA_ORTIGA                            LA_PLATA 
                       0.000000e+00                        0.000000e+00 
                         LA_POLVADA                          LA_SAUCERA 
                       7.105427e-15                        5.669599e-02 
                       LA_TRANQUITA                         LA_VERDIONA 
                       3.776224e-01                        5.364409e-01 
                          LITIPAMPA                       LORENZO_ARAYA 
                       0.000000e+00                        0.000000e+00 
         LORENZO_PERALTA_DE_PUNILLA                       LOS_ALGODONES 
                       4.329004e-02                        0.000000e+00 
                        LOS_ANGELES                       LOS_CERRILLOS 
                       4.736842e-02                        0.000000e+00 
                         LOS_CHOROS                        LOS_CLONQUIS 
                       2.780468e-01                        2.282197e-01 
           LOS_HOYOS_Y_EL_EMPEDRADO                       LOS_LAVADEROS 
                       3.325123e-02                        2.521008e-01 
                       LOS_MAITENES               LOS_MAITENES_DE_SERON 
                       4.421296e-01                        3.587435e-01 
                        LOS_MORALES                           LOS_MOZOS 
                       3.170412e-01                        1.715686e-01 
                          LOS_POZOS                          LOS_TAPIAS 
                       2.733333e-01                        2.076923e-01 
                          LOS_TOMES                          LOS_TRIGOS 
                       0.000000e+00                        2.245872e-01 
                      MAJADA_BLANCA                           MANQUEHUA 
                       0.000000e+00                        2.176690e-01 
                  MAQUI_LOS_PALQUIS                             MIALQUI 
                       1.946247e-01                        1.196490e-01 
                       MINCHA_NORTE                          MINCHA_SUR 
                       0.000000e+00                        7.574868e-03 
                       MONTE_PATRIA                              MOVILO 
                       2.973456e-01                        6.428571e-02 
                    OLLA_DE_CALDERA                               ORURO 
                       1.382029e-01                        3.430283e-01 
                         PEJERREYES                     PIEDRAS_BLANCAS 
                       0.000000e+00                        0.000000e+00 
                        PIEDRA_LISA                     POTRERILLO_ALTO 
                       2.852050e-02                        5.364205e-01 
                       PULPICA_ALTO                        PULPICA_BAJO 
                       0.000000e+00                        0.000000e+00 
                          PUNITAQUI            QUEBRADA_DE_COLLIGUACITO 
                       1.838879e-01                        0.000000e+00 
  QUEBRADA_DE_PAIHUANO_Y_SAN_ANDRES                   QUEBRADA_DE_TALCA 
                       0.000000e+00                        2.437296e-01 
               QUEBRADA_DE_TULAHUEN                      QUEBRADA_HONDA 
                       0.000000e+00                        0.000000e+00 
              QUEBRADA_LAS_MINILLAS               QUEBRADA_LAS_MOLLACAS 
                       2.948276e-01                        0.000000e+00 
                  QUEBRADA_LA_ARENA                  QUEBRADA_LOS_LOROS 
                       0.000000e+00                        3.311688e-01 
                         QUITALLACO                           RAMADILLA 
                       3.833333e-02                        3.485839e-01 
                              RAPEL                          RAPELCILLO 
                       2.335304e-01                        0.000000e+00 
             RINCONADA_DE_PUNITAQUI                        RIO_COLORADO 
                       3.198819e-01                        0.000000e+00 
                       ROMERALCILLO                              SALALA 
                       2.833481e-01                        1.243924e-01 
                         SAN_ISIDRO                         SAN_LORENZO 
                       0.000000e+00                        5.729896e-02 
                              SOCOS                             TOTORAL 
                       0.000000e+00                        0.000000e+00 
                        TOTORALILLO                         TUNGA_NORTE 
                       4.009553e-01                        5.499901e-02 
                          TUNGA_SUR                    UCHUMI-DIAGUITAS 
                       1.466831e-01                        0.000000e+00 
                         VADO_HONDO                 VALDIVIA_DE_PUNILLA 
                       9.492419e-02                        2.289831e-01 
               VALLECITO_Y_RIO_SECO                            VARILLAR 
                       0.000000e+00                        0.000000e+00 
                            VIVANCO                          YERBA_LOCA 
                       4.736842e-02                        0.000000e+00 

> #Crear un data.frame
> result_list <- list() 

> # Iterar sobre cada nodo terminal y su ruta desde la raíz
> for (i in seq_along(paths)) {
+   # Nodo terminal y ruta de nodos desde la raíz hasta el nodo terminal
+   tip <- terminal_nodes[i]
+   path <- paths[[i]]
+   
+   # Obtener el cluster del nodo terminal desde clusters_table
+   cluster_row <-clusters_table[clusters_table$tip.label==tip,]
+   cluster <- ifelse(nrow(cluster_row)>0,cluster_row$cluster,NA)
+   # Obtener el valor de M para el nodo terminal desde M_trait
+   M_value_terminal <- ifelse(tip %in% names(M_trait_vector),M_trait_vector[tip],NA)
+   if(!is.na(cluster)&&!is.na(G_value_terminal)){
+     result_list[[i]] <- data.frame(
+       Node = path[length(path)],   # Último nodo en la ruta, que es el terminal
+       Cluster = cluster,
+       G_value = G_value_terminal)
+   for(node in head(path,-1)){
+     G_value<-ifelse(as.character(node)%in% names(G_anc_states),
+                     G_anc_states[as.character(node)],NA)
+     if(!is.na(cluster)&&!is.na(G_value)) {
+       result_list[[length(result_list)+1]]<-data.frame(
+         Node =node,
+         Cluster = cluster,
+         G_value = G_value
+         )
+       }
+     }  
+   }
+ }

>   # Agregar cada nodo ancestral en el path (excluyendo el terminal)
>   for (node in head(path, -1)) {  # head(path, -1) excluye el último nodo terminal
+     # Asignar el valor de G para el nodo ancestral
+     G_value <- ifelse(as.character(node) %in% names(G_anc_states), G_anc_states[as.character(node)], NA)
+     
+     # Agregar el nodo ancestral, cluster y valor de G al resultado
+     result_list <- append(result_list, list(data.frame(
+       Node = node,
+       Cluster = cluster,  # Asignamos el mismo cluster del terminal
+       G_value = G_value
+     )))
+   }

> # Combinar todos los dataframes en uno solo
> result_df_G <- do.call(rbind, result_list)

> # Para nodos ancestrales, asegurarse de asignar clusters
> result_df_G <- result_df_G[!duplicated(result_df_G$Node), ]  # Eliminar filas duplicadas de cada nodo

> # Ver el dataframe resultante
> row.names(result_df_G)<-NULL

> print(result_df_G)
   Node Cluster    G_value
1    11       2 0.28135525
2   171       2 0.11811683
3   172       2 0.11840475
4   173       2 0.12798707
5   175       2 0.12809278
6   177       2 0.12796359
7    17       2 0.28135525
8   180       2 0.12211043
9    19       3 0.28135525
10  187       2 0.12036829
11  188       2 0.11887525
12  190       2 0.11967715
13   23       2 0.28135525
14  200       2 0.12427687
15  204       2 0.12426975
16  205       2 0.12503983
17  212       2 0.12549914
18  214       2 0.12959613
19  224       2 0.13291510
20  227       2 0.14051238
21  229       2 0.16380318
22  245       2 0.19843525
23  179       2 0.12741943
24  185       2 0.12156942
25   44       1 0.28135525
26   48       1 0.28135525
27   50       3 0.28135525
28  226       2 0.12897426
29  236       2 0.12854936
30  240       2 0.12361268
31  247       2 0.11457514
32  261       2 0.09222958
33  278       2 0.09132494
34  280       2 0.09549452
35  290       2 0.09965140
36   67       1 0.28135525
37  191       3 0.12128591
38  203       3 0.12463498
39   73       2 0.28135525
40  208       3 0.13262767
41  219       3 0.13426162
42  221       3 0.13459785
43  228       3 0.13998903
44  231       3 0.15049419
45   79       2 0.28135525
46  253       3 0.15434606
47   90       1 0.28135525
48  230       2 0.13977742
49  233       2 0.11429204
50  255       2 0.10661872
51  267       2 0.10686240
52  276       2 0.11293836
53  294       2 0.11584445
54  300       2 0.13482291
55  315       2 0.12909967
56  319       2 0.12820819
57  124       3 0.28135525
58  129       2 0.28135525
59  277       1 0.08441940
60  282       1 0.07964193
61  291       1 0.08053305
62  301       1 0.08102286
63  305       1 0.09130368
64  321       1 0.09456258
65  328       1 0.09522466
66  139       2 0.28135525
67  153       1 0.28135525
68  246       1 0.17782179
69  264       1 0.17985962
70  206       3 0.12582687
71  220       3 0.14765987
72  189       1 0.11491738
73  195       1 0.09866755
74  209       1 0.05922463
75  249       1 0.03377860
76  242       2 0.15007197
77  252       2 0.14395525
78  262       2 0.14332286
79  265       2 0.13832621
80  285       2 0.17865725
81  199       1 0.11975730
82  266       3 0.18398801
83  274       3 0.19964103
84  284       3 0.19714727
85  299       3 0.17754859
86  316       3 0.17116658
87  322       3 0.15435940
88  232       2 0.16255854
89  211      NA 0.12106325
90  256      NA 0.11088145

> ################################## M ###########################################
> paths
[[1]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 249 302 317   1

[[2]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 249 302 317 329   2

[[3]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 241
[22] 313   3

[[4]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291 301 304   4

[[5]]
[1] 171 172 173 175 177 179 181 182   5

[[6]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 268 298 312 332
[22]   6

[[7]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199 207 243 248 269 303 324   7

[[8]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 192 197   8

[[9]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199 207 243 248 269 303   9

[[10]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 213 279  10

[[11]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 245
[22]  11

[[12]]
[1] 171 172 173 175 176 194 216  12

[[13]]
[1] 171 172 173 175 177 178 183  13

[[14]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 250 297 331  14

[[15]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 196 202 218 234  15

[[16]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 223 251 273  16

[[17]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 278 280 290  17

[[18]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 223 251 273  18

[[19]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253  19

[[20]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 306 334  20

[[21]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271 288 293 327 336 338  21

[[22]]
[1] 171 172 173 175 176 193 217  22

[[23]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 300 315 319  23

[[24]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 306  24

[[25]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271 288 293 326  25

[[26]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266 274 283  26

[[27]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 278 280 290  27

[[28]]
[1] 171 172 173 175 176 193 217  28

[[29]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 192 198 238  29

[[30]]
[1] 171 172 173 174 210 237  30

[[31]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291 301 305  31

[[32]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 241
[22] 313  32

[[33]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267  33

[[34]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 300 315 318  34

[[35]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 268  35

[[36]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 196 202 218  36

[[37]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 223  37

[[38]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 262 265 285 310 330  38

[[39]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 235 258
[22] 289  39

[[40]]
[1] 171  40

[[41]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291  41

[[42]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 278  42

[[43]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195  43

[[44]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291 301 305 321 328  44

[[45]]
[1] 171 172 173 175 176 193  45

[[46]]
[1] 171 172 173 175 176 194 215  46

[[47]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266  47

[[48]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264  48

[[49]]
[1] 171 172 173 175 176 194 216  49

[[50]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 220  50

[[51]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199 207 243 248 269 303 324  51

[[52]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 235 258
[22]  52

[[53]]
[1] 171 172 173 175 177 178 184  53

[[54]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 220 272 295  54

[[55]]
[1] 171 172 173 175 177 179 180  55

[[56]]
[1] 171 172 173 175 177 178 184 222  56

[[57]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 268 298 312 333
[22] 335  57

[[58]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 306 334 337  58

[[59]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 220 272  59

[[60]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 262 265 286  60

[[61]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199 207  61

[[62]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 278 280  62

[[63]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 307 309 311  63

[[64]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 232
[22]  64

[[65]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 262 265 285 310  65

[[66]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 262 265 285 310 330  66

[[67]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 249  67

[[68]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266 274 284 299  68

[[69]]
[1] 171 172 173 175 176 194 215  69

[[70]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291 301 305 321 328  70

[[71]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271 288 293 326  71

[[72]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206  72

[[73]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 262  73

[[74]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 196 201 244  74

[[75]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 235 257
[22]  75

[[76]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 213 279  76

[[77]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 213  77

[[78]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266 274 284 299 316 322  78

[[79]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 262 265 285  79

[[80]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 250  80

[[81]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 268 298 312 333
[22] 335  81

[[82]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 281  82

[[83]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 241
[22]  83

[[84]]
[1] 171 172 173 175 177 179 181 182  84

[[85]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 307 308  85

[[86]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208  86

[[87]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 250 297  87

[[88]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 292 296  88

[[89]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271  89

[[90]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199  90

[[91]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 306 334 337  91

[[92]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 239
[22] 320 339  92

[[93]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199 207 243  93

[[94]]
 [1] 171 172 173 175 177 179 180 185 186 225  94

[[95]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 196 202  95

[[96]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 249 302 317 329  96

[[97]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 254  97

[[98]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 307 309  98

[[99]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 220 272 295  99

[[100]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 100

[[101]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 250 297 331 101

[[102]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 192 197 102

[[103]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 103

[[104]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 192 198 238 275 104

[[105]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271 288 293 327 336 338 105

[[106]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 268 298 106

[[107]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 270 107

[[108]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291 301 304 323 108

[[109]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 260 109

[[110]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 254 110

[[111]]
 [1] 171 172 173 175 177 179 180 185 186 111

[[112]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 112

[[113]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 300 315 318 113

[[114]]
[1] 171 172 173 174 210 237 114

[[115]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 270 115

[[116]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271 288 293 327 336 116

[[117]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266 274 283 117

[[118]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 300 314 325 118

[[119]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 307 309 311 119

[[120]]
[1] 171 172 173 175 177 179 181 120

[[121]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 235 257
[22] 121

[[122]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 196 201 122

[[123]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199 207 243 248 269 123

[[124]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266 274 284 299 316 322 124

[[125]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291 301 304 323 125

[[126]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291 301 305 321 126

[[127]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 249 302 127

[[128]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 192 198 238 275 128

[[129]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 232
[22] 129

[[130]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 130

[[131]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 196 202 218 234 131

[[132]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 260 287 132

[[133]]
 [1] 171 172 173 175 177 179 180 185 187 133

[[134]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 134

[[135]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271 288 135

[[136]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 307 308 136

[[137]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 137

[[138]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 281 138

[[139]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266 274 284 299 316 139

[[140]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 239
[22] 140

[[141]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271 288 293 327 141

[[142]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 142

[[143]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 235 258
[22] 289 143

[[144]]
[1] 171 172 173 174 144

[[145]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 268 298 312 332
[22] 145

[[146]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 239
[22] 320 339 146

[[147]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 262 265 286 147

[[148]]
[1] 171 172 173 175 177 178 183 148

[[149]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 260 287 149

[[150]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 239
[22] 320 150

[[151]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 300 314 325 151

[[152]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 300 315 319 152

[[153]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266 274 284 153

[[154]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 268 298 312 333
[22] 154

[[155]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 300 314 155

[[156]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 245
[22] 156

[[157]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199 207 243 248 157

[[158]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 158

[[159]]
[1] 171 172 159

[[160]]
 [1] 171 172 173 175 177 179 180 185 186 225 160

[[161]]
[1] 171 172 173 174 210 161

[[162]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 162

[[163]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 192 198 163

[[164]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 164

[[165]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 292 165

[[166]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 223 251 166

[[167]]
[1] 171 172 173 175 177 178 184 222 167

[[168]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 196 201 244 168

[[169]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 292 296 169

[[170]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 170


> # Extraer los estados ancestrales
> M_anc_states <- mvt$anc$ace

> M_anc_states
       171        172        173        174        175        176        177        178 
0.11927115 0.11956188 0.12923784 0.14756394 0.12935690 0.13809336 0.12912156 0.13156661 
       179        180        181        182        183        184        185        186 
0.12857616 0.12528001 0.12699402 0.12445494 0.15911329 0.13793393 0.12507648 0.11748955 
       187        188        189        190        191        192        193        194 
0.12483342 0.12537969 0.12038849 0.12752633 0.13266421 0.13046498 0.13912205 0.15221406 
       195        196        197        198        199        200        201        202 
0.10319541 0.11703769 0.15436709 0.17389518 0.13353239 0.13777250 0.09522611 0.11730337 
       203        204        205        206        207        208        209        210 
0.13908463 0.13742336 0.13572945 0.14189484 0.15714420 0.15520562 0.06124244 0.18813387 
       211        212        213        214        215        216        217        218 
0.12431044 0.13530629 0.11613147 0.13469230 0.28257258 0.13488291 0.07090485 0.09579866 
       219        220        221        222        223        224        225        226 
0.16459972 0.25482384 0.16457189 0.02819865 0.11707075 0.13666161 0.06070097 0.13364432 
       227        228        229        230        231        232        233        234 
0.14155415 0.17070104 0.15605153 0.14118236 0.18307960 0.17319812 0.10918737 0.08042664 
       235        236        237        238        239        240        241        242 
0.12807022 0.13367160 0.24893398 0.21358835 0.18267669 0.12810306 0.32273595 0.18032695 
       243        244        245        246        247        248        249        250 
0.16794704 0.03314410 0.20904978 0.15788847 0.11829868 0.14303386 0.03257403 0.04324132 
       251        252        253        254        255        256        257        258 
0.11762749 0.17041732 0.18608750 0.03928519 0.09626711 0.10862294 0.11884626 0.12488450 
       259        260        261        262        263        264        265        266 
0.17205996 0.12493517 0.09582781 0.16895988 0.19046605 0.15548333 0.16528158 0.15211885 
       267        268        269        270        271        272        273        274 
0.09293250 0.09281390 0.12113798 0.24566657 0.12398615 0.18890825 0.07481907 0.14998724 
       275        276        277        278        279        280        281        282 
0.18451455 0.09148887 0.08731164 0.09547789 0.13654457 0.10093889 0.04468219 0.08244820 
       283        284        285        286        287        288        289        290 
0.13613866 0.15296488 0.21997899 0.14150705 0.13848895 0.11902049 0.07641580 0.10563914 
       291        292        293        294        295        296        297        298 
0.08460603 0.07974455 0.08666901 0.09089459 0.16247886 0.06809821 0.03829159 0.09516136 
       299        300        301        302        303        304        305        306 
0.14305566 0.09275940 0.08540001 0.02539221 0.12839613 0.07973397 0.09487108 0.12614591 
       307        308        309        310        311        312        313        314 
0.19488083 0.27997606 0.19343978 0.15650761 0.17958234 0.12491577 0.25846806 0.10810457 
       315        316        317        318        319        320        321        322 
0.08621885 0.14122507 0.02288668 0.01447205 0.08685256 0.38230749 0.09870618 0.12376537 
       323        324        325        326        327        328        329        330 
0.09543270 0.13624124 0.10703253 0.02804326 0.09530278 0.09779287 0.01026416 0.13302343 
       331        332        333        334        335        336        337        338 
0.04704050 0.07748372 0.15287209 0.08135943 0.26526760 0.14728106 0.07837505 0.08045128 
       339 
0.39413023 

> #Extraer estados actuales
> M_trait_vector <- setNames(M_trait2$M, rownames(M_trait2))

> print(M_trait_vector)
                     AGUA_FRIA_ALTA                      AGUA_FRIA_BAJA 
                         0.04225352                          0.00000000 
                            ALCONES               ALGARROBAL_Y_DESPENSA 
                         0.31048387                          0.00000000 
             ALGARROBO_DE_HORNILLOS               ALHUEMILLA_LAS_PALMAS 
                         0.00000000                          0.00000000 
           ALVAREZ_DE_VALLE_HERMOSO                 ANGOSTURA_DE_GALVEZ 
                         0.36842105                          0.21621622 
                           ATELCURA                           ATUHUAICO 
                         0.00000000                          0.22580645 
                            BARRAZA                     BLAS_Y_BULRREME 
                         0.40000000                          0.20754717 
            BUENOS_AIRES_DE_PUNILLA                        CABRA_CORRAL 
                         0.40540541                          0.11363636 
                    CALDERA_Y_DAMAS                         CANELA_ALTA 
                         0.00000000                          0.05254237 
                        CANELA_BAJA                    CANELILLA_CANELA 
                         0.11279230                          0.02531646 
                   CANELILLA_OVALLE                             CARCAMO 
                         0.59813084                          0.00000000 
         CARRIZAL_Y_LAGUNA_DE_SERON           CARRIZO,_MENDOZA_Y_ROMERO 
                         0.00000000                          0.00000000 
                  CASTILLO_MAL_PASO                        CERRO_BLANCO 
                         0.17592593                          0.13725490 
                      CERRO_GIGANTE                         CHACARILLAS 
                         0.00000000                          0.20689655 
                           CHALINGA                          CHANCHOQUI 
                         0.11882998                          0.00000000 
                     CHAPE_Y_CHACAY                             CHELLES 
                         0.81176471                          0.25000000 
                 CHILECITO_Y_CHUAPA                   COIPO_Y_CUYUNCAVI 
                         0.09401709                          0.00000000 
                          COLLIGUAY              CORDILLERA_DE_CARRIZAL 
                         0.03389831                          0.00000000 
                       CUARTO_CAJON                   CUESTA_EL_MANZANO 
                         0.00000000                          0.00000000 
                             CUZCUZ                    DAIN_Y_CORTADERA 
                         0.00000000                          0.08130081 
                           DE_ARAYA                           DE_ORREGO 
                         0.00000000                          0.00000000 
                    DIAZ_Y_OCARANZA                            DOS_RIOS 
                         0.09756098                          0.00000000 
                        EL_ALMENDRO                            EL_ALTAR 
                         0.00000000                          0.03053435 
                           EL_ATAJO                           EL_CHACAY 
                         0.36363636                          0.31481481 
                          EL_CUYANO                       EL_DIVISADERO 
                         0.09523810                          0.15789474 
                         EL_DURAZNO                          EL_ESPINAL 
                         0.00000000                          1.00000000 
                          EL_ESPINO                           EL_MACANO 
                         0.05063291                          0.31250000 
                           EL_OLIVO                           EL_PANGUE 
                         0.35294118                          0.00000000 
               EL_PERAL_OJO_DE_AGUA                     EL_POTRERO_ALTO 
                         0.00000000                          0.00000000 
            EL_POTRERO_DE_HUATULAME                          EL_ROMERAL 
                         0.55555556                          0.15492958 
                            EL_TOME                      ESTERO_DERECHO 
                         0.16190476                          0.00000000 
            FERNANDEZ_ANGEL_Y_OTROS                   FERNANDEZ_Y_VELIZ 
                         0.00000000                          0.15579710 
                   FERNANDO_ALVAREZ                   FLORES_Y_SAAVEDRA 
                         0.28000000                          0.24271845 
                      FUNDIDA_NORTE                         FUNDIDA_SUR 
                         0.13725490                          0.00000000 
                       GUALLIGUAICA                   HIGUERITAS_UNIDAS 
                         0.00000000                          0.09756098 
                          HUAMPULLA                               HUANA 
                         0.40740741                          0.15384615 
              HUAPILLAS_MOLLAQUITAS                       HUASCOALTINOS 
                         0.00000000                          0.00000000 
                      HUENTELAUQUEN                     HUINCHIGUALLEGO 
                         0.14854111                          0.00000000 
                      INGA_PICHASCA                         JARA_O_LAJA 
                         0.20930233                          0.09756098 
                   JARILLA_Y_AZOGUE                     JIMENEZ_Y_TAPIA 
                         0.00000000                          0.02161215 
                       LAGUNA_VERDE   LAGUNILLAS_GALLEGUILLOS_DEL_VALLE 
                         0.00000000                          0.33333333 
                      LAS_BARRANCAS                          LAS_BATEAS 
                         0.00000000                          0.00000000 
                         LAS_CARDAS                           LAS_DAMAS 
                         0.15094340                          0.00000000 
                       LAS_MINILLAS                         LAS_PAREDES 
                         0.00000000                          0.00000000 
                 LAS_ROJAS_DE_CUTUN                           LAS_TAZAS 
                         0.11627907                          0.00000000 
             LAS_TRANCAS_DE_PUCLARO                           LA_CALERA 
                         0.00000000                          0.73270440 
                         LA_CAPILLA                           LA_CEBADA 
                         0.00000000                          0.27000000 
                        LA_CISTERNA                            LA_COIPA 
                         0.00000000                          0.82258065 
LA_COLORADA_DE_AGUILERA_Y_SARMIENTO                        LA_HERRADURA 
                         0.24074074                          0.00000000 
                          LA_HOYADA                            LA_LEONA 
                         0.45454545                          0.00000000 
                          LA_ORTIGA                            LA_PLATA 
                         0.00000000                          0.00000000 
                         LA_POLVADA                          LA_SAUCERA 
                         0.00000000                          0.00000000 
                       LA_TRANQUITA                         LA_VERDIONA 
                         0.45454545                          0.72727273 
                          LITIPAMPA                       LORENZO_ARAYA 
                         0.00000000                          0.00000000 
         LORENZO_PERALTA_DE_PUNILLA                       LOS_ALGODONES 
                         0.09090909                          0.00000000 
                        LOS_ANGELES                       LOS_CERRILLOS 
                         0.00000000                          0.00000000 
                         LOS_CHOROS                        LOS_CLONQUIS 
                         0.24257426                          0.23750000 
           LOS_HOYOS_Y_EL_EMPEDRADO                       LOS_LAVADEROS 
                         0.00000000                          0.29411765 
                       LOS_MAITENES               LOS_MAITENES_DE_SERON 
                         0.52083333                          0.44117647 
                        LOS_MORALES                           LOS_MOZOS 
                         0.01666667                          0.00000000 
                          LOS_POZOS                          LOS_TAPIAS 
                         0.05555556                          0.00000000 
                          LOS_TOMES                          LOS_TRIGOS 
                         0.00000000                          0.12000000 
                      MAJADA_BLANCA                           MANQUEHUA 
                         0.00000000                          0.17034700 
                  MAQUI_LOS_PALQUIS                             MIALQUI 
                         0.23076923                          0.15068493 
                       MINCHA_NORTE                          MINCHA_SUR 
                         0.00000000                          0.00000000 
                       MONTE_PATRIA                              MOVILO 
                         0.41101695                          0.10000000 
                    OLLA_DE_CALDERA                               ORURO 
                         0.08444444                          0.42352941 
                         PEJERREYES                     PIEDRAS_BLANCAS 
                         0.00000000                          0.00000000 
                        PIEDRA_LISA                     POTRERILLO_ALTO 
                         0.00000000                          0.82068966 
                       PULPICA_ALTO                        PULPICA_BAJO 
                         0.00000000                          0.00000000 
                          PUNITAQUI            QUEBRADA_DE_COLLIGUACITO 
                         0.19774011                          0.00000000 
  QUEBRADA_DE_PAIHUANO_Y_SAN_ANDRES                   QUEBRADA_DE_TALCA 
                         0.00000000                          0.29007634 
               QUEBRADA_DE_TULAHUEN                      QUEBRADA_HONDA 
                         0.00000000                          0.00000000 
              QUEBRADA_LAS_MINILLAS               QUEBRADA_LAS_MOLLACAS 
                         0.34482759                          0.00000000 
                  QUEBRADA_LA_ARENA                  QUEBRADA_LOS_LOROS 
                         0.00000000                          0.00000000 
                         QUITALLACO                           RAMADILLA 
                         0.00000000                          0.40740741 
                              RAPEL                          RAPELCILLO 
                         0.20270270                          0.00000000 
             RINCONADA_DE_PUNITAQUI                        RIO_COLORADO 
                         0.25433526                          0.00000000 
                       ROMERALCILLO                              SALALA 
                         0.22222222                          0.12162162 
                         SAN_ISIDRO                         SAN_LORENZO 
                         0.00000000                          0.05813953 
                              SOCOS                             TOTORAL 
                         0.00000000                          0.00000000 
                        TOTORALILLO                         TUNGA_NORTE 
                         0.36974790                          0.03846154 
                          TUNGA_SUR                    UCHUMI-DIAGUITAS 
                         0.14619883                          0.00000000 
                         VADO_HONDO                 VALDIVIA_DE_PUNILLA 
                         0.12195122                          0.23728814 
               VALLECITO_Y_RIO_SECO                            VARILLAR 
                         0.00000000                          0.00000000 
                            VIVANCO                          YERBA_LOCA 
                         0.00000000                          0.00000000 

> #Crear un data.frame
> result_list <- list() 

> # Iterar sobre cada nodo terminal y su ruta desde la raíz
> for (i in seq_along(paths)) {
+   # Nodo terminal y ruta de nodos desde la raíz hasta el nodo terminal
+   tip <- terminal_nodes[i]
+   path <- paths[[i]]
+   
+   # Obtener el cluster del nodo terminal desde clusters_table
+   cluster_row <-clusters_table[clusters_table$tip.label==tip,]
+   cluster <- ifelse(nrow(cluster_row)>0,cluster_row$cluster,NA)
+   # Obtener el valor de M para el nodo terminal desde M_trait
+   M_value_terminal <- ifelse(tip %in% names(M_trait_vector),M_trait_vector[tip],NA)
+   if(!is.na(cluster)&&!is.na(M_value_terminal)){
+     result_list[[i]] <- data.frame(
+       Node = path[length(path)],   # Último nodo en la ruta, que es el terminal
+       Cluster = cluster,
+       M_value = M_value_terminal)
+     for(node in head(path,-1)){
+       M_value<-ifelse(as.character(node)%in% names(M_anc_states),
+                       M_anc_states[as.character(node)],NA)
+       if(!is.na(cluster)&&!is.na(M_value)) {
+         result_list[[length(result_list)+1]]<-data.frame(
+           Node =node,
+           Cluster = cluster,
+           M_value = M_value
+         )
+       }
+     }  
+   }
+ }

> # Agregar cada nodo ancestral en el path (excluyendo el terminal)
> for (node in head(path, -1)) {  # head(path, -1) excluye el último nodo terminal
+   # Asignar el valor de M para el nodo ancestral
+   M_value <- ifelse(as.character(node) %in% names(M_anc_states), M_anc_states[as.character(node)], NA)
+   
+   # Agregar el nodo ancestral, cluster y valor de M al resultado
+   result_list <- append(result_list, list(data.frame(
+     Node = node,
+     Cluster = cluster,  # Asignamos el mismo cluster del terminal
+     M_value = M_value
+   )))
+ }

> # Combinar todos los dataframes en uno solo
> result_df_M <- do.call(rbind, result_list)

> # Para nodos ancestrales, asegurarse de asignar clusters
> result_df_M <- result_df_M[!duplicated(result_df_M$Node), ]  # Eliminar filas duplicadas de cada nodo

> # Ver el dataframe resultante
> row.names(result_df_M)<-NULL

> print(result_df_M)
   Node Cluster    M_value
1    11       2 0.40000000
2   171       2 0.11927115
3   172       2 0.11956188
4   173       2 0.12923784
5   175       2 0.12935690
6   177       2 0.12912156
7    17       2 0.11279230
8   180       2 0.12528001
9    19       3 0.59813084
10  187       2 0.12483342
11  188       2 0.12537969
12  190       2 0.12752633
13   23       2 0.17592593
14  200       2 0.13777250
15  204       2 0.13742336
16  205       2 0.13572945
17  212       2 0.13530629
18  214       2 0.13469230
19  224       2 0.13666161
20  227       2 0.14155415
21  229       2 0.15605153
22  245       2 0.20904978
23  179       2 0.12857616
24  185       2 0.12507648
25   44       1 0.03053435
26   48       1 0.15789474
27   50       3 1.00000000
28  226       2 0.13364432
29  236       2 0.13367160
30  240       2 0.12810306
31  247       2 0.11829868
32  261       2 0.09582781
33  278       2 0.09547789
34  280       2 0.10093889
35  290       2 0.10563914
36   67       1 0.00000000
37  191       3 0.13266421
38  203       3 0.13908463
39   73       2 0.14854111
40  208       3 0.15520562
41  219       3 0.16459972
42  221       3 0.16457189
43  228       3 0.17070104
44  231       3 0.18307960
45   79       2 0.73270440
46  253       3 0.18608750
47   90       1 0.00000000
48  230       2 0.14118236
49  233       2 0.10918737
50  255       2 0.09626711
51  267       2 0.09293250
52  276       2 0.09148887
53  294       2 0.09089459
54  300       2 0.09275940
55  315       2 0.08621885
56  319       2 0.08685256
57  124       3 0.17034700
58  129       2 0.41101695
59  277       1 0.08731164
60  282       1 0.08244820
61  291       1 0.08460603
62  301       1 0.08540001
63  305       1 0.09487108
64  321       1 0.09870618
65  328       1 0.09779287
66  139       2 0.19774011
67  153       1 0.25433526
68  246       1 0.15788847
69  264       1 0.15548333
70  206       3 0.14189484
71  220       3 0.25482384
72  189       1 0.12038849
73  195       1 0.10319541
74  209       1 0.06124244
75  249       1 0.03257403
76  242       2 0.18032695
77  252       2 0.17041732
78  262       2 0.16895988
79  265       2 0.16528158
80  285       2 0.21997899
81  199       1 0.13353239
82  266       3 0.15211885
83  274       3 0.14998724
84  284       3 0.15296488
85  299       3 0.14305566
86  316       3 0.14122507
87  322       3 0.12376537
88  232       2 0.17319812
89  211      NA 0.12431044
90  256      NA 0.10862294

> ################################## G-M #########################################
> #Dataframe de ambos
> result_df_GM<-merge(result_df_G, 
+                     result_df_M,
+                     all.x = T,
+                     by = c("Node","Cluster"))

> result_df_GM
   Node Cluster    G_value    M_value
1    11       2 0.28135525 0.40000000
2   124       3 0.28135525 0.17034700
3   129       2 0.28135525 0.41101695
4   139       2 0.28135525 0.19774011
5   153       1 0.28135525 0.25433526
6    17       2 0.28135525 0.11279230
7   171       2 0.11811683 0.11927115
8   172       2 0.11840475 0.11956188
9   173       2 0.12798707 0.12923784
10  175       2 0.12809278 0.12935690
11  177       2 0.12796359 0.12912156
12  179       2 0.12741943 0.12857616
13  180       2 0.12211043 0.12528001
14  185       2 0.12156942 0.12507648
15  187       2 0.12036829 0.12483342
16  188       2 0.11887525 0.12537969
17  189       1 0.11491738 0.12038849
18   19       3 0.28135525 0.59813084
19  190       2 0.11967715 0.12752633
20  191       3 0.12128591 0.13266421
21  195       1 0.09866755 0.10319541
22  199       1 0.11975730 0.13353239
23  200       2 0.12427687 0.13777250
24  203       3 0.12463498 0.13908463
25  204       2 0.12426975 0.13742336
26  205       2 0.12503983 0.13572945
27  206       3 0.12582687 0.14189484
28  208       3 0.13262767 0.15520562
29  209       1 0.05922463 0.06124244
30  211      NA 0.12106325 0.12431044
31  212       2 0.12549914 0.13530629
32  214       2 0.12959613 0.13469230
33  219       3 0.13426162 0.16459972
34  220       3 0.14765987 0.25482384
35  221       3 0.13459785 0.16457189
36  224       2 0.13291510 0.13666161
37  226       2 0.12897426 0.13364432
38  227       2 0.14051238 0.14155415
39  228       3 0.13998903 0.17070104
40  229       2 0.16380318 0.15605153
41   23       2 0.28135525 0.17592593
42  230       2 0.13977742 0.14118236
43  231       3 0.15049419 0.18307960
44  232       2 0.16255854 0.17319812
45  233       2 0.11429204 0.10918737
46  236       2 0.12854936 0.13367160
47  240       2 0.12361268 0.12810306
48  242       2 0.15007197 0.18032695
49  245       2 0.19843525 0.20904978
50  246       1 0.17782179 0.15788847
51  247       2 0.11457514 0.11829868
52  249       1 0.03377860 0.03257403
53  252       2 0.14395525 0.17041732
54  253       3 0.15434606 0.18608750
55  255       2 0.10661872 0.09626711
56  256      NA 0.11088145 0.10862294
57  261       2 0.09222958 0.09582781
58  262       2 0.14332286 0.16895988
59  264       1 0.17985962 0.15548333
60  265       2 0.13832621 0.16528158
61  266       3 0.18398801 0.15211885
62  267       2 0.10686240 0.09293250
63  274       3 0.19964103 0.14998724
64  276       2 0.11293836 0.09148887
65  277       1 0.08441940 0.08731164
66  278       2 0.09132494 0.09547789
67  280       2 0.09549452 0.10093889
68  282       1 0.07964193 0.08244820
69  284       3 0.19714727 0.15296488
70  285       2 0.17865725 0.21997899
71  290       2 0.09965140 0.10563914
72  291       1 0.08053305 0.08460603
73  294       2 0.11584445 0.09089459
74  299       3 0.17754859 0.14305566
75  300       2 0.13482291 0.09275940
76  301       1 0.08102286 0.08540001
77  305       1 0.09130368 0.09487108
78  315       2 0.12909967 0.08621885
79  316       3 0.17116658 0.14122507
80  319       2 0.12820819 0.08685256
81  321       1 0.09456258 0.09870618
82  322       3 0.15435940 0.12376537
83  328       1 0.09522466 0.09779287
84   44       1 0.28135525 0.03053435
85   48       1 0.28135525 0.15789474
86   50       3 0.28135525 1.00000000
87   67       1 0.28135525 0.00000000
88   73       2 0.28135525 0.14854111
89   79       2 0.28135525 0.73270440
90   90       1 0.28135525 0.00000000

> max_path_length<-max(sapply(paths,length))

> max_path_length
[1] 31

> extended_paths <- lapply(paths, function(path){
+   if (length(path)<max_path_length){
+     c(path,rep(tail(path,1),max_path_length - length(path)))
+   }else{
+     path
+   }
+ })

> extended_paths
[[1]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 249 302 317   1   1   1   1   1
[22]   1   1   1   1   1   1   1   1   1   1

[[2]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 249 302 317 329   2   2   2   2
[22]   2   2   2   2   2   2   2   2   2   2

[[3]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 241
[22] 313   3   3   3   3   3   3   3   3   3

[[4]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291 301 304   4   4   4

[[5]]
 [1] 171 172 173 175 177 179 181 182   5   5   5   5   5   5   5   5   5   5   5   5   5
[22]   5   5   5   5   5   5   5   5   5   5

[[6]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 268 298 312 332
[22]   6   6   6   6   6   6   6   6   6   6

[[7]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199 207 243 248 269 303 324   7   7
[22]   7   7   7   7   7   7   7   7   7   7

[[8]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 192 197   8   8   8   8   8   8   8   8
[22]   8   8   8   8   8   8   8   8   8   8

[[9]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199 207 243 248 269 303   9   9   9
[22]   9   9   9   9   9   9   9   9   9   9

[[10]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 213 279  10  10  10
[22]  10  10  10  10  10  10  10  10  10  10

[[11]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 245
[22]  11  11  11  11  11  11  11  11  11  11

[[12]]
 [1] 171 172 173 175 176 194 216  12  12  12  12  12  12  12  12  12  12  12  12  12  12
[22]  12  12  12  12  12  12  12  12  12  12

[[13]]
 [1] 171 172 173 175 177 178 183  13  13  13  13  13  13  13  13  13  13  13  13  13  13
[22]  13  13  13  13  13  13  13  13  13  13

[[14]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 250 297 331  14  14  14  14  14
[22]  14  14  14  14  14  14  14  14  14  14

[[15]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 196 202 218 234  15  15  15  15  15  15
[22]  15  15  15  15  15  15  15  15  15  15

[[16]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 223 251 273  16
[22]  16  16  16  16  16  16  16  16  16  16

[[17]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 278 280 290  17  17  17  17  17

[[18]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 223 251 273  18
[22]  18  18  18  18  18  18  18  18  18  18

[[19]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253  19  19  19  19  19  19  19  19  19

[[20]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 306 334  20  20  20  20  20  20  20

[[21]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271 288 293 327 336 338  21  21

[[22]]
 [1] 171 172 173 175 176 193 217  22  22  22  22  22  22  22  22  22  22  22  22  22  22
[22]  22  22  22  22  22  22  22  22  22  22

[[23]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 300 315 319  23  23  23

[[24]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 306  24  24  24  24  24  24  24  24

[[25]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271 288 293 326  25  25  25  25

[[26]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266 274 283  26  26  26  26  26  26

[[27]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 278 280 290  27  27  27  27  27

[[28]]
 [1] 171 172 173 175 176 193 217  28  28  28  28  28  28  28  28  28  28  28  28  28  28
[22]  28  28  28  28  28  28  28  28  28  28

[[29]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 192 198 238  29  29  29  29  29  29  29
[22]  29  29  29  29  29  29  29  29  29  29

[[30]]
 [1] 171 172 173 174 210 237  30  30  30  30  30  30  30  30  30  30  30  30  30  30  30
[22]  30  30  30  30  30  30  30  30  30  30

[[31]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291 301 305  31  31  31

[[32]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 241
[22] 313  32  32  32  32  32  32  32  32  32

[[33]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267  33  33  33  33  33  33  33  33

[[34]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 300 315 318  34  34  34

[[35]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 268  35  35  35
[22]  35  35  35  35  35  35  35  35  35  35

[[36]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 196 202 218  36  36  36  36  36  36  36
[22]  36  36  36  36  36  36  36  36  36  36

[[37]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 223  37  37  37
[22]  37  37  37  37  37  37  37  37  37  37

[[38]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 262 265 285 310 330  38  38  38  38

[[39]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 235 258
[22] 289  39  39  39  39  39  39  39  39  39

[[40]]
 [1] 171  40  40  40  40  40  40  40  40  40  40  40  40  40  40  40  40  40  40  40  40
[22]  40  40  40  40  40  40  40  40  40  40

[[41]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291  41  41  41  41  41

[[42]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 278  42  42  42  42  42  42  42

[[43]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195  43  43  43  43  43  43  43  43  43
[22]  43  43  43  43  43  43  43  43  43  43

[[44]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291 301 305 321 328  44

[[45]]
 [1] 171 172 173 175 176 193  45  45  45  45  45  45  45  45  45  45  45  45  45  45  45
[22]  45  45  45  45  45  45  45  45  45  45

[[46]]
 [1] 171 172 173 175 176 194 215  46  46  46  46  46  46  46  46  46  46  46  46  46  46
[22]  46  46  46  46  46  46  46  46  46  46

[[47]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266  47  47  47  47  47  47  47  47

[[48]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264  48  48  48  48  48  48  48  48  48

[[49]]
 [1] 171 172 173 175 176 194 216  49  49  49  49  49  49  49  49  49  49  49  49  49  49
[22]  49  49  49  49  49  49  49  49  49  49

[[50]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 220  50  50  50
[22]  50  50  50  50  50  50  50  50  50  50

[[51]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199 207 243 248 269 303 324  51  51
[22]  51  51  51  51  51  51  51  51  51  51

[[52]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 235 258
[22]  52  52  52  52  52  52  52  52  52  52

[[53]]
 [1] 171 172 173 175 177 178 184  53  53  53  53  53  53  53  53  53  53  53  53  53  53
[22]  53  53  53  53  53  53  53  53  53  53

[[54]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 220 272 295  54
[22]  54  54  54  54  54  54  54  54  54  54

[[55]]
 [1] 171 172 173 175 177 179 180  55  55  55  55  55  55  55  55  55  55  55  55  55  55
[22]  55  55  55  55  55  55  55  55  55  55

[[56]]
 [1] 171 172 173 175 177 178 184 222  56  56  56  56  56  56  56  56  56  56  56  56  56
[22]  56  56  56  56  56  56  56  56  56  56

[[57]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 268 298 312 333
[22] 335  57  57  57  57  57  57  57  57  57

[[58]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 306 334 337  58  58  58  58  58  58

[[59]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 220 272  59  59
[22]  59  59  59  59  59  59  59  59  59  59

[[60]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 262 265 286  60  60  60  60  60  60

[[61]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199 207  61  61  61  61  61  61  61
[22]  61  61  61  61  61  61  61  61  61  61

[[62]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 278 280  62  62  62  62  62  62

[[63]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 307 309 311  63  63  63  63  63  63

[[64]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 232
[22]  64  64  64  64  64  64  64  64  64  64

[[65]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 262 265 285 310  65  65  65  65  65

[[66]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 262 265 285 310 330  66  66  66  66

[[67]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 249  67  67  67  67  67  67  67
[22]  67  67  67  67  67  67  67  67  67  67

[[68]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266 274 284 299  68  68  68  68  68

[[69]]
 [1] 171 172 173 175 176 194 215  69  69  69  69  69  69  69  69  69  69  69  69  69  69
[22]  69  69  69  69  69  69  69  69  69  69

[[70]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291 301 305 321 328  70

[[71]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271 288 293 326  71  71  71  71

[[72]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206  72  72  72  72  72  72
[22]  72  72  72  72  72  72  72  72  72  72

[[73]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 262  73  73  73  73  73  73  73  73

[[74]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 196 201 244  74  74  74  74  74  74  74
[22]  74  74  74  74  74  74  74  74  74  74

[[75]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 235 257
[22]  75  75  75  75  75  75  75  75  75  75

[[76]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 213 279  76  76  76
[22]  76  76  76  76  76  76  76  76  76  76

[[77]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 213  77  77  77  77
[22]  77  77  77  77  77  77  77  77  77  77

[[78]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266 274 284 299 316 322  78  78  78

[[79]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 262 265 285  79  79  79  79  79  79

[[80]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 250  80  80  80  80  80  80  80
[22]  80  80  80  80  80  80  80  80  80  80

[[81]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 268 298 312 333
[22] 335  81  81  81  81  81  81  81  81  81

[[82]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 281  82  82  82  82  82  82

[[83]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 241
[22]  83  83  83  83  83  83  83  83  83  83

[[84]]
 [1] 171 172 173 175 177 179 181 182  84  84  84  84  84  84  84  84  84  84  84  84  84
[22]  84  84  84  84  84  84  84  84  84  84

[[85]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 307 308  85  85  85  85  85  85  85

[[86]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208  86  86  86  86  86
[22]  86  86  86  86  86  86  86  86  86  86

[[87]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 250 297  87  87  87  87  87  87
[22]  87  87  87  87  87  87  87  87  87  87

[[88]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 292 296  88  88  88  88

[[89]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271  89  89  89  89  89  89  89

[[90]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199  90  90  90  90  90  90  90  90
[22]  90  90  90  90  90  90  90  90  90  90

[[91]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 306 334 337  91  91  91  91  91  91

[[92]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 239
[22] 320 339  92  92  92  92  92  92  92  92

[[93]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199 207 243  93  93  93  93  93  93
[22]  93  93  93  93  93  93  93  93  93  93

[[94]]
 [1] 171 172 173 175 177 179 180 185 186 225  94  94  94  94  94  94  94  94  94  94  94
[22]  94  94  94  94  94  94  94  94  94  94

[[95]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 196 202  95  95  95  95  95  95  95  95
[22]  95  95  95  95  95  95  95  95  95  95

[[96]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 249 302 317 329  96  96  96  96
[22]  96  96  96  96  96  96  96  96  96  96

[[97]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 254  97  97  97  97  97  97  97  97  97

[[98]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 307 309  98  98  98  98  98  98  98

[[99]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 220 272 295  99
[22]  99  99  99  99  99  99  99  99  99  99

[[100]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 100 100 100
[22] 100 100 100 100 100 100 100 100 100 100

[[101]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 250 297 331 101 101 101 101 101
[22] 101 101 101 101 101 101 101 101 101 101

[[102]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 192 197 102 102 102 102 102 102 102 102
[22] 102 102 102 102 102 102 102 102 102 102

[[103]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 103 103 103 103 103 103 103 103 103

[[104]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 192 198 238 275 104 104 104 104 104 104
[22] 104 104 104 104 104 104 104 104 104 104

[[105]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271 288 293 327 336 338 105 105

[[106]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 268 298 106 106
[22] 106 106 106 106 106 106 106 106 106 106

[[107]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 270 107 107 107 107 107 107 107

[[108]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291 301 304 323 108 108

[[109]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 260 109 109 109 109 109 109 109 109

[[110]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 254 110 110 110 110 110 110 110 110 110

[[111]]
 [1] 171 172 173 175 177 179 180 185 186 111 111 111 111 111 111 111 111 111 111 111 111
[22] 111 111 111 111 111 111 111 111 111 111

[[112]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 112 112 112 112 112 112 112 112 112 112

[[113]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 300 315 318 113 113 113

[[114]]
 [1] 171 172 173 174 210 237 114 114 114 114 114 114 114 114 114 114 114 114 114 114 114
[22] 114 114 114 114 114 114 114 114 114 114

[[115]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 270 115 115 115 115 115 115 115

[[116]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271 288 293 327 336 116 116 116

[[117]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266 274 283 117 117 117 117 117 117

[[118]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 300 314 325 118 118 118

[[119]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 307 309 311 119 119 119 119 119 119

[[120]]
 [1] 171 172 173 175 177 179 181 120 120 120 120 120 120 120 120 120 120 120 120 120 120
[22] 120 120 120 120 120 120 120 120 120 120

[[121]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 235 257
[22] 121 121 121 121 121 121 121 121 121 121

[[122]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 196 201 122 122 122 122 122 122 122 122
[22] 122 122 122 122 122 122 122 122 122 122

[[123]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199 207 243 248 269 123 123 123 123
[22] 123 123 123 123 123 123 123 123 123 123

[[124]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266 274 284 299 316 322 124 124 124

[[125]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291 301 304 323 125 125

[[126]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 291 301 305 321 126 126

[[127]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 195 209 249 302 127 127 127 127 127 127
[22] 127 127 127 127 127 127 127 127 127 127

[[128]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 192 198 238 275 128 128 128 128 128 128
[22] 128 128 128 128 128 128 128 128 128 128

[[129]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 232
[22] 129 129 129 129 129 129 129 129 129 129

[[130]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 130 130 130 130 130 130 130

[[131]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 196 202 218 234 131 131 131 131 131 131
[22] 131 131 131 131 131 131 131 131 131 131

[[132]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 260 287 132 132 132 132 132 132 132

[[133]]
 [1] 171 172 173 175 177 179 180 185 187 133 133 133 133 133 133 133 133 133 133 133 133
[22] 133 133 133 133 133 133 133 133 133 133

[[134]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 134 134 134 134 134 134 134 134 134

[[135]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271 288 135 135 135 135 135 135

[[136]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 263 307 308 136 136 136 136 136 136 136

[[137]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 137 137 137 137 137 137 137
[22] 137 137 137 137 137 137 137 137 137 137

[[138]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 281 138 138 138 138 138 138

[[139]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266 274 284 299 316 139 139 139 139

[[140]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 239
[22] 140 140 140 140 140 140 140 140 140 140

[[141]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 253 259 271 288 293 327 141 141 141 141

[[142]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 142 142 142 142 142
[22] 142 142 142 142 142 142 142 142 142 142

[[143]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 235 258
[22] 289 143 143 143 143 143 143 143 143 143

[[144]]
 [1] 171 172 173 174 144 144 144 144 144 144 144 144 144 144 144 144 144 144 144 144 144
[22] 144 144 144 144 144 144 144 144 144 144

[[145]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 268 298 312 332
[22] 145 145 145 145 145 145 145 145 145 145

[[146]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 239
[22] 320 339 146 146 146 146 146 146 146 146

[[147]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 231 242
[22] 252 262 265 286 147 147 147 147 147 147

[[148]]
 [1] 171 172 173 175 177 178 183 148 148 148 148 148 148 148 148 148 148 148 148 148 148
[22] 148 148 148 148 148 148 148 148 148 148

[[149]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 260 287 149 149 149 149 149 149 149

[[150]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 239
[22] 320 150 150 150 150 150 150 150 150 150

[[151]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 300 314 325 151 151 151

[[152]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 300 315 319 152 152 152

[[153]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 246
[22] 264 266 274 284 153 153 153 153 153 153

[[154]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 268 298 312 333
[22] 154 154 154 154 154 154 154 154 154 154

[[155]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 300 314 155 155 155 155

[[156]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 229 245
[22] 156 156 156 156 156 156 156 156 156 156

[[157]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 199 207 243 248 157 157 157 157 157
[22] 157 157 157 157 157 157 157 157 157 157

[[158]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 227 230 233
[22] 255 267 276 294 158 158 158 158 158 158

[[159]]
 [1] 171 172 159 159 159 159 159 159 159 159 159 159 159 159 159 159 159 159 159 159 159
[22] 159 159 159 159 159 159 159 159 159 159

[[160]]
 [1] 171 172 173 175 177 179 180 185 186 225 160 160 160 160 160 160 160 160 160 160 160
[22] 160 160 160 160 160 160 160 160 160 160

[[161]]
 [1] 171 172 173 174 210 161 161 161 161 161 161 161 161 161 161 161 161 161 161 161 161
[22] 161 161 161 161 161 161 161 161 161 161

[[162]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 162 162 162 162 162 162 162
[22] 162 162 162 162 162 162 162 162 162 162

[[163]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 192 198 163 163 163 163 163 163 163 163
[22] 163 163 163 163 163 163 163 163 163 163

[[164]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 203 206 208 219 221 228 164 164
[22] 164 164 164 164 164 164 164 164 164 164

[[165]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 292 165 165 165 165 165

[[166]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 223 251 166 166
[22] 166 166 166 166 166 166 166 166 166 166

[[167]]
 [1] 171 172 173 175 177 178 184 222 167 167 167 167 167 167 167 167 167 167 167 167 167
[22] 167 167 167 167 167 167 167 167 167 167

[[168]]
 [1] 171 172 173 175 177 179 180 185 187 188 189 196 201 244 168 168 168 168 168 168 168
[22] 168 168 168 168 168 168 168 168 168 168

[[169]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 212 214 224 226 236 240
[22] 247 261 277 282 292 296 169 169 169 169

[[170]]
 [1] 171 172 173 175 177 179 180 185 187 188 190 191 200 204 205 211 256 170 170 170 170
[22] 170 170 170 170 170 170 170 170 170 170


> calc_means<-function(nodos,df) {
+   #Extraer valores de G y M
+   G_values <- df$G_value[df$Node %in% nodos]
+   M_values <- df$M_value[df$Node %in% nodos]
+   #Calcular promedio- NA == 0
+   G_mean<-median(G_values)
+   M_mean<-median(M_values)
+   G_mean<-ifelse(is.na(G_values),0,G_values)
+   M_mean<-ifelse(is.na(M_values),0,M_values)
+   return(data.frame(G_mean=G_mean,M_mean=M_mean))
+ }

> levels_means<-list()

> for(level in 1:max_path_length){
+   nodos_at_level<-sapply(extended_paths, function(path)path[level])
+   mean_2<-calc_means(nodos_at_level,result_df_GM)
+   levels_means[[level]]<-data.frame(Level=level,G_mean=mean_2$G_mean,M_mean=mean_2$M_mean)
+ }

> level_means_df<- do.call(rbind,levels_means)

> print(level_means_df)
    Level     G_mean     M_mean
1       1 0.11811683 0.11927115
2       2 0.11840475 0.11956188
3       3 0.12798707 0.12923784
4       4 0.12809278 0.12935690
5       5 0.12796359 0.12912156
6       6 0.12741943 0.12857616
7       7 0.12211043 0.12528001
8       8 0.12156942 0.12507648
9       9 0.12036829 0.12483342
10     10 0.11887525 0.12537969
11     11 0.11491738 0.12038849
12     11 0.11967715 0.12752633
13     12 0.12128591 0.13266421
14     12 0.09866755 0.10319541
15     13 0.11975730 0.13353239
16     13 0.12427687 0.13777250
17     13 0.05922463 0.06124244
18     14 0.12463498 0.13908463
19     14 0.12426975 0.13742336
20     14 0.03377860 0.03257403
21     14 0.28135525 0.00000000
22     15 0.12503983 0.13572945
23     15 0.12582687 0.14189484
24     15 0.28135525 0.00000000
25     15 0.28135525 0.00000000
26     16 0.13262767 0.15520562
27     16 0.12106325 0.12431044
28     16 0.12549914 0.13530629
29     16 0.28135525 0.00000000
30     16 0.28135525 0.00000000
31     17 0.12959613 0.13469230
32     17 0.13426162 0.16459972
33     17 0.11088145 0.10862294
34     17 0.28135525 0.00000000
35     17 0.28135525 0.00000000
36     18 0.14765987 0.25482384
37     18 0.13459785 0.16457189
38     18 0.13291510 0.13666161
39     18 0.28135525 0.00000000
40     18 0.28135525 0.00000000
41     19 0.12897426 0.13364432
42     19 0.14051238 0.14155415
43     19 0.13998903 0.17070104
44     19 0.28135525 1.00000000
45     19 0.28135525 0.00000000
46     19 0.28135525 0.00000000
47     20 0.16380318 0.15605153
48     20 0.13977742 0.14118236
49     20 0.15049419 0.18307960
50     20 0.12854936 0.13367160
51     20 0.28135525 1.00000000
52     20 0.28135525 0.00000000
53     20 0.28135525 0.00000000
54     21 0.16255854 0.17319812
55     21 0.11429204 0.10918737
56     21 0.12361268 0.12810306
57     21 0.15007197 0.18032695
58     21 0.19843525 0.20904978
59     21 0.17782179 0.15788847
60     21 0.28135525 1.00000000
61     21 0.28135525 0.00000000
62     21 0.28135525 0.00000000
63     22 0.28135525 0.40000000
64     22 0.28135525 0.41101695
65     22 0.11457514 0.11829868
66     22 0.14395525 0.17041732
67     22 0.15434606 0.18608750
68     22 0.10661872 0.09626711
69     22 0.17985962 0.15548333
70     22 0.28135525 1.00000000
71     22 0.28135525 0.00000000
72     22 0.28135525 0.00000000
73     23 0.28135525 0.40000000
74     23 0.28135525 0.41101695
75     23 0.28135525 0.59813084
76     23 0.09222958 0.09582781
77     23 0.14332286 0.16895988
78     23 0.18398801 0.15211885
79     23 0.10686240 0.09293250
80     23 0.28135525 0.15789474
81     23 0.28135525 1.00000000
82     23 0.28135525 0.00000000
83     23 0.28135525 0.00000000
84     24 0.28135525 0.40000000
85     24 0.28135525 0.41101695
86     24 0.28135525 0.59813084
87     24 0.13832621 0.16528158
88     24 0.19964103 0.14998724
89     24 0.11293836 0.09148887
90     24 0.08441940 0.08731164
91     24 0.09132494 0.09547789
92     24 0.28135525 0.15789474
93     24 0.28135525 1.00000000
94     24 0.28135525 0.00000000
95     24 0.28135525 0.14854111
96     24 0.28135525 0.00000000
97     25 0.28135525 0.40000000
98     25 0.28135525 0.41101695
99     25 0.28135525 0.59813084
100    25 0.09549452 0.10093889
101    25 0.07964193 0.08244820
102    25 0.19714727 0.15296488
103    25 0.17865725 0.21997899
104    25 0.11584445 0.09089459
105    25 0.28135525 0.15789474
106    25 0.28135525 1.00000000
107    25 0.28135525 0.00000000
108    25 0.28135525 0.14854111
109    25 0.28135525 0.00000000
110    26 0.28135525 0.40000000
111    26 0.28135525 0.41101695
112    26 0.28135525 0.25433526
113    26 0.28135525 0.59813084
114    26 0.09965140 0.10563914
115    26 0.08053305 0.08460603
116    26 0.17754859 0.14305566
117    26 0.13482291 0.09275940
118    26 0.28135525 0.15789474
119    26 0.28135525 1.00000000
120    26 0.28135525 0.00000000
121    26 0.28135525 0.14854111
122    26 0.28135525 0.73270440
123    26 0.28135525 0.00000000
124    27 0.28135525 0.40000000
125    27 0.28135525 0.41101695
126    27 0.28135525 0.25433526
127    27 0.28135525 0.11279230
128    27 0.28135525 0.59813084
129    27 0.08102286 0.08540001
130    27 0.12909967 0.08621885
131    27 0.17116658 0.14122507
132    27 0.28135525 0.15789474
133    27 0.28135525 1.00000000
134    27 0.28135525 0.00000000
135    27 0.28135525 0.14854111
136    27 0.28135525 0.73270440
137    27 0.28135525 0.00000000
138    28 0.28135525 0.40000000
139    28 0.28135525 0.41101695
140    28 0.28135525 0.19774011
141    28 0.28135525 0.25433526
142    28 0.28135525 0.11279230
143    28 0.28135525 0.59813084
144    28 0.09130368 0.09487108
145    28 0.12820819 0.08685256
146    28 0.15435940 0.12376537
147    28 0.28135525 0.15789474
148    28 0.28135525 1.00000000
149    28 0.28135525 0.00000000
150    28 0.28135525 0.14854111
151    28 0.28135525 0.73270440
152    28 0.28135525 0.00000000
153    29 0.28135525 0.40000000
154    29 0.28135525 0.17034700
155    29 0.28135525 0.41101695
156    29 0.28135525 0.19774011
157    29 0.28135525 0.25433526
158    29 0.28135525 0.11279230
159    29 0.28135525 0.59813084
160    29 0.28135525 0.17592593
161    29 0.09456258 0.09870618
162    29 0.28135525 0.15789474
163    29 0.28135525 1.00000000
164    29 0.28135525 0.00000000
165    29 0.28135525 0.14854111
166    29 0.28135525 0.73270440
167    29 0.28135525 0.00000000
168    30 0.28135525 0.40000000
169    30 0.28135525 0.17034700
170    30 0.28135525 0.41101695
171    30 0.28135525 0.19774011
172    30 0.28135525 0.25433526
173    30 0.28135525 0.11279230
174    30 0.28135525 0.59813084
175    30 0.28135525 0.17592593
176    30 0.09522466 0.09779287
177    30 0.28135525 0.15789474
178    30 0.28135525 1.00000000
179    30 0.28135525 0.00000000
180    30 0.28135525 0.14854111
181    30 0.28135525 0.73270440
182    30 0.28135525 0.00000000
183    31 0.28135525 0.40000000
184    31 0.28135525 0.17034700
185    31 0.28135525 0.41101695
186    31 0.28135525 0.19774011
187    31 0.28135525 0.25433526
188    31 0.28135525 0.11279230
189    31 0.28135525 0.59813084
190    31 0.28135525 0.17592593
191    31 0.28135525 0.03053435
192    31 0.28135525 0.15789474
193    31 0.28135525 1.00000000
194    31 0.28135525 0.00000000
195    31 0.28135525 0.14854111
196    31 0.28135525 0.73270440
197    31 0.28135525 0.00000000

> averages_total <- level_means_df %>%
+   group_by(Level) %>%
+   summarise(across(everything(),median))

> averages_total
# A tibble: 31 × 3
   Level G_mean M_mean
   <int>  <dbl>  <dbl>
 1     1  0.118  0.119
 2     2  0.118  0.120
 3     3  0.128  0.129
 4     4  0.128  0.129
 5     5  0.128  0.129
 6     6  0.127  0.129
 7     7  0.122  0.125
 8     8  0.122  0.125
 9     9  0.120  0.125
10    10  0.119  0.125
# ℹ 21 more rows
# ℹ Use `print(n = ...)` to see more rows

> # Crear el gráfico
> ggplot(averages_total, aes(x = Level)) + 
+   geom_point(aes(y=G_mean), color="blue") + # Puntos para G
+   geom_line(aes(y=G_mean), color="blue",linetype="dashed")+ #Línea para G
+   geom_point(aes(y=M_mean), color="red") + # Puntos para M
+   geom_line(aes(y=M_mean), color="red",linetype="dashed")+ #Línea para M
+   scale_y_continuous(
+     name = "G",
+     sec.axis = sec_axis(~.*2,name = "M")
+   ) +
+   annotate("text",x=mean(averages_total$Level),y=mean(averages_total$G_mean),label="G trait",hjust=0.7,vjust=-0.6,size=4,color="blue")+
+   annotate("text",x=mean(averages_total$Level),y=mean(averages_total$M_mean),label="M trait",hjust=0.25,vjust=-0.6,size=4,color="red")+
+   labs(
+     x="Number of clades",
+     title = "The G and M traits for the tree of total communities",
+   ) +
+   theme_classic()

> ########################## Líneas por cluster ##################################
> # Filtrar el nodo 16 (raiz)
> #node_171_G <- result_df_G[result_df_G$Node == 171, ]
> #node_171_M <- result_df_M[result_df_M$Node == 171, ]
> # Crear tres copias cambiando el valor del Cluster
> #node_171_cluster_1G <- node_171_G
> #node_171_cluster_1G$Cluster <- 1
> 
> #node_171_cluster_2G <- node_171_G
> #node_171_cluster_2G$Cluster <- 2
> 
> 
> #node_171_cluster_1M <- node_171_M
> #node_171_cluster_1M$Cluster <- 1
> 
> #node_171_cluster_2M <- node_171_M
> #node_171_cluster_2M$Cluster <- 2
> 
> 
> # Unir las filas modificadas al dataframe original
> #result_df_G <- rbind(result_df_G, node_171_cluster_1G, node_171_cluster_2G)
> #tail(result_df_G)
> #result_df_M <- rbind(result_df_M, node_171_cluster_1M,node_171_cluster_2M)
> #tail(result_df_M)
> ##Eliminar duplicados
> #result_df_G <- result_df_G %>% distinct()
> #result_df_M <- result_df_M %>% distinct()
> 
> #Dataframe de ambos
> #result_df_GM <- merge(result_df_G, 
> #                      result_df_M, 
> #                      all.x = TRUE, 
> #                      by = c("Node", "Cluster"))
> 
> #result_df_GM
> #max_path_length<-max(sapply(paths,length))
> #max_path_length
> #extended_paths <- lapply(paths, function(path){
> #  if (length(path)<max_path_length){
> #    c(path,rep(tail(path,1),max_path_length - length(path)))
> #  }else{
> #    path
> #  }
> #})
> #extended_paths
> 
> #calc_means <- function(nodos, df) {
>   # Filtrar los datos para los nodos en el nivel actual
>  # df_filtered <- df %>% filter(Node %in% nodos)
>   
>   # Calcular promedios por cluster
>   #G_means <- df_filtered %>%
>    # group_by(Cluster) %>%
>     #summarise(G_mean = median(G_value, na.rm = TRUE), .groups = 'drop')
>   
>   #M_means <- df_filtered %>%
>   #  group_by(Cluster) %>%
>   #  summarise(M_mean = median(M_value, na.rm = TRUE), .groups = 'drop')
>   
>   # Combinar promedios de G y M para cada cluster
> #  cluster_means <- merge(G_means, M_means, by = "Cluster", all = TRUE)
>   
>   # Llenar NAs con 0
> #  cluster_means[is.na(cluster_means)] <- 0
>   
> #  return(cluster_means)
> #}
> 
> #levels_means <- list()
> #for (level in 1:max_path_length) {
>   # Obtener nodos en el nivel actual
>  # nodos_at_level <- sapply(extended_paths, function(path) path[level])
>   
>   # Calcular los promedios para cada cluster en este nivel
>   #mean_data <- calc_means(nodos_at_level, result_df_GM)
>   
>   # Agregar la columna de nivel
>   #mean_data$Level <- level
>   
>   # Almacenar resultados en la lista
>   #levels_means[[level]] <- mean_data
> #}
> 
> # Convertir lista en dataframe
> #level_means_df <- do.call(rbind, levels_means)
> #print(level_means_df)
> 
> # Calcular promedio general por nivel
> #averages_t_cluster <- level_means_df %>%
> #  group_by(Level, Cluster) %>%
> #  summarise(across(starts_with("G_mean"), median, na.rm = TRUE),
> #            across(starts_with("M_mean"), median, na.rm = TRUE),
> #            .groups = 'drop')
> #averages_t_cluster
> 
> # Crear el gráfico con ggplot2
> #ggplot(averages_t_cluster) +
>   # Línea continua para G_mean
> #  geom_line(aes(x = Level, y = G_mean, color = factor(Cluster), linetype = "G_mean", group = Cluster), 
> #            size = 1) +
>   # Línea punteada para M_mean
>  # geom_line(aes(x = Level, y = M_mean, color = factor(Cluster), linetype = "M_mean", group = Cluster), 
>  #           size = 1) +
>   # Configuración de colores
>   #scale_color_manual(values = c("blue", "red")) +
>   # Configuración de tipos de línea
>   #scale_linetype_manual(values = c("G_mean" = "solid", "M_mean" = "dotted")) +
>   #labs(
>    # title = "The G and M traits of the tree of sampled communities",
>   #  x = "Number of clades",
>   #  y = "G mean",
>   #  color = "Cluster",
>   #  linetype = "Trait"
>   #) +
>   # Agregar eje secundario para M
>   #scale_y_continuous(
>   #  sec.axis = sec_axis(~ ., name = "M mean")
>   #) +
>   #theme_classic()

### [Step 15/17] Running: scripts_fv/OBJETIVO_5.6.Clades_vs_Ancv2.R ###


> ##########################################################################################################################################################
> #########Project 111160402: Cultural phylogenetics and coevolution of wealth inheritance and land tenure norms in agropastoralist communities.############
> ##########################################################################################################################################################
> #### OBJETIVO 5 ####
> ### Part 6 ###
> ### To plot over tips of the resulting trees the estimated values of each trait, and compute the most likely values for each at the internal nodes ###
> 
> 
> ### Extraer valores de estados ancestrales y numero de clados acumulados
> #Librerías
> library(ape)

> library(dplyr)

> library(ggplot2)

> library(phytools)

> ################################################################################
> ######################## Comunidades muestreadas ###############################
> ################################################################################
> 
> # Cluster
> df_tree <- as.data.frame(cophenetic.phylo(consensus_tree))

> df_tree <- na.omit(df_tree)

> df_tree <- as.data.frame(lapply(df_tree, as.numeric))

> df_tree_scaled <- scale(df_tree)

> df_tree_scaled_numeric <- as.data.frame(df_tree_scaled)  # Asegúrate de que sea un data frame de valores numéricos

> kmeans_result <-kmeans(df_tree_scaled_numeric, centers = 3, iter.max = 100, nstart = 100)

> Cluster <- as.factor(c(kmeans_result$cluster))

> names(Cluster) <- colnames(kmeans_result$centers)

> # Crear una tabla de clusters
> clusters_table <- data.frame(tip.label = names(Cluster), cluster = Cluster)

> clusters_table
                                    tip.label cluster
EL_DIVISADERO                   EL_DIVISADERO       2
EL_ALTAR                             EL_ALTAR       2
MANQUEHUA                           MANQUEHUA       3
PUNITAQUI                           PUNITAQUI       1
RINCONADA_DE_PUNITAQUI RINCONADA_DE_PUNITAQUI       2
BARRAZA                               BARRAZA       1
CANELILLA_OVALLE             CANELILLA_OVALLE       3
CANELA_BAJA                       CANELA_BAJA       1
LA_CALERA                           LA_CALERA       1
EL_ESPINAL                         EL_ESPINAL       3
GUALLIGUAICA                     GUALLIGUAICA       2
HUENTELAUQUEN                   HUENTELAUQUEN       1
CASTILLO_MAL_PASO           CASTILLO_MAL_PASO       1
MONTE_PATRIA                     MONTE_PATRIA       1
LA_POLVADA                         LA_POLVADA       2

> ################################## S ###########################################
> # Tree
> S_tree <- read.tree(text = "(((((((GUALLIGUAICA:0.127973,LA_POLVADA:0.127973)[&CI={0.221892,0.387561},ancstate={0.304726}]:0.123261,EL_DIVISADERO:0.251235)[&CI={0.211899,0.418322},ancstate={0.315111}]:0.142584,RINCONADA_DE_PUNITAQUI:0.393819)[&CI={0.173239,0.40556},ancstate={0.289399}]:0.077413,EL_ALTAR:0.471233)[&CI={0.168678,0.414167},ancstate={0.291423}]:0.163097,CANELILLA_OVALLE:0.634329)[&CI={0.142831,0.417768},ancstate={0.280299}]:0.084733,MANQUEHUA:0.719062)[&CI={0.121324,0.412715},ancstate={0.26702}]:0.280938,((((((CANELA_BAJA:0.169277,CASTILLO_MAL_PASO:0.169277)[&CI={0.105892,0.25871},ancstate={0.182301}]:0.011386,PUNITAQUI:0.180663)[&CI={0.106218,0.258429},ancstate={0.182324}]:0.02304,MONTE_PATRIA:0.203702)[&CI={0.104629,0.267465},ancstate={0.186047}]:0.125087,BARRAZA:0.328789)[&CI={0.109971,0.322882},ancstate={0.216427}]:0.069566,LA_CALERA:0.398355)[&CI={0.101371,0.336418},ancstate={0.218895}]:0.215934,HUENTELAUQUEN:0.614289)[&CI={0.086222,0.386008},ancstate={0.236115}]:0.385711,EL_ESPINAL:1)[&CI={0.099883,0.43725},ancstate={0.268567}];")

> #TODO Found more than one class "phylo" in cache; using the first, from namespace 'TreeTools'
> #Also defined by ‘tidytree’
> 
> par(mar=c(1,1,1,1))

> plot(S_tree,font=2); nodelabels(bg="white",cex =0.5)

> terminal_nodes <-S_tree$tip.label

> terminal_nodes
 [1] "GUALLIGUAICA"           "LA_POLVADA"             "EL_DIVISADERO"         
 [4] "RINCONADA_DE_PUNITAQUI" "EL_ALTAR"               "CANELILLA_OVALLE"      
 [7] "MANQUEHUA"              "CANELA_BAJA"            "CASTILLO_MAL_PASO"     
[10] "PUNITAQUI"              "MONTE_PATRIA"           "BARRAZA"               
[13] "LA_CALERA"              "HUENTELAUQUEN"          "EL_ESPINAL"            

> #ancestral_nodes <- Ancestors(S_tree,1:15,"all")
> paths <- nodepath(S_tree,1:15)

> paths
[[1]]
[1] 16 17 18 19 20 21 22  1

[[2]]
[1] 16 17 18 19 20 21 22  2

[[3]]
[1] 16 17 18 19 20 21  3

[[4]]
[1] 16 17 18 19 20  4

[[5]]
[1] 16 17 18 19  5

[[6]]
[1] 16 17 18  6

[[7]]
[1] 16 17  7

[[8]]
[1] 16 23 24 25 26 27 28  8

[[9]]
[1] 16 23 24 25 26 27 28  9

[[10]]
[1] 16 23 24 25 26 27 10

[[11]]
[1] 16 23 24 25 26 11

[[12]]
[1] 16 23 24 25 12

[[13]]
[1] 16 23 24 13

[[14]]
[1] 16 23 14

[[15]]
[1] 16 15


> # Extraer los estados ancestrales
> S_anc_states <- svc$anc$ace

> S_anc_states
       16        17        18        19        20        21        22        23        24 
0.2753403 0.2753403 0.2235413 0.2736035 0.2813082 0.2934981 0.2930672 0.3034678 0.3006188 
       25        26        27        28        29 
0.2233478 0.2222362 0.1827274 0.1761747 0.1761747 

> #Extraer estados actuales
> S_trait_vector <- setNames(S_trait$S, rownames(S_trait))

> print(S_trait_vector)
               BARRAZA            CANELA_BAJA       CANELILLA_OVALLE 
             0.2846154              0.1513067              0.3364486 
     CASTILLO_MAL_PASO               EL_ALTAR          EL_DIVISADERO 
             0.2129630              0.3358779              0.3815789 
            EL_ESPINAL           GUALLIGUAICA          HUENTELAUQUEN 
             0.3582090              0.4516129              0.2334218 
             LA_CALERA             LA_POLVADA              MANQUEHUA 
             0.2012579              0.1470588              0.1503680 
          MONTE_PATRIA              PUNITAQUI RINCONADA_DE_PUNITAQUI 
             0.1694915              0.1534840              0.2080925 

> #Crear un data.frame
> result_list <- list() 

> # Iterar sobre cada nodo terminal y su ruta desde la raíz
> for (i in seq_along(paths)) {
+   # Nodo terminal y ruta de nodos desde la raíz hasta el nodo terminal
+   tip <- terminal_nodes[i]
+   path <- paths[[i]]
+   
+   # Obtener el cluster del nodo terminal desde clusters_table
+   cluster <- clusters_table[clusters_table$tip.label == tip, "cluster"]
+   
+   # Obtener el valor de S para el nodo terminal desde S_trait
+   S_value_terminal <- S_trait_vector[tip]
+   
+   # Agregar el nodo terminal al dataframe con su valor de S y su cluster
+   result_list <- append(result_list, list(data.frame(
+     Node = path[length(path)],   # Último nodo en la ruta, que es el terminal
+     Cluster = cluster,
+     S_value = S_value_terminal
+   )))
+   
+   # Agregar cada nodo ancestral en el path (excluyendo el terminal)
+   for (node in head(path, -1)) {  # head(path, -1) excluye el último nodo terminal
+     # Asignar el valor de S para el nodo ancestral
+     S_value <- ifelse(as.character(node) %in% names(S_anc_states), S_anc_states[as.character(node)], NA)
+     
+     # Agregar el nodo ancestral, cluster y valor de S al resultado
+     result_list <- append(result_list, list(data.frame(
+       Node = node,
+       Cluster = cluster,  # Asignamos el mismo cluster del terminal
+       S_value = S_value
+     )))
+   }
+ }

> # Combinar todos los dataframes en uno solo
> result_df_S <- do.call(rbind, result_list)

> result_df_S <- result_df_S[!duplicated(result_df_S$Node), ]  # Eliminar filas duplicadas de cada nodo

> row.names(result_df_S)<-NULL

> print(result_df_S)
   Node Cluster   S_value
1     1       2 0.4516129
2    16       2 0.2753403
3    17       2 0.2753403
4    18       2 0.2235413
5    19       2 0.2736035
6    20       2 0.2813082
7    21       2 0.2934981
8    22       2 0.2930672
9     2       2 0.1470588
10    3       2 0.3815789
11    4       2 0.2080925
12    5       2 0.3358779
13    6       3 0.3364486
14    7       3 0.1503680
15    8       1 0.1513067
16   23       1 0.3034678
17   24       1 0.3006188
18   25       1 0.2233478
19   26       1 0.2222362
20   27       1 0.1827274
21   28       1 0.1761747
22    9       1 0.2129630
23   10       1 0.1534840
24   11       1 0.1694915
25   12       1 0.2846154
26   13       1 0.2012579
27   14       1 0.2334218
28   15       3 0.3582090

> # Expansión de result_df_S basado en paths (distancia desde la raíz)
> expanded_df <- do.call(rbind, lapply(1:length(paths), function(i) {
+   path <- paths[[i]]
+   # Obtener el cluster y valores de S para cada nodo en el path
+   cluster <- result_df_S$Cluster[match(path[length(path)], result_df_S$Node)]
+   S_values <- result_df_S$S_value[match(path, result_df_S$Node)]
+   # Crear una columna de pasos desde la raíz (distancia en pasos desde el nodo 16)
+   steps_from_root <- seq(0, length(path)-1)
+   # Crear un dataframe temporal para el path
+   data.frame(Step = steps_from_root, Cluster = cluster, S_value = S_values, Terminal_Node = path[length(path)])
+ }))

> max_steps <- max((expanded_df$Step))

> expanded_df_extended <- do.call(rbind, lapply(split(expanded_df, expanded_df$Terminal_Node), function(df) {
+   # Calcular valores adicionales de S
+   last_step <- max(df$Step)
+   last_value <-tail(df$S_value, 1)
+   cluster <- unique(df$Cluster)
+   
+   # Generar filas adicionales hasta el máximo de pasos deseado
+   additional_steps <- data.frame(
+     Step = seq(last_step, max_steps),
+     Cluster = cluster,
+     S_value = last_value,  # Usamos el último valor
+     Terminal_Node = df$Terminal_Node[1]
+   )
+   
+   # Combinar el dataframe original con los pasos adicionales
+   rbind(df, additional_steps)
+ }))

> # Graficar los valores de S a lo largo del camino de nodos desde la raíz para cada cluster
> ggplot(expanded_df_extended, aes(x = Step, y = S_value, color = as.factor(Cluster), group = interaction(Cluster, Terminal_Node))) +
+   geom_line(size = 1) +
+   geom_point(size = 2) +  # Añadir puntos en cada nodo
+   geom_smooth(aes(group = Cluster), method = "lm", se = FALSE, size = 1.2, linetype = "dashed") +  # Línea de tendencia
+   labs(
+     title = "Valores de S a lo largo de los nodos",
+     x = "Paso desde la raíz",
+     y = "Valor de S",
+     color = "Cluster"
+   ) +
+   theme_minimal() +
+   scale_color_manual(values = c("blue", "green", "red"))  # Colores para cada cluster
Warning in script: scripts_fv/OBJETIVO_5.6.Clades_vs_Ancv2.R

### [Step 16/17] Running: scripts_fv/OBJETIVO_5.7.HIP_1.R ###


> ##########################################################################################################################################################
> #########Project 111160402: Cultural phylogenetics and coevolution of wealth inheritance and land tenure norms in agropastoralist communities.############
> ##########################################################################################################################################################
> 
> #### HIPOTESIS 1 ####
> #### OBJETIVO 5 ####
> ### Part 7 ###
> ### To plot over tips of the resulting trees the estimated values of each trait, and compute the most likely values for each at the internal nodes ###
> 
> ###There was a change in wealth inheritance cultural norms, transiting from agnatic primogeniture
> ###(Spanish majorat) to non partible multigeniture originating the common tenure norm of property of right.
> ###Predictions of this hypothesis are high values of S and A, and low values for R at the basal internal
> ###nodes of the tree if agnatic primogeniture is the ancestral state. If that is followed by an early stage of
> ###non-partible multigeniture, R and S should be both low at the following internal nodes of the tree.
> 
> ### Estados basales sampled communities###
> 
> crear_grafico <- function(vc,v1, label,filename) {
+   png(filename,width = 1400, height = 1000, res = 200)
+   # Ajustar margen y tama?o de texto para evitar colapso
+   par(mar = c(1, 1, 4, 1) + 0.1)
+   
+   # Ajustar la separacion entre nodos y otros parametros
+   plot(vc$obj, type = "phylogram",offset = 3, legend = 0.7 * max(nodeHeights(vc$obj$tree)), ftype = "reg", leg.txt = label, no.margin = F)
+   title(main = paste(label, "ancestral tree"), line = 2)
+   nodelabels(text = round(vc$anc$ace, 4), cex = 0.5, bg = "lightblue")
+   tip_values <- v1[consensus_tree$tip.label] 
+   tiplabels(text = round(tip_values, 4), cex = 0.6, bg = "lightpink", offset = 0.06)
+   dev.off()
+ }

> # Llamar a la funci?n para cada comunidad muestreada
> crear_grafico(svc,sv1, "S", "Figures/S_ancestral_tree_muestra.png")
RStudioGD 
        2 

> crear_grafico(gvc,gv1,"G", "Figures/G_ancestral_tree_muestra.png")
RStudioGD 
        2 

> crear_grafico(avc,av1, "A", "Figures/A_ancestral_tree_muestra.png")
RStudioGD 
        2 

> #crear_grafico(rvc,rv1, "R", "Figures/R_ancestral_tree_muestra.png") #TODO rror in h(simpleError(msg, call)) : error in evaluating the argument 'x' in selecting a method for function 'plot': object 'rvc' not found
> crear_grafico(mvc,mv1, "M", "Figures/M_ancestral_tree_muestra.png")
RStudioGD 
        2 

> ### Estados basales total communities###
> crear_grafico2 <- function(vt,v2, label,filename) {
+   pdf(filename,
+       width=200,
+       height=250)
+   # Ajustar margen y tama?o de texto para evitar colapso
+   par(mar = c(4, 4, 2, 2) + 0.1)
+   plot(vt$obj, type = "phylogram",offset = 20, legend = 0.7 * max(nodeHeights(vt$obj$tree)), ftype = "reg",cex=8, leg.txt = label, no.margin = F)
+   title(main = paste(label, "ancestral tree"), line = 2)
+   nodelabels(text = round(vt$anc$ace, 4), cex = 5, bg = "lightblue")
+   tip_values <- v2[y_total$tip.label] 
+   tiplabels(text = round(tip_values, 4), cex = 5, bg = "lightpink", offset = 0.005)
+   # Cerrar el dispositivo gr?fico PDF
+   dev.off()
+ }

> # Llamar a la funcion para el total de comunidades
> crear_grafico2(svt, sv2, "S", "Figures/S_ancestral_tree_total.pdf")
RStudioGD 
        2 

> crear_grafico2(gvt, gv2, "G", "Figures/G_ancestral_tree_total.pdf")
RStudioGD 
        2 

> crear_grafico2(avt, av2, "A", "Figures/A_ancestral_tree_total.pdf")
RStudioGD 
        2 

> #crear_grafico2(rvt, rv2, "R", "Figures/R_ancestral_tree_total.pdf") #TODO Error in h(simpleError(msg, call)) : error in evaluating the argument 'x' in selecting a method for function 'plot': object 'rvt' not found
> crear_grafico2(mvt, mv2, "M", "Figures/M_ancestral_tree_total.pdf")
RStudioGD 
        2 

> ### CREACION DE POBLACION EN LA BASE (FOSIL) ###
> ## Hombre,una sola persona, con un solo derecho, un apellido.
> 
> ##COMUNIDADES MUESTREADAS (consensus_tree)
> 
> incorporacion_fosil <- function(fosil,valor,or_tree,label,filename, valor_raiz = 0)  {
+   #incorporar fosil
+   pm<-setNames(c(1000,rep(fosil,or_tree$Nnode)),
+                c("sig2",1:or_tree$Nnode+length(or_tree$tip.label)))
+   #incorporacion en la raiz
+   nn<-as.character((length(or_tree$tip.label)+1))
+   pm[nn]<- valor_raiz
+   # Varianza previa
+   pv <- setNames(c(1000^2, rep(1000, length(pm) - 1)), names(pm))
+   pv[as.character(nn)] <- 1e-100
+   # Ejecutar MCMC
+   mcmc <- anc.Bayes(or_tree, valor, ngen = 100000,
+                     control = list(pr.mean = pm, pr.var = pv,
+                                    a = pm[nn],
+                                    y = pm[as.character(2:or_tree$Nnode + length(or_tree$tip.label))]))
+   mcmc_tree <- mcmc$tree
+   # Obtener valores ancestrales estimados
+   w <- as.data.frame(mcmc$mcmc)
+   exclude_cols <- c("gen", "sig2", "logLik")
+   existing_cols <- intersect(exclude_cols, colnames(w))
+   w <- colMeans(w[, !(colnames(w) %in% existing_cols)])
+   # Agregar valor tip.labels
+   trait_name <- paste0(label, "_trait2")
+   tip.community <- paste0 (mcmc_tree$tip.label)
+   name <- get(trait_name)[tip.community,]
+   
+   # Guardar el grafico como una imagen PNG
+ 
+   png(filename,width = 1400, height = 1000, res = 200)
+   # Ajustar la separacion entre nodos y otros parametros
+   par(mar = c(1, 1, 4, 1) + 0.1)
+   sorted_trait_vector <- valor[sort(or_tree$tip.label)]
+   obj <- contMap(mcmc_tree, sorted_trait_vector, plot = TRUE)
+   plot(obj, type = "phylogram",offset = 3, legend = 0.7 * max(nodeHeights(obj$tree)), ftype = "reg", leg.txt = label, no.margin = F)
+   title(main = paste(label, "ancestral tree"), line = 2)
+   nodelabels(text = round(w, 4), cex = 0.5, bg = "lightblue")
+   tip_values <- valor[or_tree$tip.label] 
+   tiplabels(text = round(tip_values, 4), cex = 0.6, bg = "lightpink", offset = 0.06)
+   #plot(mcmc_tree, show.tip.label = TRUE, cex = 0.6, edge.width = 2, label.offset = 0.15, direction = "rightwards", mar = c(6, 6, 3, 3) + 0.1)
+   #title(main = paste(label, "fossil ancestral tree"), line = 2)
+   #nodelabels(text = round(w, 4), cex = 0.5, bg = "lightblue")
+   #tiplabels(text = round(name, 4), cex = 0.6, bg = "lightpink", offset = 0.005)
+   dev.off()
+ }

> consensus_tree$edge.length <- consensus_tree$edge.length + 1e-8 # Se le agrega una distancia mínima

> incorporacion_fosil(0,sv1,consensus_tree,"S","Figures/S_fosil_muestra.png", valor_raiz = 0) #S
Control parameters (set by user or default):
List of 7
 $ sig2   : num 0.0501
 $ a      : Named num 0
  ..- attr(*, "names")= chr "16"
 $ y      : Named num [1:13] 0 0 0 0 0 0 0 0 0 0 ...
  ..- attr(*, "names")= chr [1:13] "17" "18" "19" "20" ...
 $ pr.mean: Named num [1:15] 1000 0 0 0 0 0 0 0 0 0 ...
  ..- attr(*, "names")= chr [1:15] "sig2" "16" "17" "18" ...
 $ pr.var : Named num [1:15] 1e+06 1e-100 1e+03 1e+03 1e+03 ...
  ..- attr(*, "names")= chr [1:15] "sig2" "16" "17" "18" ...
 $ prop   : num [1:15] 0.000264 0.000264 0.000264 0.000264 0.000264 ...
 $ sample : num 100
Starting MCMC...
Done MCMC.
RStudioGD 
        2 

> #TODO Error in anc.Bayes(or_tree, valor, ngen = 1e+05, control = list(pr.mean = pm,  : some branch lengths are 0 or nearly zero
> 
> #incorporacion_fosil(1,rv1,consensus_tree,"R", "Figures/R_fosil_muestra.png",valor_raiz = 1) #R
> 
> incorporacion_fosil(1,av1,consensus_tree,"A", "Figures/A_fosil_muestra.png",valor_raiz = 1) #A
Control parameters (set by user or default):
List of 7
 $ sig2   : num 0.0122
 $ a      : Named num 1
  ..- attr(*, "names")= chr "16"
 $ y      : Named num [1:13] 1 1 1 1 1 1 1 1 1 1 ...
  ..- attr(*, "names")= chr [1:13] "17" "18" "19" "20" ...
 $ pr.mean: Named num [1:15] 1000 1 1 1 1 1 1 1 1 1 ...
  ..- attr(*, "names")= chr [1:15] "sig2" "16" "17" "18" ...
 $ pr.var : Named num [1:15] 1e+06 1e-100 1e+03 1e+03 1e+03 ...
  ..- attr(*, "names")= chr [1:15] "sig2" "16" "17" "18" ...
 $ prop   : num [1:15] 6.42e-05 6.42e-05 6.42e-05 6.42e-05 6.42e-05 ...
 $ sample : num 100
Starting MCMC...
Done MCMC.
RStudioGD 
        2 

> #TODO Error in anc.Bayes(or_tree, valor, ngen = 1e+05, control = list(pr.mean = pm,  : some branch lengths are 0 or nearly zero
> 
> incorporacion_fosil(0,gv1,consensus_tree, "G", "Figures/G_fosil_muestra.png",valor_raiz = 0) #G
Control parameters (set by user or default):
List of 7
 $ sig2   : num 0.0996
 $ a      : Named num 0
  ..- attr(*, "names")= chr "16"
 $ y      : Named num [1:13] 0 0 0 0 0 0 0 0 0 0 ...
  ..- attr(*, "names")= chr [1:13] "17" "18" "19" "20" ...
 $ pr.mean: Named num [1:15] 1000 0 0 0 0 0 0 0 0 0 ...
  ..- attr(*, "names")= chr [1:15] "sig2" "16" "17" "18" ...
 $ pr.var : Named num [1:15] 1e+06 1e-100 1e+03 1e+03 1e+03 ...
  ..- attr(*, "names")= chr [1:15] "sig2" "16" "17" "18" ...
 $ prop   : num [1:15] 0.000526 0.000526 0.000526 0.000526 0.000526 ...
 $ sample : num 100
Starting MCMC...
Done MCMC.
RStudioGD 
        2 

> #TODO Error in anc.Bayes(or_tree, valor, ngen = 1e+05, control = list(pr.mean = pm,  : some branch lengths are 0 or nearly zero
> 
> incorporacion_fosil(0,mv1,consensus_tree, "M", "Figures/M_fosil_muestra.png",valor_raiz = 0) #M
Control parameters (set by user or default):
List of 7
 $ sig2   : num 0.25
 $ a      : Named num 0
  ..- attr(*, "names")= chr "16"
 $ y      : Named num [1:13] 0 0 0 0 0 0 0 0 0 0 ...
  ..- attr(*, "names")= chr [1:13] "17" "18" "19" "20" ...
 $ pr.mean: Named num [1:15] 1000 0 0 0 0 0 0 0 0 0 ...
  ..- attr(*, "names")= chr [1:15] "sig2" "16" "17" "18" ...
 $ pr.var : Named num [1:15] 1e+06 1e-100 1e+03 1e+03 1e+03 ...
  ..- attr(*, "names")= chr [1:15] "sig2" "16" "17" "18" ...
 $ prop   : num [1:15] 0.00132 0.00132 0.00132 0.00132 0.00132 ...
 $ sample : num 100
Starting MCMC...
Done MCMC.
RStudioGD 
        2 

> #TODO Error in anc.Bayes(or_tree, valor, ngen = 1e+05, control = list(pr.mean = pm,  : some branch lengths are 0 or nearly zero
> 
> ##COMUNIDADES TOTALES (y_total)
> incorporacion_fosil2 <- function(fosil,valor,tree, label, filename)
+ {
+   # Verificar longitudes de ramas
+   branch_lengths <- tree$edge.length
+   # Ajustar ramas con longitud cero
+   min_branch_length <- 1e-6  # Define un valor m?nimo peque?o
+   branch_lengths[branch_lengths == 0] <- min_branch_length
+   tree$edge.length <- branch_lengths
+   #incorporar fosil
+   pm<-setNames(c(1000,rep(fosil,tree$Nnode)),
+                c("sig2",1:tree$Nnode+length(tree$tip.label)))
+   #incorporaci?n en la raiz
+   nn<-as.character((length(tree$tip.label)+1))
+   pm[nn]<-0
+   # Varianza previa
+   pv <- setNames(c(1000^2, rep(1000, length(pm) - 1)), names(pm))
+   pv[as.character(nn)] <- 1e-100
+   # Ejecutar MCMC
+   mcmc <- anc.Bayes(tree, valor, ngen = 100000,
+                     control = list(pr.mean = pm, pr.var = pv,
+                                    a = pm[nn],
+                                    y = pm[as.character(2:tree$Nnode + length(tree$tip.label))]))
+   mcmc_tree <- mcmc$tree
+   # Obtener valores ancestrales estimados
+   w <- as.data.frame(mcmc$mcmc)
+   exclude_cols <- c("gen", "sig2", "logLik")
+   existing_cols <- intersect(exclude_cols, colnames(w))
+   w <- colMeans(w[, !(colnames(w) %in% existing_cols)])
+   # Agregar valor tip.labels
+   trait_name <- paste0(label, "_trait2")
+   tip.community <- paste0 (mcmc_tree$tip.label)
+   name <- get(trait_name)[tip.community,]
+   
+   # Guardar el gr?fico como una imagen PNG
+   pdf(filename,
+       width=200,
+       height=250)
+   # Ajustar la separaci?n entre nodos y otros par?metros
+   par(mar = c(4, 4, 2, 2) + 0.1)
+   plot(mcmc_tree, show.tip.label =TRUE, cex = 2, edge.width = 2, label.offset = 0.001, direction = "rightwards", mar = c(6, 6, 3, 3) + 0.1)
+   title(main = paste(label, "fossil ancestral tree.",label,"in root =",fosil), line = -15, cex.main = 12)
+   nodelabels(text = round(w, 4), cex = 5, bg = "lightblue")
+   tiplabels(text = round(name, 4), cex = 5, bg = "lightpink", offset = 0.02)
+   dev.off()
+ }

> incorporacion_fosil2(0,sv2,y_total,"S", "Figures/S_fosil_total.pdf") #S
Control parameters (set by user or default):
List of 7
 $ sig2   : num 0.107
 $ a      : Named num 0
  ..- attr(*, "names")= chr "171"
 $ y      : Named num [1:168] 0 0 0 0 0 0 0 0 0 0 ...
  ..- attr(*, "names")= chr [1:168] "172" "173" "174" "175" ...
 $ pr.mean: Named num [1:170] 1000 0 0 0 0 0 0 0 0 0 ...
  ..- attr(*, "names")= chr [1:170] "sig2" "171" "172" "173" ...
 $ pr.var : Named num [1:170] 1e+06 1e-100 1e+03 1e+03 1e+03 ...
  ..- attr(*, "names")= chr [1:170] "sig2" "171" "172" "173" ...
 $ prop   : num [1:170] 0.000527 0.000527 0.000527 0.000527 0.000527 ...
 $ sample : num 100
Starting MCMC...
Done MCMC.
RStudioGD 
        2 

> #incorporacion_fosil2(1,rv2,y_total,"R", "Figures/R_fosil_total.pdf") #R
> 
> incorporacion_fosil2(1,av2,y_total,"A", "Figures/A_fosil_total.pdf") #A
Control parameters (set by user or default):
List of 7
 $ sig2   : num 0.0392
 $ a      : Named num 0
  ..- attr(*, "names")= chr "171"
 $ y      : Named num [1:168] 1 1 1 1 1 1 1 1 1 1 ...
  ..- attr(*, "names")= chr [1:168] "172" "173" "174" "175" ...
 $ pr.mean: Named num [1:170] 1000 0 1 1 1 1 1 1 1 1 ...
  ..- attr(*, "names")= chr [1:170] "sig2" "171" "172" "173" ...
 $ pr.var : Named num [1:170] 1e+06 1e-100 1e+03 1e+03 1e+03 ...
  ..- attr(*, "names")= chr [1:170] "sig2" "171" "172" "173" ...
 $ prop   : num [1:170] 0.000193 0.000193 0.000193 0.000193 0.000193 ...
 $ sample : num 100
Starting MCMC...
Done MCMC.
RStudioGD 
        2 

> incorporacion_fosil2(1,gv2,y_total,"G", "Figures/G_fosil_total.pdf") #G
Control parameters (set by user or default):
List of 7
 $ sig2   : num 0.0734
 $ a      : Named num 0
  ..- attr(*, "names")= chr "171"
 $ y      : Named num [1:168] 1 1 1 1 1 1 1 1 1 1 ...
  ..- attr(*, "names")= chr [1:168] "172" "173" "174" "175" ...
 $ pr.mean: Named num [1:170] 1000 0 1 1 1 1 1 1 1 1 ...
  ..- attr(*, "names")= chr [1:170] "sig2" "171" "172" "173" ...
 $ pr.var : Named num [1:170] 1e+06 1e-100 1e+03 1e+03 1e+03 ...
  ..- attr(*, "names")= chr [1:170] "sig2" "171" "172" "173" ...
 $ prop   : num [1:170] 0.000361 0.000361 0.000361 0.000361 0.000361 ...
 $ sample : num 100
Starting MCMC...
Done MCMC.
RStudioGD 
        2 

> incorporacion_fosil2(0,mv2,y_total,"M", "Figures/M_fosil_total.pdf") #M
Control parameters (set by user or default):
List of 7
 $ sig2   : num 0.129
 $ a      : Named num 0
  ..- attr(*, "names")= chr "171"
 $ y      : Named num [1:168] 0 0 0 0 0 0 0 0 0 0 ...
  ..- attr(*, "names")= chr [1:168] "172" "173" "174" "175" ...
 $ pr.mean: Named num [1:170] 1000 0 0 0 0 0 0 0 0 0 ...
  ..- attr(*, "names")= chr [1:170] "sig2" "171" "172" "173" ...
 $ pr.var : Named num [1:170] 1e+06 1e-100 1e+03 1e+03 1e+03 ...
  ..- attr(*, "names")= chr [1:170] "sig2" "171" "172" "173" ...
 $ prop   : num [1:170] 0.000633 0.000633 0.000633 0.000633 0.000633 ...
 $ sample : num 100
Starting MCMC...
Done MCMC.
RStudioGD 
        2 

### [Step 17/17] Running: scripts_fv/OBJETIVO_5.8.I_de_Moran.R ###


> ##########################################################################################################################################################
> #########Project 111160402: Cultural phylogenetics and coevolution of wealth inheritance and land tenure norms in agropastoralist communities.############
> ##########################################################################################################################################################
> #### OBJETIVO 5 ####
> ### Part 8 ###
> ### To plot over tips of the resulting trees the estimated values of each trait, and compute the most likely values for each at the internal nodes ###
> 
> #### LIBRERÍAS
> library(spdep)
Loading required package: spData
To access larger datasets in this package, install the spDataLarge package with:
`install.packages('spDataLarge', repos='https://nowosad.github.io/drat/',
type='source')`

Attaching package: ‘spData’

The following object is masked _by_ ‘.GlobalEnv’:

    coords

Loading required package: sf
Linking to GEOS 3.13.1, GDAL 3.10.2, PROJ 9.6.0; sf_use_s2() is TRUE

> library(dplyr)

> library(geosphere)

> library(SDPDmod)

> #Datos geográficos
> coordenadas <- read.csv("scripts_fv/Datos/coordenadas.csv", header = T, fileEncoding = "UTF-8-BOM")

> coordenadas$community <- gsub(" ", "_", coordenadas$community)

> coordenadas$community[grepl("LA_RINCONADA_DE_PUNITAQUI" , coordenadas$community)] <- "RINCONADA_DE_PUNITAQUI"

> rownames(coordenadas) <- coordenadas$community

> colnames(coordenadas)<- c("community","lon","lat","org_name")

> coordenadas<-select(coordenadas,community,lon,lat)

> #Data community
> #View(GM_df)
> # Ajustar el modelo de regresión de G ~ M
> modelo <- lm(G ~ M, data = GM_df)

> G.reg.M <- predict(modelo)

> #Crear df
> # Combinar tablas por una clave común (por ejemplo, "community")
> GM_df$community <- row.names(GM_df)

> community_data <- GM_df %>%
+   left_join(coordenadas, by = "community" ) %>%
+   mutate(
+     G.reg.M = predict(lm(M ~ G, data = .))  # Calcular valores ajustados (G~M)
+   ) %>%
+   select(community, G, M, lon, lat, G.reg.M)

> community_data <- na.omit(community_data)

> # Verificar el resultado
> colnames(community_data)
[1] "community" "G"         "M"         "lon"       "lat"       "G.reg.M"  

> head(community_data)
               community           G          M       lon       lat     G.reg.M
1         AGUA_FRIA_ALTA 0.041448692 0.04225352 -71.37628 -31.50133  0.03043674
2         AGUA_FRIA_BAJA 0.005494168 0.00000000 -71.38273 -31.54779 -0.01154834
3                ALCONES 0.296222710 0.31048387 -71.54502 -30.79524  0.32794326
4  ALGARROBAL_Y_DESPENSA 0.000000000 0.00000000 -70.60645 -29.96384 -0.01796402
5 ALGARROBO_DE_HORNILLOS 0.000000000 0.00000000 -71.50581 -31.15801 -0.01796402
6  ALHUEMILLA_LAS_PALMAS 0.000000000 0.00000000 -71.52314 -31.22566 -0.01796402

> # Create spatial points from coordinates
> community_data$G.reg.M
            1             2             3             4             5             6 
 0.0304367368 -0.0115483355  0.3279432645 -0.0179640246 -0.0179640246 -0.0179640246 
            7             8             9            10            11            12 
 0.3587588535  0.1955932754 -0.0179640246  0.3052852650  0.3792095367  0.2183855446 
           13            14            15            16            17            18 
 0.3925990081  0.0983315761  0.0085458378  0.0464463226  0.1135769453  0.0340170766 
           19            20            21            22            23            24 
 0.5542374161 -0.0179640246  0.0267988479  0.0053706582  0.2778121216  0.2459950074 
           25            26            27            28            29            30 
-0.0179640246  0.4493939896  0.1042362141 -0.0179640246  0.5040172841  0.2605875461 
           31            32            33            34            35            36 
 0.0995999389 -0.0179640246  0.0550391983  0.0815415435  0.1161290405  0.0093722756 
           37            38            39            40            41            42 
-0.0179640246  0.0753502812 -0.0179640246 -0.0179640246  0.0767732710 -0.0179640246 
           43            44            45            46            47            48 
-0.0179640246  0.0730189664  0.3058148555  0.2842526119  0.0348617255  0.1478385480 
           49            50            51            52            53            54 
 0.0580404073  0.3105821240  0.0595054402  0.3203477620  0.2250922967 -0.0179640246 
           55            56            57            58            59            60 
 0.0373493647 -0.0179640246  0.5704698315  0.2074001382  0.2934298710 -0.0032248800 
           61            62            63            64            65            66 
-0.0179640246  0.1389230775  0.4180691294  0.2698358371  0.1535269113  0.0184489712 
           67            68            69            70            71            73 
-0.0179640246  0.1166094044  0.3304319235  0.1229310887 -0.0179640246  0.1757562295 
           74            75            76            77            78            79 
-0.0179640246  0.2436919869  0.1316521378 -0.0179640246  0.0258899731 -0.0179640246 
           80            81            82            83            84            85 
 0.2512501524  0.0104806101 -0.0179640246  0.1353265272  0.0348617255 -0.0179640246 
           86            87            88            89            90            91 
-0.0179640246  0.0878764766 -0.0179640246  0.0430936020  0.5938886349 -0.0179640246 
           92            93            94            95            96            97 
 0.3418818317 -0.0002796958  0.6823204836  0.1845206424 -0.0179640246  0.4727793456 
           98            99           100           101           102           103 
-0.0179640246 -0.0179640246 -0.0179640246 -0.0179640246  0.0482414224  0.4229958626 
          104           105           106           107           108           109 
 0.6084525867 -0.0179640246 -0.0179640246  0.0325869325 -0.0179640246  0.0373493647 
          110           111           112           113           114           115 
-0.0179640246  0.3067187667  0.2485343023  0.0208643398  0.2764209608  0.4983227295 
          116           117           118           119           120           121 
 0.4009504824  0.3522535775  0.1823813127  0.3012147184  0.2245639133 -0.0179640246 
          122           123           124           125           126           127 
 0.2442924857 -0.0179640246  0.2362140160  0.2093044581  0.1217533242 -0.0179640246 
          128           129           130           131           132           133 
-0.0091186461  0.3292545478  0.0571041467  0.1434192465  0.3825994466 -0.0179640246 
          134           135           136           137           138           139 
-0.0179640246  0.0153401353  0.6084287908 -0.0179640246 -0.0179640246  0.1967669046 
          140           141           142           143           144           145 
-0.0179640246 -0.0179640246  0.2666455815 -0.0179640246 -0.0179640246  0.3263141402 
          146           147           148           149           150           151 
-0.0179640246 -0.0179640246  0.3687507971  0.0267988479  0.3890868194  0.2547357605 
          152           153           154           155           156           157 
-0.0179640246  0.3555707090 -0.0179640246  0.3129092892  0.1272923273 -0.0179640246 
          158           159           161           162           163           164 
 0.0489455281 -0.0179640246  0.4502423477  0.0462598058  0.1533217561 -0.0179640246 
          165           166           167           168           169           170 
 0.0928815282  0.2494256913 -0.0179640246 -0.0179640246  0.0373493647 -0.0179640246 

> coords <- community_data[, c("lon", "lat")]

> # Generate distance-based neighbors (e.g., within a distance of 1.5 units)
> # Units are somewhat arbitrary, ew may need to find a number by trial an error
> neighbors <- dnearneigh(coords, 0, 1.5)

> # Convert to spatial weights
> weights <- nb2listw(neighbors, style = "W") 

> # K-neighbours
> 
> # Generate k-nearest neighbors (determining k is also a bit trial an error)
> n <- nrow(community_data)

> k_est <- sqrt(n)/2

> k_est_2 <- n^(1/2)

> #neighbors_knn <- knn2nb(knearneigh(coords, k = k_est_2)) #Or k_est_2 ## NO FUNCIONA
> # Convert to spatial weights
> #weights_knn <- nb2listw(neighbors_knn, style = "W")
> #TODO Warning message:
> #In matrix(z$nn, np, k, byrow = TRUE) :
> #  data length [2177] is not a sub-multiple or multiple of the number of rows [168]
> 
> 
> 
> # Moran's I for G,M
> moran_G <- moran.test(community_data$G, weights)

> print(moran_G)

	Moran I test under randomisation

data:  community_data$G  
weights: weights    

Moran I statistic standard deviate = -3.7758, p-value = 0.9999
alternative hypothesis: greater
sample estimates:
Moran I statistic       Expectation          Variance 
    -1.419118e-02     -5.988024e-03      4.720147e-06 


> # I>0, Positive autocorrelation (similar values cluster).
> # I=0, Random distribution.
> # I<0, Negative autocorrelation (dissimilar values cluster). *** ESTE ES EL CASO
> 
> moran_M <- moran.test(community_data$M, weights)

> print(moran_M)

	Moran I test under randomisation

data:  community_data$M  
weights: weights    

Moran I statistic standard deviate = -2.8454, p-value = 0.9978
alternative hypothesis: greater
sample estimates:
Moran I statistic       Expectation          Variance 
    -1.210217e-02     -5.988024e-03      4.617416e-06 


> # I>0, Positive autocorrelation (similar values cluster).
> # I=0, Random distribution.
> # I<0, Negative autocorrelation (dissimilar values cluster). *** ESTE ES EL CASO
> 
> moran_GM <- moran.test(community_data$G.reg.M, weights)

> print(moran_GM)

	Moran I test under randomisation

data:  community_data$G.reg.M  
weights: weights    

Moran I statistic standard deviate = -3.7758, p-value = 0.9999
alternative hypothesis: greater
sample estimates:
Moran I statistic       Expectation          Variance 
    -1.419118e-02     -5.988024e-03      4.720147e-06 


> # I>0, Positive autocorrelation (similar values cluster).
> # I=0, Random distribution.
> # I<0, Negative autocorrelation (dissimilar values cluster). *** ESTE ES EL CASO
> 
